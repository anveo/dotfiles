<?xml version="1.0" encoding="iso-8859-1"?>
<manual>
<methodsynopsis function="apache_child_terminate">
  <type>bool</type>
  <methodname>apache_child_terminate</methodname>
  <void/>
  <desc>apache_child_terminate will register the Apache process executing the current PHP request for termination once execution of PHP code it is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.  </desc>
</methodsynopsis>
<methodsynopsis function="apache_get_modules">
  <type>array</type>
  <methodname>apache_get_modules</methodname>
  <void/>
  <desc> Get a list of loaded Apache modules. </desc>
</methodsynopsis>
<methodsynopsis function="apache_get_version">
  <type>string</type>
  <methodname>apache_get_version</methodname>
  <void/>
  <desc> Fetch the Apache version. </desc>
</methodsynopsis>
<methodsynopsis function="apache_getenv">
  <type>string</type>
  <methodname>apache_getenv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>walk_to_top</parameter>
  </methodparam>
  <desc> Get an Apache environment variable as specified by  variable. </desc>
</methodsynopsis>
<methodsynopsis function="apache_lookup_uri">
  <type>object</type>
  <methodname>apache_lookup_uri</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> This performs a partial request for a URI.  It goes just far enough to obtain all the important information about the given resource. </desc>
</methodsynopsis>
<methodsynopsis function="apache_note">
  <type>string</type>
  <methodname>apache_note</methodname>
  <methodparam>
    <type>string</type>
    <parameter>note_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>note_value</parameter>
  </methodparam>
  <desc>apache_note is an Apache-specific function which gets and sets values in a request's notes table. </desc>
</methodsynopsis>
<methodsynopsis function="apache_request_headers">
  <type>array</type>
  <methodname>apache_request_headers</methodname>
  <void/>
  <desc> Fetches all HTTP requests from the current request. </desc>
</methodsynopsis>
<methodsynopsis function="apache_reset_timeout">
  <type>bool</type>
  <methodname>apache_reset_timeout</methodname>
  <void/>
  <desc>apache_reset_timeout resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout calls, Apache can theoretically run forever. </desc>
</methodsynopsis>
<methodsynopsis function="apache_response_headers">
  <type>array</type>
  <methodname>apache_response_headers</methodname>
  <void/>
  <desc> Fetch all HTTP response headers. </desc>
</methodsynopsis>
<methodsynopsis function="apache_setenv">
  <type>int</type>
  <methodname>apache_setenv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>variable</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>walk_to_top</parameter>
  </methodparam>
  <desc>apache_setenv sets the value of the Apache environment variable specified by variable. </desc>
</methodsynopsis>
<methodsynopsis function="ascii2ebcdic">
  <type>int</type>
  <methodname>ascii2ebcdic</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ascii_str</parameter>
  </methodparam>
  <desc>ascii2ebcdic is an Apache-specific function which is available only on EBCDIC based operating systems (OS/390, BS2000). It translates the ASCII encoded string ascii_str to its equivalent EBCDIC representation (binary safe), and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="ebcdic2ascii">
  <type>int</type>
  <methodname>ebcdic2ascii</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ebcdic_str</parameter>
  </methodparam>
  <desc>ebcdic2ascii is an Apache-specific function which is available only on EBCDIC based operating systems (OS/390, BS2000). It translates the EBCDIC encoded string ebcdic_str to its equivalent ASCII representation (binary safe), and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="getallheaders">
  <type>array</type>
  <methodname>getallheaders</methodname>
  <void/>
  <desc> Fetches all HTTP requests from the current request. </desc>
</methodsynopsis>
<methodsynopsis function="virtual">
  <type>int</type>
  <methodname>virtual</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>virtual is an Apache-specific function which is equivalent to &amp;lt;!--#include virtual...--&amp;gt; in mod_include. It performs an Apache sub-request.  It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache.  Note that for a CGI script, the script must generate valid CGI headers.  At the minimum that means it must generate a Content-type header. </desc>
</methodsynopsis>
<methodsynopsis function="apd_breakpoint">
  <type>void</type>
  <methodname>apd_breakpoint</methodname>
  <methodparam>
    <type>int</type>
    <parameter>debug_level</parameter>
  </methodparam>
  <desc> This can be used to stop the running of your script, and await responses  on the connected socket.  To step the program, just send enter (a blank  line), or enter a php command to be executed.  A typical session using  tcplisten would look like this. </desc>
</methodsynopsis>
<methodsynopsis function="apd_callstack">
  <type>array</type>
  <methodname>apd_callstack</methodname>
  <void/>
  <desc> Returns the current call stack as an array </desc>
</methodsynopsis>
<methodsynopsis function="apd_clunk">
  <type>void</type>
  <methodname>apd_clunk</methodname>
  <methodparam>
    <type>string</type>
    <parameter>warning</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <desc> Behaves like perl's Carp::cluck. Throw a warning and a callstack. The default line delimiter is "&amp;lt;BR /&amp;gt;\n". </desc>
</methodsynopsis>
<methodsynopsis function="apd_continue">
  <type>void</type>
  <methodname>apd_continue</methodname>
  <methodparam>
    <type>int</type>
    <parameter>debug_level</parameter>
  </methodparam>
  <desc> Usually sent via the socket to restart the interpreter. </desc>
</methodsynopsis>
<methodsynopsis function="apd_croak">
  <type>void</type>
  <methodname>apd_croak</methodname>
  <methodparam>
    <type>string</type>
    <parameter>warning</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <desc> Behaves like perl's Carp::croak. Throw an error, a callstack and then exit.  The default line delimiter is "&amp;lt;BR /&amp;gt;\n". </desc>
</methodsynopsis>
<methodsynopsis function="apd_dump_function_table">
  <type>void</type>
  <methodname>apd_dump_function_table</methodname>
  <void/>
  <desc> Outputs the current function table. </desc>
</methodsynopsis>
<methodsynopsis function="apd_dump_persistent_resources">
  <type>array</type>
  <methodname>apd_dump_persistent_resources</methodname>
  <void/>
  <desc> Return all persistent resources as an array. </desc>
</methodsynopsis>
<methodsynopsis function="apd_dump_regular_resources">
  <type>array</type>
  <methodname>apd_dump_regular_resources</methodname>
  <void/>
  <desc> Return all current regular resources as an array. </desc>
</methodsynopsis>
<methodsynopsis function="apd_echo">
  <type>void</type>
  <methodname>apd_echo</methodname>
  <methodparam>
    <type>string</type>
    <parameter>output</parameter>
  </methodparam>
  <desc> Usually sent via the socket to request information about the running  script. </desc>
</methodsynopsis>
<methodsynopsis function="apd_get_active_symbols">
  <type>array</type>
  <methodname>apd_get_active_symbols</methodname>
  <methodparam>
    <parameter/>
  </methodparam>
  <desc> Returns the names of all the variables defined in the active scope, (not  their values) </desc>
</methodsynopsis>
<methodsynopsis function="apd_set_pprof_trace">
  <type>void</type>
  <methodname>apd_set_pprof_trace</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dump_directory</parameter>
  </methodparam>
  <desc> Starts debugging to {dump_directory}/pprof_{process_id}, if  dump_directory is not set, then the apd.dumpdir setting from the  &amp;amp;php.ini; file is used. </desc>
</methodsynopsis>
<methodsynopsis function="apd_set_session_trace">
  <type>void</type>
  <methodname>apd_set_session_trace</methodname>
  <methodparam>
    <type>int</type>
    <parameter>debug_level</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dump_directory</parameter>
  </methodparam>
  <desc> Starts debugging to {dump_directory}/apd_dump_{process_id}, if  dump_directory is not set, then the apd.dumpdir setting from the  &amp;amp;php.ini; file is used. </desc>
</methodsynopsis>
<methodsynopsis function="apd_set_session">
  <type>void</type>
  <methodname>apd_set_session</methodname>
  <methodparam>
    <type>int</type>
    <parameter>debug_level</parameter>
  </methodparam>
  <desc> This can be used to increase or decrease debugging in a different area of  your application,.debug_level is an integer which is formed by adding  together the following values: </desc>
</methodsynopsis>
<methodsynopsis function="apd_set_socket_session_trace">
  <type>bool</type>
  <methodname>apd_set_socket_session_trace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ip_address_or_unix_socket_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>socket_type</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>debug_level</parameter>
  </methodparam>
  <desc> Connects to the tcp server (eg. tcplisten) specified IP or Unix Domain  socket (like a file), and sends debugging data to the socket. You can  use any port, but higher numbers are better as most of the lower numbers  may be used by other system services. </desc>
</methodsynopsis>
<methodsynopsis function="override_function">
  <type>bool</type>
  <methodname>override_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_args</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_code</parameter>
  </methodparam>
  <desc> Syntax similar to create_function(). Overrides built-in functions (replaces them in the symbol table). </desc>
</methodsynopsis>
<methodsynopsis function="rename_function">
  <type>bool</type>
  <methodname>rename_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>original_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_name</parameter>
  </methodparam>
  <desc> Renames orig_name to new_name in the global function_table.  Useful for temporarily overriding builtin functions. </desc>
</methodsynopsis>
<methodsynopsis function="array_change_key_case">
  <type>array</type>
  <methodname>array_change_key_case</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>case</parameter>
  </methodparam>
  <desc>array_change_key_case changes the keys in the input array to be all lowercase or uppercase. The change depends on the last optional case parameter. You can pass two constants there, CASE_UPPER and CASE_LOWER. The default is CASE_LOWER. The function will leave number indices as is. </desc>
</methodsynopsis>
<methodsynopsis function="array_chunk">
  <type>array</type>
  <methodname>array_chunk</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>preserve_keys</parameter>
  </methodparam>
  <desc>array_chunk splits the array into several arrays with size values in them. You may also have an array with less values at the end. You get the arrays as members of a multidimensional array indexed with numbers starting from zero. </desc>
</methodsynopsis>
<methodsynopsis function="array_combine">
  <type>array</type>
  <methodname>array_combine</methodname>
  <methodparam>
    <type>array</type>
    <parameter>keys</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>values</parameter>
  </methodparam>
  <desc> Returns an array by using the values from the keys array as keys and the values from the values array as the corresponding values. </desc>
</methodsynopsis>
<methodsynopsis function="array_count_values">
  <type>array</type>
  <methodname>array_count_values</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <desc>array_count_values returns an array using the values of the input array as keys and their frequency in input as values. </desc>
</methodsynopsis>
<methodsynopsis function="array_diff_assoc">
  <type>array</type>
  <methodname>array_diff_assoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc>array_diff_assoc returns an array containing all the values from array1 that are not present in any of the other arguments. Note that the keys are used in the comparison unlike array_diff. </desc>
</methodsynopsis>
<methodsynopsis function="array_diff_key">
  <type>array</type>
  <methodname>array_diff_key</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc>array_diff_key returns an array containing all the values of array1 that have keys that are not present in any of the other arguments. Note that the associativity is preserved. This function is like array_diff except the comparison is done on the keys instead of the values. </desc>
</methodsynopsis>
<methodsynopsis function="array_diff_uassoc">
  <type>array</type>
  <methodname>array_diff_uassoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_diff_uassoc returns an array containing all the values from array1 that are not present in any of the other arguments. Note that the keys are used in the comparison unlike array_diff. </desc>
</methodsynopsis>
<methodsynopsis function="array_diff_ukey">
  <type>array</type>
  <methodname>array_diff_ukey</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_diff_ukey returns an array containing all the values of array1 that have keys that are not present in any of the other arguments. Note that the associativity is preserved. This function is like array_diff except the comparison is done on the keys instead of the values. </desc>
</methodsynopsis>
<methodsynopsis function="array_diff">
  <type>array</type>
  <methodname>array_diff</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc>array_diff returns an array containing all the values of array1 that are not present in any of the other arguments. Note that keys are preserved. </desc>
</methodsynopsis>
<methodsynopsis function="array_fill">
  <type>array</type>
  <methodname>array_fill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>start_index</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>num</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>array_fill fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.  Note that  num must be a number greater than zero, or PHP will throw a warning. </desc>
</methodsynopsis>
<methodsynopsis function="array_filter">
  <type>array</type>
  <methodname>array_filter</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <desc>array_filter iterates over each value in the input array passing them to the callback function.  If the  callback function returns true, the current value from input is returned into the result array.  Array keys are preserved. </desc>
</methodsynopsis>
<methodsynopsis function="array_flip">
  <type>array</type>
  <methodname>array_flip</methodname>
  <methodparam>
    <type>array</type>
    <parameter>trans</parameter>
  </methodparam>
  <desc>array_flip returns an array in flip order, i.e. keys from trans become values and values from trans become keys. </desc>
</methodsynopsis>
<methodsynopsis function="array_intersect_assoc">
  <type>array</type>
  <methodname>array_intersect_assoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc> array_intersect_assoc example "green", "b" =&amp;gt; "brown", "c" =&amp;gt; "blue", "red");
$array2 = array("a" =&amp;gt; "green", "yellow", "red");
$result_array = array_intersect_assoc($array1, $array2);
?&amp;gt;
]]&amp;gt; $result_array will look like: green
)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="array_intersect_key">
  <type>array</type>
  <methodname>array_intersect_key</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc>array_intersect_key returns an array containing all the values of array1 which have matching keys that are present in all the arguments. </desc>
</methodsynopsis>
<methodsynopsis function="array_intersect_uassoc">
  <type>array</type>
  <methodname>array_intersect_uassoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_intersect_uassoc returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect. </desc>
</methodsynopsis>
<methodsynopsis function="array_intersect_ukey">
  <type>array</type>
  <methodname>array_intersect_ukey</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_intersect_ukey returns an array containing all the values of array1 which have matching keys that are present in all the arguments. </desc>
</methodsynopsis>
<methodsynopsis function="array_intersect">
  <type>array</type>
  <methodname>array_intersect</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <desc>array_intersect returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved. </desc>
</methodsynopsis>
<methodsynopsis function="array_key_exists">
  <type>bool</type>
  <methodname>array_key_exists</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>search</parameter>
  </methodparam>
  <desc>array_key_exists returns &amp;amp;true; if the given key is set in the array. key can be any value possible for an array index. array_key_exists also works on objects. </desc>
</methodsynopsis>
<methodsynopsis function="array_keys">
  <type>array</type>
  <methodname>array_keys</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>search_value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>strict</parameter>
  </methodparam>
  <desc>array_keys returns the keys, numeric and string, from the input array. </desc>
</methodsynopsis>
<methodsynopsis function="array_map">
  <type>array</type>
  <methodname>array_map</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>arr1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>array_map returns an array containing all the elements of arr1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map</desc>
</methodsynopsis>
<methodsynopsis function="array_merge_recursive">
  <type>array</type>
  <methodname>array_merge_recursive</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>array_merge_recursive merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.  It returns the resulting array. </desc>
</methodsynopsis>
<methodsynopsis function="array_merge">
  <type>array</type>
  <methodname>array_merge</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>array_merge merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one.  It returns the resulting array. </desc>
</methodsynopsis>
<methodsynopsis function="array_multisort">
  <type>bool</type>
  <methodname>array_multisort</methodname>
  <methodparam>
    <type>array</type>
    <parameter>ar1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>arg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>...</parameter>
  </methodparam>
<!-- Parameters don't need to be passed by reference -->
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="array_pad">
  <type>array</type>
  <methodname>array_pad</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pad_size</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>pad_value</parameter>
  </methodparam>
  <desc>array_pad returns a copy of the input padded to size specified by pad_size with value pad_value. If pad_size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place. It is possible to add most 1048576 elements at a time. </desc>
</methodsynopsis>
<methodsynopsis function="array_pop">
  <type>mixed</type>
  <methodname>array_pop</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>array_pop pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), &amp;amp;null; will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="array_push">
  <type>int</type>
  <methodname>array_push</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>array_push treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as: ]]&amp;gt; repeated for each var. </desc>
</methodsynopsis>
<methodsynopsis function="array_rand">
  <type>mixed</type>
  <methodname>array_rand</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>num_req</parameter>
  </methodparam>
  <desc>array_rand is rather useful when you want to pick one or more random entries out of an array. It takes an input array and an optional argument num_req which specifies how many entries you want to pick - if not specified, it defaults to 1. </desc>
</methodsynopsis>
<methodsynopsis function="array_reduce">
  <type>mixed</type>
  <methodname>array_reduce</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>initial</parameter>
  </methodparam>
  <desc>array_reduce applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value. If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty. </desc>
</methodsynopsis>
<methodsynopsis function="array_reverse">
  <type>array</type>
  <methodname>array_reverse</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>preserve_keys</parameter>
  </methodparam>
  <desc>array_reverse takes input array and returns a new array with the order of the elements reversed, preserving the keys if preserve_keys is &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="array_search">
  <type>mixed</type>
  <methodname>array_search</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>strict</parameter>
  </methodparam>
  <desc> Searches haystack for needle and returns the key if it is found in the array, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="array_shift">
  <type>mixed</type>
  <methodname>array_shift</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>array_shift shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched. If array is empty  (or is not an array), &amp;amp;null; will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="array_slice">
  <type>array</type>
  <methodname>array_slice</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>preserve_keys</parameter>
  </methodparam>
  <desc>array_slice returns the sequence of elements from the array array as specified by the offset and length parameters. </desc>
</methodsynopsis>
<methodsynopsis function="array_splice">
  <type>array</type>
  <methodname>array_splice</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">input</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>
        replacement
       </parameter>
  </methodparam>
  <desc>array_splice removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied. It returns an array containing the extracted elements. </desc>
</methodsynopsis>
<methodsynopsis function="array_sum">
  <type>number</type>
  <methodname>array_sum</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array</parameter>
  </methodparam>
  <desc>array_sum returns the sum of values in an array as an integer or float. </desc>
</methodsynopsis>
<methodsynopsis function="array_udiff_assoc">
  <type>array</type>
  <methodname>array_udiff_assoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <desc>array_udiff_assoc returns an array containing all the values from array1 that are not present in any of the other arguments. Note that the keys are used in the comparison unlike  array_diff and array_udiff. The comparison of arrays' data is performed by using an user-supplied callback. In this aspect the behaviour is opposite to the behaviour of array_diff_assoc which uses internal function for comparison. </desc>
</methodsynopsis>
<methodsynopsis function="array_udiff_uassoc">
  <type>array</type>
  <methodname>array_udiff_uassoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_udiff_uassoc returns an array containing all the values from array1 that are not present in any of the other arguments. Note that the keys are used in the comparison unlike  array_diff and array_udiff. The comparison of arrays' data is performed by using an user-supplied callback : data_compare_func. In this aspect the behaviour is opposite to the behaviour of array_diff_assoc which uses internal function for comparison. The comparison of keys (indices) is done also by the  callback function key_compare_func. This behaviour is unlike what array_udiff_assoc does, since the latter compares the indices by using an internal function. </desc>
</methodsynopsis>
<methodsynopsis function="array_udiff">
  <type>array</type>
  <methodname>array_udiff</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <desc>array_udiff returns an array containing all the values of array1 that are not present in any of the other arguments. Note that keys are preserved. For the comparison of the data data_compare_func is used. It must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. This is unlike array_diff which uses an internal function for comparing the data. </desc>
</methodsynopsis>
<methodsynopsis function="array_uintersect_assoc">
  <type>array</type>
  <methodname>array_uintersect_assoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <desc>array_uintersect_assoc returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_uintersect. The data is compared by using a callback function. </desc>
</methodsynopsis>
<methodsynopsis function="array_uintersect_uassoc">
  <type>array</type>
  <methodname>array_uintersect_uassoc</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>key_compare_func</parameter>
  </methodparam>
  <desc>array_uintersect_uassoc returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_uintersect. Both the data and the indexes are compared by using a callback functions. </desc>
</methodsynopsis>
<methodsynopsis function="array_uintersect">
  <type>array</type>
  <methodname>array_uintersect</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array1</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>array2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter> ...</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>data_compare_func</parameter>
  </methodparam>
  <desc>array_uintersect returns an array containing all the values of array1 that are present in all the arguments. The data is compared by using a callback function. </desc>
</methodsynopsis>
<methodsynopsis function="array_unique">
  <type>array</type>
  <methodname>array_unique</methodname>
  <methodparam>
    <type>array</type>
    <parameter>array</parameter>
  </methodparam>
  <desc>array_unique takes input array and returns a new array without duplicate values. </desc>
</methodsynopsis>
<methodsynopsis function="array_unshift">
  <type>int</type>
  <methodname>array_unshift</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>array_unshift prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order.  All numerical array keys will be  modified to start counting from zero while literal keys won't be touched.  </desc>
</methodsynopsis>
<methodsynopsis function="array_values">
  <type>array</type>
  <methodname>array_values</methodname>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <desc>array_values returns all the values from the input array and indexes numerically the array. </desc>
</methodsynopsis>
<methodsynopsis function="array_walk_recursive">
  <type>bool</type>
  <methodname>array_walk_recursive</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">input</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>funcname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>userdata</parameter>
  </methodparam>
  <desc> If funcname needs to be working with the actual values of the array, specify the first parameter of funcname as a  reference. Then, any changes made to those elements will be made in the  original array itself. </desc>
</methodsynopsis>
<methodsynopsis function="array_walk">
  <type>bool</type>
  <methodname>array_walk</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>funcname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>userdata</parameter>
  </methodparam>
  <desc> If funcname needs to be working with the actual values of the array, specify the first parameter of funcname as a  reference. Then, any changes made to those elements will be made in the  original array itself. </desc>
</methodsynopsis>
<methodsynopsis function="array">
  <type>array</type>
  <methodname>array</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Returns an array of the parameters.  The parameters can be given an index with the =&amp;gt; operator.  Read the section on the array type for more information on what an array is. </desc>
</methodsynopsis>
<methodsynopsis function="arsort">
  <type>bool</type>
  <methodname>arsort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.  This is used mainly when sorting associative arrays where the actual element order is significant. </desc>
</methodsynopsis>
<methodsynopsis function="asort">
  <type>bool</type>
  <methodname>asort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.  This is used mainly when sorting associative arrays where the actual element order is significant. </desc>
</methodsynopsis>
<methodsynopsis function="compact">
  <type>array</type>
  <methodname>compact</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>varname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>compact takes a variable number of parameters. Each parameter can be either a string containing the name of the variable, or an array of variable names.  The array can contain other arrays of variable names inside it; compact handles it recursively. </desc>
</methodsynopsis>
<methodsynopsis function="count">
  <type>int</type>
  <methodname>count</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Returns the number of elements in var, which is typically an array, since anything else will have one element. </desc>
</methodsynopsis>
<methodsynopsis function="current">
  <type>mixed</type>
  <methodname>current</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array. </desc>
</methodsynopsis>
<methodsynopsis function="each">
  <type>array</type>
  <methodname>each</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> Returns the current key and value pair from the array array and advances the array cursor. This pair is returned in a four-element array, with the keys 0, 1, key, and value. Elements 0 and key contain the key name of the array element, and 1 and value contain the data. </desc>
</methodsynopsis>
<methodsynopsis function="end">
  <type>mixed</type>
  <methodname>end</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>end advances array's internal pointer to the last element, and returns its value. </desc>
</methodsynopsis>
<methodsynopsis function="extract">
  <type>int</type>
  <methodname>extract</methodname>
  <methodparam>
    <type>array</type>
    <parameter>var_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>extract_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> This function is used to import variables from an array into the current symbol table.  It takes an associative array var_array and treats keys as variable names and values as variable values.  For each key/value pair it will create a variable in the current symbol table, subject to extract_type and prefix parameters. </desc>
</methodsynopsis>
<methodsynopsis function="in_array">
  <type>bool</type>
  <methodname>in_array</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>strict</parameter>
  </methodparam>
  <desc> Searches haystack for needle and returns &amp;amp;true; if it is found in the array, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="key">
  <type>mixed</type>
  <methodname>key</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>key returns the index element of the current array position. </desc>
</methodsynopsis>
<methodsynopsis function="krsort">
  <type>bool</type>
  <methodname>krsort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays. </desc>
</methodsynopsis>
<methodsynopsis function="ksort">
  <type>bool</type>
  <methodname>ksort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays. </desc>
</methodsynopsis>
<methodsynopsis function="list">
  <type>void</type>
  <methodname>list</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>varname</parameter>
  </methodparam>
  <methodparam rep="repeat">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Like array, this is not really a function, but a language construct.  list is used to assign a list of variables in one operation. </desc>
</methodsynopsis>
<methodsynopsis function="natcasesort">
  <type>bool</type>
  <methodname>natcasesort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations.  This is described as a "natural ordering". </desc>
</methodsynopsis>
<methodsynopsis function="natsort">
  <type>bool</type>
  <methodname>natsort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering".  An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort) can be seen below: </desc>
</methodsynopsis>
<methodsynopsis function="next">
  <type>mixed</type>
  <methodname>next</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> Returns the array value in the next place that's pointed to by the internal array pointer, or &amp;amp;false; if there are no more elements. </desc>
</methodsynopsis>
<methodsynopsis function="prev">
  <type>mixed</type>
  <methodname>prev</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> Returns the array value in the previous place that's pointed to by the internal array pointer, or &amp;amp;false; if there are no more elements. If the array contains empty elements then this function will return &amp;amp;false; for these elements as well. To properly traverse an array which may contain empty elements see the each function. </desc>
</methodsynopsis>
<methodsynopsis function="range">
  <type>array</type>
  <methodname>range</methodname>
  <methodparam>
    <type>number</type>
    <parameter>low</parameter>
  </methodparam>
  <methodparam>
    <type>number</type>
    <parameter>high</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>number</type>
    <parameter>step</parameter>
  </methodparam>
  <desc>range returns an array of elements from low to high, inclusive.  If low &amp;gt; high, the sequence will be from high to low. </desc>
</methodsynopsis>
<methodsynopsis function="reset">
  <type>mixed</type>
  <methodname>reset</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>reset rewinds array's internal pointer to the first element and returns the value of the first array element, or &amp;amp;false; if the array is empty. </desc>
</methodsynopsis>
<methodsynopsis function="rsort">
  <type>bool</type>
  <methodname>rsort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> This function sorts an array in reverse order (highest to lowest). </desc>
</methodsynopsis>
<methodsynopsis function="shuffle">
  <type>bool</type>
  <methodname>shuffle</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc> This function shuffles (randomizes the order of the elements in) an array.  shuffle example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="sort">
  <type>bool</type>
  <methodname>sort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sort_flags</parameter>
  </methodparam>
  <desc> This function sorts an array.  Elements will be arranged from lowest to highest when this function has completed. </desc>
</methodsynopsis>
<methodsynopsis function="uasort">
  <type>bool</type>
  <methodname>uasort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>cmp_function</parameter>
  </methodparam>
  <desc> This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.  This is used mainly when sorting associative arrays where the actual element order is significant.  The comparison function is user-defined. </desc>
</methodsynopsis>
<methodsynopsis function="uksort">
  <type>bool</type>
  <methodname>uksort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>cmp_function</parameter>
  </methodparam>
  <desc>uksort will sort the keys of an array using a user-supplied comparison function.  If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function. </desc>
</methodsynopsis>
<methodsynopsis function="usort">
  <type>bool</type>
  <methodname>usort</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>cmp_function</parameter>
  </methodparam>
  <desc> This function will sort an array by its values using a user-supplied comparison function.  If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function. </desc>
</methodsynopsis>
<methodsynopsis function="aspell_check_raw">
  <type>bool</type>
  <methodname>aspell_check_raw</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> aspell_check_raw ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="aspell_check">
  <type>bool</type>
  <methodname>aspell_check</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> aspell_check ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="aspell_new">
  <type>int</type>
  <methodname>aspell_new</methodname>
  <methodparam>
    <type>string</type>
    <parameter>master</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>personal</parameter>
  </methodparam>
  <desc> aspell_new ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="aspell_suggest">
  <type>array</type>
  <methodname>aspell_suggest</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> aspell_suggest \n";  }
} ?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="bcadd">
  <type>string</type>
  <methodname>bcadd</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>right_operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Adds the left_operand to the right_operand and returns the sum in a string.  The optional scale parameter is used to set the number of digits after the decimal place in the result. </desc>
</methodsynopsis>
<methodsynopsis function="bccomp">
  <type>int</type>
  <methodname>bccomp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>right_operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Compares the left_operand to the right_operand and returns the result as an integer.  The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.  The return value is 0 if the two operands are equal.  If the left_operand is larger than the right_operand the return value is +1 and if the left_operand is less than the right_operand the return value is -1. </desc>
</methodsynopsis>
<methodsynopsis function="bcdiv">
  <type>string</type>
  <methodname>bcdiv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>right_operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Divides the left_operand by the right_operand and returns the result.  The optional scale sets the number of digits after the decimal place in the result, which defaults to 0. </desc>
</methodsynopsis>
<methodsynopsis function="bcmod">
  <type>string</type>
  <methodname>bcmod</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>modulus</parameter>
  </methodparam>
  <desc> Get the modulus of the left_operand using modulus. </desc>
</methodsynopsis>
<methodsynopsis function="bcmul">
  <type>string</type>
  <methodname>bcmul</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>right_operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Multiply the left_operand by the right_operand and returns the result.  The optional scale sets the number of digits after the decimal place in the result. </desc>
</methodsynopsis>
<methodsynopsis function="bcpow">
  <type>string</type>
  <methodname>bcpow</methodname>
  <methodparam>
    <type>string</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Raise x to the power y.  The optional scale can be used to set the number of digits after the decimal place in the result. </desc>
</methodsynopsis>
<methodsynopsis function="bcpowmod">
  <type>string</type>
  <methodname>bcpowmod</methodname>
  <methodparam>
    <type>string</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>modulus</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Use the fast-exponentiation method to raise x  to the power y with respect to the modulus modulus.  The optional scale can be used to set the number of digits after the decimal place in the result.  </desc>
</methodsynopsis>
<methodsynopsis function="bcscale">
  <type>bool</type>
  <methodname>bcscale</methodname>
  <methodparam>
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> This function sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="bcsqrt">
  <type>string</type>
  <methodname>bcsqrt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Return the square root of the operand. The optional scale parameter sets the number of digits after the decimal place in the result. </desc>
</methodsynopsis>
<methodsynopsis function="bcsub">
  <type>string</type>
  <methodname>bcsub</methodname>
  <methodparam>
    <type>string</type>
    <parameter>left_operand</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>right_operand</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Subtracts the right_operand from the left_operand and returns the result in a string.  The optional scale parameter is used to set the number of digits after the decimal place in the result. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_load_exe">
  <type>bool</type>
  <methodname>bcompiler_load_exe</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Reads data from a bcompiler exe file and creates classes from the bytecodes. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_load">
  <type>bool</type>
  <methodname>bcompiler_load</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Please use include or require statements to parse bytecodes, it's more portable and convenient way than using this function. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_parse_class">
  <type>bool</type>
  <methodname>bcompiler_parse_class</methodname>
  <methodparam>
    <type>string</type>
    <parameter>class</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>callback</parameter>
  </methodparam>
  <desc> This function has been removed from bcompiler and is no longer available as of bcompiler 0.5. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_read">
  <type>bool</type>
  <methodname>bcompiler_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <desc> Please use include or require statements to parse bytecodes, it's more portable and convenient way than using this function. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_class">
  <type>bool</type>
  <methodname>bcompiler_write_class</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>className</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extends</parameter>
  </methodparam>
  <desc> This reads the bytecodes from PHP for an existing class, and writes them to the open file handle, It does not perform dependency checking, so make sure you write the classes in an order that will not result in an  'undefined class' occurring when you load it. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_constant">
  <type>bool</type>
  <methodname>bcompiler_write_constant</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>constantName</parameter>
  </methodparam>
  <desc> This function reads the bytecodes from PHP for an existing constant, and writes them to the open file handle. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_exe_footer">
  <type>bool</type>
  <methodname>bcompiler_write_exe_footer</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>startpos</parameter>
  </methodparam>
  <desc> An EXE (or self executable) file consists of 3 parts,  </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_file">
  <type>bool</type>
  <methodname>bcompiler_write_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>&amp;#xD; This function complies specified source file into bytecodes, and writes &amp;#xD; them to the open file handle.&amp;#xD; </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_footer">
  <type>bool</type>
  <methodname>bcompiler_write_footer</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <desc> Writes the single character \x00 to indicate End of compiled data. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_function">
  <type>bool</type>
  <methodname>bcompiler_write_function</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>functionName</parameter>
  </methodparam>
  <desc> This reads the bytecodes from PHP for an existing function, and writes them to the open file handle. Order is not important, (eg. if function b uses function a, and you compile it like the example below, it will work perfectly OK). </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_functions_from_file">
  <type>bool</type>
  <methodname>bcompiler_write_functions_from_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fileName</parameter>
  </methodparam>
  <desc> This function searches for all functions declared in the given file, and writes their correspondent bytecodes to the open file handle. Always remember to include/require the file you intend to compile. </desc>
</methodsynopsis>
<methodsynopsis function="bcompiler_write_header">
  <type>bool</type>
  <methodname>bcompiler_write_header</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>filehandle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>write_ver</parameter>
  </methodparam>
  <desc> Writes the header part of a bcompiler file. Optional second parameter can be used to write bytecode in a previously used format, so that you can use it with older versions of bcompiler. </desc>
</methodsynopsis>
<methodsynopsis function="bzclose">
  <type>int</type>
  <methodname>bzclose</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <desc> Closes the given bzip2 file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="bzcompress">
  <type>string</type>
  <methodname>bzcompress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>blocksize</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>workfactor</parameter>
  </methodparam>
  <desc>bzcompress compresses the given string and returns it as bzip2 encoded data. </desc>
</methodsynopsis>
<methodsynopsis function="bzdecompress">
  <type>string</type>
  <methodname>bzdecompress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>small</parameter>
  </methodparam>
  <desc>bzdecompress decompresses the given string containing bzip2 encoded data. </desc>
</methodsynopsis>
<methodsynopsis function="bzerrno">
  <type>int</type>
  <methodname>bzerrno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <desc> Returns the error number of any bzip2 error returned by the given file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="bzerror">
  <type>array</type>
  <methodname>bzerror</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <desc> Returns the error number and error string of any bzip2 error returned by  the given file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="bzerrstr">
  <type>string</type>
  <methodname>bzerrstr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <desc> Gets the error string of any bzip2 error returned by the given file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="bzflush">
  <type>int</type>
  <methodname>bzflush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <desc> Forces a write of all buffered bzip2 data for the file pointer bz. </desc>
</methodsynopsis>
<methodsynopsis function="bzopen">
  <type>resource</type>
  <methodname>bzopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>bzopen opens a bzip2 (.bz2) file for reading or  writing. </desc>
</methodsynopsis>
<methodsynopsis function="bzread">
  <type>string</type>
  <methodname>bzread</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>bzread reads from the given bzip2 file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="bzwrite">
  <type>int</type>
  <methodname>bzwrite</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>bz</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>bzwrite writes a string into the given bzip2 file  stream. </desc>
</methodsynopsis>
<methodsynopsis function="cal_days_in_month">
  <type>int</type>
  <methodname>cal_days_in_month</methodname>
  <methodparam>
    <type>int</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> This function will return the number of days in the month of year for the specified calendar. </desc>
</methodsynopsis>
<methodsynopsis function="cal_from_jd">
  <type>array</type>
  <methodname>cal_from_jd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>jd</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>cal_from_jd converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH. </desc>
</methodsynopsis>
<methodsynopsis function="cal_info">
  <type>array</type>
  <methodname>cal_info</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>cal_info returns information on the specified calendar. </desc>
</methodsynopsis>
<methodsynopsis function="cal_to_jd">
  <type>int</type>
  <methodname>cal_to_jd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc>cal_to_jd calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH. </desc>
</methodsynopsis>
<methodsynopsis function="easter_date">
  <type>int</type>
  <methodname>easter_date</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Returns the Unix timestamp corresponding to midnight on Easter of the given year. </desc>
</methodsynopsis>
<methodsynopsis function="easter_days">
  <type>int</type>
  <methodname>easter_days</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>method</parameter>
  </methodparam>
  <desc> Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="frenchtojd">
  <type>int</type>
  <methodname>frenchtojd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Converts a date from the French Republican Calendar to a Julian Day Count. </desc>
</methodsynopsis>
<methodsynopsis function="gregoriantojd">
  <type>int</type>
  <methodname>gregoriantojd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.</desc>
</methodsynopsis>
<methodsynopsis function="jddayofweek">
  <type>mixed</type>
  <methodname>jddayofweek</methodname>
  <methodparam>
    <type>int</type>
    <parameter>julianday</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Returns the day of the week.  Can return a string or an integer depending on the mode. Calendar week modesModeMeaning0 (Default) Returns the day number as an int (0=Sunday, 1=Monday, etc) 1 Returns string containing the day of week (English-Gregorian) 2 Returns a string containing the abbreviated day of week (English-Gregorian) </desc>
</methodsynopsis>
<methodsynopsis function="jdmonthname">
  <type>string</type>
  <methodname>jdmonthname</methodname>
  <methodparam>
    <type>int</type>
    <parameter>julianday</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned. Calendar modesModeMeaningValues0Gregorian - abbreviatedJan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec1GregorianJanuary, February, March, April, May, June, July, August, September, October, November, December2Julian - abbreviatedJan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec3JulianJanuary, February, March, April, May, June, July, August, September, October, November, December4JewishTishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul5French RepublicanVendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra</desc>
</methodsynopsis>
<methodsynopsis function="jdtofrench">
  <type>string</type>
  <methodname>jdtofrench</methodname>
  <methodparam>
    <type>int</type>
    <parameter>juliandaycount</parameter>
  </methodparam>
  <desc> Converts a Julian Day Count to the French Republican Calendar. </desc>
</methodsynopsis>
<methodsynopsis function="jdtogregorian">
  <type>string</type>
  <methodname>jdtogregorian</methodname>
  <methodparam>
    <type>int</type>
    <parameter>julianday</parameter>
  </methodparam>
  <desc> Converts Julian Day Count to a string containing the Gregorian date in the format of "month/day/year". </desc>
</methodsynopsis>
<methodsynopsis function="jdtojewish">
  <type>string</type>
  <methodname>jdtojewish</methodname>
  <methodparam>
    <type>int</type>
    <parameter>juliandaycount</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>hebrew</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fl</parameter>
  </methodparam>
  <desc> Converts a Julian Day Count to the Jewish Calendar. </desc>
</methodsynopsis>
<methodsynopsis function="jdtojulian">
  <type>string</type>
  <methodname>jdtojulian</methodname>
  <methodparam>
    <type>int</type>
    <parameter>julianday</parameter>
  </methodparam>
  <desc> Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month/day/year". </desc>
</methodsynopsis>
<methodsynopsis function="jdtounix">
  <type>int</type>
  <methodname>jdtounix</methodname>
  <methodparam>
    <type>int</type>
    <parameter>jday</parameter>
  </methodparam>
  <desc> This function will return a Unix timestamp corresponding to the Julian Day given in jday or &amp;amp;false; if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 &amp;lt;= jday &amp;lt;= 2465342 ). The time returned is localtime (and not GMT). </desc>
</methodsynopsis>
<methodsynopsis function="jewishtojd">
  <type>int</type>
  <methodname>jewishtojd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful.  The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed. </desc>
</methodsynopsis>
<methodsynopsis function="juliantojd">
  <type>int</type>
  <methodname>juliantojd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Valid Range for Julian Calendar 4713 B.C. to 9999 A.D. </desc>
</methodsynopsis>
<methodsynopsis function="unixtojd">
  <type>int</type>
  <methodname>unixtojd</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given. </desc>
</methodsynopsis>
<methodsynopsis function="ccvs_add">
  <type>string</type>
  <methodname>ccvs_add</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>argtype</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>argval</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_auth">
  <type>string</type>
  <methodname>ccvs_auth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_command">
  <type>string</type>
  <methodname>ccvs_command</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>argval</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_count">
  <type>int</type>
  <methodname>ccvs_count</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_delete">
  <type>string</type>
  <methodname>ccvs_delete</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_done">
  <type>string</type>
  <methodname>ccvs_done</methodname>
  <methodparam>
    <type>string</type>
    <parameter>sess</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_init">
  <type>string</type>
  <methodname>ccvs_init</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_lookup">
  <type>string</type>
  <methodname>ccvs_lookup</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>inum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_new">
  <type>string</type>
  <methodname>ccvs_new</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_report">
  <type>string</type>
  <methodname>ccvs_report</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_return">
  <type>string</type>
  <methodname>ccvs_return</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_reverse">
  <type>string</type>
  <methodname>ccvs_reverse</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_sale">
  <type>string</type>
  <methodname>ccvs_sale</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_status">
  <type>string</type>
  <methodname>ccvs_status</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_textvalue">
  <type>string</type>
  <methodname>ccvs_textvalue</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ccvs_void">
  <type>string</type>
  <methodname>ccvs_void</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>invoice</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="classkit_import">
  <type>array</type>
  <methodname>classkit_import</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> filename The filename of the class method definitions to import </desc>
</methodsynopsis>
<methodsynopsis function="classkit_method_add">
  <type>bool</type>
  <methodname>classkit_method_add</methodname>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>methodname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> classname The class to which this method will be added methodname The name of the method to add args Comma-delimited list of arguments for the newly-created method code The code to be evaluated when methodname is called flags The type of method to create, can be CLASSKIT_ACC_PUBLIC, CLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE This parameter is only used as of PHP 5, because, prior to this, all methods were public. </desc>
</methodsynopsis>
<methodsynopsis function="classkit_method_copy">
  <type>bool</type>
  <methodname>classkit_method_copy</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dClass</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dMethod</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sClass</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>sMethod</parameter>
  </methodparam>
  <desc> dClass Destination class for copied method dMethod Destination method name sClass Source class of the method to copy sMethod Name of the method to copy from the source class. If this parameter is omitted, the value of dMethod is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="classkit_method_redefine">
  <type>bool</type>
  <methodname>classkit_method_redefine</methodname>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>methodname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> classname The class in which to redefine the method methodname The name of the method to redefine args Comma-delimited list of arguments for the redefined method code The new code to be evaluated when methodname is called flags The redefined method can be CLASSKIT_ACC_PUBLIC, CLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE This parameter is only used as of PHP 5, because, prior to this, all methods were public. </desc>
</methodsynopsis>
<methodsynopsis function="classkit_method_remove">
  <type>bool</type>
  <methodname>classkit_method_remove</methodname>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>methodname</parameter>
  </methodparam>
  <desc> classname The class in which to remove the method methodname The name of the method to remove </desc>
</methodsynopsis>
<methodsynopsis function="classkit_method_rename">
  <type>bool</type>
  <methodname>classkit_method_rename</methodname>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>methodname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newname</parameter>
  </methodparam>
  <desc> classname The class in which to rename the method methodname The name of the method to rename newname The new name to give to the renamed method </desc>
</methodsynopsis>
<methodsynopsis function="call_user_method_array">
  <type>mixed</type>
  <methodname>call_user_method_array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>method_name</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter role="reference">obj</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>paramarr</parameter>
  </methodparam>
  <desc> The call_user_method_array function is deprecated as of PHP 4.1.0, use the call_user_func_array variety  with the array(&amp;amp;$obj, "method_name") syntax instead. </desc>
</methodsynopsis>
<methodsynopsis function="call_user_method">
  <type>mixed</type>
  <methodname>call_user_method</methodname>
  <methodparam>
    <type>string</type>
    <parameter>method_name</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter role="reference">obj</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>parameter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> The call_user_method function is deprecated as of PHP 4.1.0, use the call_user_func variety  with the array(&amp;amp;$obj, "method_name") syntax instead. </desc>
</methodsynopsis>
<methodsynopsis function="class_exists">
  <type>bool</type>
  <methodname>class_exists</methodname>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>autoload</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the class given by class_name has been defined, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="get_class_methods">
  <type>array</type>
  <methodname>get_class_methods</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> This function returns an array of method names defined for the class specified by class_name. </desc>
</methodsynopsis>
<methodsynopsis function="get_class_vars">
  <type>array</type>
  <methodname>get_class_vars</methodname>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> This function will return an associative array of default public properties of the class.  The resulting array elements are in the form of varname =&amp;gt; value. </desc>
</methodsynopsis>
<methodsynopsis function="get_class">
  <type>string</type>
  <methodname>get_class</methodname>
  <methodparam>
    <type>object</type>
    <parameter>obj</parameter>
  </methodparam>
  <desc> This function returns the name of the class of which the object obj is an instance. Returns &amp;amp;false; if obj is not an object. </desc>
</methodsynopsis>
<methodsynopsis function="get_declared_classes">
  <type>array</type>
  <methodname>get_declared_classes</methodname>
  <void/>
  <desc> This function returns an array of the names of the declared classes in the current script. </desc>
</methodsynopsis>
<methodsynopsis function="get_declared_interfaces">
  <type>array</type>
  <methodname>get_declared_interfaces</methodname>
  <void/>
  <desc> This function returns an array of the names of the declared interfaces in the current script. </desc>
</methodsynopsis>
<methodsynopsis function="get_object_vars">
  <type>array</type>
  <methodname>get_object_vars</methodname>
  <methodparam>
    <type>object</type>
    <parameter>obj</parameter>
  </methodparam>
  <desc> This function returns an associative array of defined object properties  for the specified object obj. </desc>
</methodsynopsis>
<methodsynopsis function="get_parent_class">
  <type>string</type>
  <methodname>get_parent_class</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>obj</parameter>
  </methodparam>
  <desc> If obj is an object, returns the name of the parent class of the class of which obj is an instance. </desc>
</methodsynopsis>
<methodsynopsis function="interface_exists">
  <type>bool</type>
  <methodname>interface_exists</methodname>
  <methodparam>
    <type>string</type>
    <parameter>interface_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>autoload</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the interface given by interface_name has been defined, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="is_a">
  <type>bool</type>
  <methodname>is_a</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the object is of this class or  has this class as one of its parents, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="is_subclass_of">
  <type>bool</type>
  <methodname>is_subclass_of</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the object  object, belongs to a class which is a  subclass of class_name, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="method_exists">
  <type>bool</type>
  <methodname>method_exists</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>method_name</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the method given by method_name has been defined for the given object, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="property_exists">
  <type>bool</type>
  <methodname>property_exists</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>class</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>property</parameter>
  </methodparam>
  <desc> This function checks if the given property exists in the specified class (and if it was declared as public). </desc>
</methodsynopsis>
<methodsynopsis function="COM::COM">
  <type>com</type>
  <methodname>COM::COM</methodname>
  <methodparam>
    <type>string</type>
    <parameter>module_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>server_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>codepage</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>typelib</parameter>
  </methodparam>
  <desc> COM class constructor. The parameters have the following meanings: module_name Can be a ProgID, Class ID or Moniker that names the component to load. A ProgID is typically the application or DLL name, followed by a period, followed by the object name. e.g: Word.Application. A Class ID is the UUID that uniquely identifies a given class. A Moniker is a special form of naming, similar in concept to a URL scheme, that identifies a resource and specifies how it should be loaded.  As an example, you could load up Word and get an object representing a word document by specifying the full path to the word document as the module name, or you can use LDAP: as a moniker to use the ADSI interface to LDAP. server_name The name of the DCOM server on which the component should be loaded and run.  If &amp;amp;null;, the object is run using the default for the application.  The default is typically to run it on the local machine, although the administrator might have configured the application to launch on a different machine. If you specify a non-&amp;amp;null; value for server, PHP will refuse to load the object unless the  configuration option is set to &amp;amp;true;. If server_name is an array, it should contain the following elements (case sensitive!).  Note that they are all optional (although you need to specify both Username and Password together); if you omit the Server setting, the default server will be used (as mentioned above), and the instantiation of the object will not be affected by the  directive. DCOM server nameserver_name keytypedescriptionServerstringThe name of the server.UsernamestringThe username to connect as.PasswordstringThe password for Username.FlagsintegerOne or more of the following constants, logically OR'd together: CLSCTX_INPROC_SERVER, CLSCTX_INPROC_HANDLER, CLSCTX_LOCAL_SERVER, CLSCTX_REMOTE_SERVER, CLSCTX_SERVER and CLSCTX_ALL.  The default value if not specified here is CLSCTX_SERVER if you also omit Server, or CLSCTX_REMOTE_SERVER if you do specify a server.  You should consult the Microsoft documentation for CoCreateInstance for more information on the meaning of these constants; you will typically never have to use them. codepage Specifies the codepage that is used to convert strings to unicode-strings and vice versa.  The conversion is applied whenever a PHP string is passed as a parameter or returned from a method of this COM object.  The code page is sticky in PHP 5, which means that it will propagate to objects and variants returned from the object. Possible values are CP_ACP (use system default ANSI code page - the default if this parameter is omitted), CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP (use codepage/locale set for the current executing thread), CP_UTF7 and CP_UTF8.  You may also use the number for a given codepage; consult the Microsoft documentation for more details on codepages and their numeric values. </desc>
</methodsynopsis>
<methodsynopsis function="DOTNET::DOTNET">
  <type>string</type>
  <methodname>DOTNET::DOTNET</methodname>
  <methodparam>
    <type>string</type>
    <parameter>assembly_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>codepage</parameter>
  </methodparam>
  <desc> DOTNET class constructor.  assembly_name specifies which assembly should be loaded, and class_name specifices which class in that assembly to instantiate.  You may optionally specify a codepage to use for unicode string transformations; see the  class for more details on code pages. </desc>
</methodsynopsis>
<methodsynopsis function="VARIANT::VARIANT">
  <type>object</type>
  <methodname>VARIANT::VARIANT</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>codepage</parameter>
  </methodparam>
  <desc> VARIANT class constructor. Parameters: value initial value. if omitted, or set to &amp;amp;null; an VT_EMPTY object is created. type specifies the content type of the VARIANT object. Possible values are one of the VT_XXX. In PHP versions prior to PHP 5, you could force PHP to pass a variant object by reference by OR'ing VT_BYREF with the type.  In PHP 5, this hack is not supported; instead, PHP 5 can detect parameters passed by reference automatically; they do not even need to be passed as VARIANT objects. Consult the MSDN library for additional information on the VARIANT type. codepage specifies the codepage that is used to convert strings to unicode.  See the parameter of the same name in the  class for more information. </desc>
</methodsynopsis>
<methodsynopsis function="com_addref">
  <type>void</type>
  <methodname>com_addref</methodname>
  <void/>
  <desc> Increases the components reference counter. </desc>
</methodsynopsis>
<methodsynopsis function="com_create_guid">
  <type>string</type>
  <methodname>com_create_guid</methodname>
  <void/>
  <desc> Generates a Globally Unique Identifier (GUID) and returns it as a string. A GUID is generated in the same way as DCE UUID's, except that the Microsoft convention is to enclose a GUID in curly braces. </desc>
</methodsynopsis>
<methodsynopsis function="com_event_sink">
  <type>bool</type>
  <methodname>com_event_sink</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>comobject</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter>sinkobject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>sinkinterface</parameter>
  </methodparam>
  <desc> Instructs COM to sink events generated by comobject into the PHP object sinkobject.  PHP will attempt to use the default dispinterface type specified by the typelibrary associated with comobject, but you may override this choice by setting sinkinterface to the name of the dispinterface that you want to use. </desc>
</methodsynopsis>
<methodsynopsis function="com_get_active_object">
  <type>variant</type>
  <methodname>com_get_active_object</methodname>
  <methodparam>
    <type>string</type>
    <parameter>progid</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>code_page</parameter>
  </methodparam>
  <desc>com_get_active_object is similar to creating a new instance of a  object, except that it will only return an object to your script if the object is already running. OLE applications use something known as the Running Object Table to allow well-known applications to be launched only once; this function exposes the COM library function GetActiveObject() to get a handle on a running instance. </desc>
</methodsynopsis>
<methodsynopsis function="com_get">
  <type>mixed</type>
  <methodname>com_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>com_object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>property</parameter>
  </methodparam>
  <desc> Returns the value of the property of the COM component referenced by com_object. Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="com_invoke">
  <type>mixed</type>
  <methodname>com_invoke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>com_object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>function_parameters</parameter>
  </methodparam>
  <desc>com_invoke invokes the method  named function_name of the COM component referenced by com_object.  com_invoke returns &amp;amp;false; on error,  returns the function_name's return  value on success. All the extra parameters  function_parameters are passed to  the method function_name. </desc>
</methodsynopsis>
<methodsynopsis function="com_isenum">
  <type>bool</type>
  <methodname>com_isenum</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>com_module</parameter>
  </methodparam>
  <desc> Checks to see if a COM object can be enumerated using the  Next()  method hack.  Returns &amp;amp;true; if it can, &amp;amp;false; if it cannot. See  class for more details on these methods. </desc>
</methodsynopsis>
<methodsynopsis function="com_load_typelib">
  <type>bool</type>
  <methodname>com_load_typelib</methodname>
  <methodparam>
    <type>string</type>
    <parameter>typelib_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>case_insensitive</parameter>
  </methodparam>
  <desc> Loads a type-library and registers its constants in the engine, as though they were defined using define.  The case_insensitive behaves in the same way as the parameter with the same name in the define function. </desc>
</methodsynopsis>
<methodsynopsis function="com_load">
  <type>resource</type>
  <methodname>com_load</methodname>
  <methodparam>
    <type>string</type>
    <parameter>module_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
      server_name
      </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
      codepage
      </parameter>
  </methodparam>
  <desc> Equivalent to using the new operator to create an instance of the  class.  You should do that instead of calling this function. </desc>
</methodsynopsis>
<methodsynopsis function="com_message_pump">
  <type>bool</type>
  <methodname>com_message_pump</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeoutms</parameter>
  </methodparam>
  <desc> This function will sleep for up to timeoutms milliseconds, or until a message arrives in the queue.  If a message or messages arrives before the timeout, they will be dispatched, and the function will return &amp;amp;true;.  If the timeout occurs and no messages were processed, the return value will be &amp;amp;false;.  If you do not specify a value for timeoutms, then 0 will be assumed.  A 0 value means that no waiting will be performed; if there are messages pending they will be dispatched as before; if there are no messages pending, the function will return &amp;amp;false; immediately without sleeping. </desc>
</methodsynopsis>
<methodsynopsis function="com_print_typeinfo">
  <type>bool</type>
  <methodname>com_print_typeinfo</methodname>
  <methodparam>
    <type>object</type>
    <parameter>comobject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dispinterface</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>wantsink</parameter>
  </methodparam>
  <desc> The purpose of this function is to help generate a skeleton class for use as an event sink.  You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display. </desc>
</methodsynopsis>
<methodsynopsis function="com_release">
  <type>void</type>
  <methodname>com_release</methodname>
  <void/>
  <desc> Decreases the components reference counter. </desc>
</methodsynopsis>
<methodsynopsis function="com_set">
  <type>void</type>
  <methodname>com_set</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>com_object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>property</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets the value of the property of the COM component referenced by com_object. Returns the newly set value if succeeded, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="variant_abs">
  <type>mixed</type>
  <methodname>variant_abs</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> Returns the absolute value of val. </desc>
</methodsynopsis>
<methodsynopsis function="variant_add">
  <type>mixed</type>
  <methodname>variant_add</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Adds left to right using the following rules (taken from the MSDN library), which correspond to those of Visual Basic: Variant Addition RulesIfThenBoth expressions are of the string typeConcatenationOne expression is a string type and the other a characterAdditionOne expression is numeric and the other is a stringAdditionBoth expressions are numericAdditionEither expression is NULLNULL is returnedBoth expressions are emptyInteger subtype is returned</desc>
</methodsynopsis>
<methodsynopsis function="variant_and">
  <type>mixed</type>
  <methodname>variant_and</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Performs a bitwise AND operation, according to the following truth table; note that this is slightly different from a regular AND operation. Variant AND RulesIf left isIf right isthen the result is&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;false;&amp;amp;true;&amp;amp;null;&amp;amp;null;&amp;amp;false;&amp;amp;true;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;null;&amp;amp;false;&amp;amp;null;&amp;amp;true;&amp;amp;null;&amp;amp;null;&amp;amp;false;&amp;amp;false;&amp;amp;null;&amp;amp;null;&amp;amp;null;</desc>
</methodsynopsis>
<methodsynopsis function="variant_cast">
  <type>variant</type>
  <methodname>variant_cast</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>variant</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> This function makes a copy of variant and then performs a variant cast operation to force the copy to have the type given by type.  type should be one of the VT_XXX constants. </desc>
</methodsynopsis>
<methodsynopsis function="variant_cat">
  <type>mixed</type>
  <methodname>variant_cat</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Concatenates left with right and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="variant_cmp">
  <type>int</type>
  <methodname>variant_cmp</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>lcid</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> Compares left with right and returns one of the following values: Variant Comparision ResultsvaluemeaningVARCMP_LTleft is less than rightVARCMP_EQleft is equal to rightVARCMP_GTleft is greater than rightVARCMP_NULLEither left, right or both are &amp;amp;null; </desc>
</methodsynopsis>
<methodsynopsis function="variant_date_from_timestamp">
  <type>variant</type>
  <methodname>variant_date_from_timestamp</methodname>
  <methodparam>
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Converts timestamp from a unix timestamp value into a variant of type VT_DATE.  This allows easier interopability between the unix-ish parts of PHP and COM. </desc>
</methodsynopsis>
<methodsynopsis function="variant_date_to_timestamp">
  <type>int</type>
  <methodname>variant_date_to_timestamp</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> Converts variant from a VT_DATE (or similar) value into a unix timestamp.  This allows easier interopability between the unix-ish parts of PHP and COM. </desc>
</methodsynopsis>
<methodsynopsis function="variant_div">
  <type>mixed</type>
  <methodname>variant_div</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Divides left by right and returns the result, subject to the following rules: Variant Division RulesIfThenBoth expressions are of the string, date, character, boolean typeDouble is returnedOne expression is a string type and the other a characterDivision and a double is returnedOne expression is numeric and the other is a stringDivision and a double is returned.Both expressions are numericDivision and a double is returnedEither expression is NULLNULL is returnedright is empty and left is anything but emptyA com_exception with code DISP_E_DIVBYZERO is thrownleft is empty and right is anything but empty.0 as type double is returnedBoth expressions are emptyA com_exception with code DISP_E_OVERFLOW is thrown</desc>
</methodsynopsis>
<methodsynopsis function="variant_eqv">
  <type>mixed</type>
  <methodname>variant_eqv</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> If each bit in left is equal to the corresponding bit in right then &amp;amp;true; is returned, otherwise &amp;amp;false; is returned. </desc>
</methodsynopsis>
<methodsynopsis function="variant_fix">
  <type>mixed</type>
  <methodname>variant_fix</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> If variant is negative, then the first negative integer greater than or equal to the variant is returned, otherwise returns the integer portion of the value of variant. </desc>
</methodsynopsis>
<methodsynopsis function="variant_get_type">
  <type>int</type>
  <methodname>variant_get_type</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> This function returns an integer value that indicates the type of variant, which can be an instance of  , or classes.  The return value can be compared to one of the VT_XXX constants. </desc>
</methodsynopsis>
<methodsynopsis function="variant_idiv">
  <type>mixed</type>
  <methodname>variant_idiv</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Converts left and right to integer values, and then performs integer division according the following rules: Variant Integer Division RulesIfThenBoth expressions are of the string, date, character, boolean typeDivision and integer is returnedOne expression is a string type and the other a characterDivisionOne expression is numeric and the other is a stringDivisionBoth expressions are numericDivisionEither expression is NULLNULL is returnedBoth expressions are emptyA com_exception with code DISP_E_DIVBYZERO is thrown</desc>
</methodsynopsis>
<methodsynopsis function="variant_imp">
  <type>mixed</type>
  <methodname>variant_imp</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Performs a bitwise implication operation, according to the following truth table: Variant Implication TableIf left isIf right isthen the result is&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;true;&amp;amp;null;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;false;&amp;amp;true;&amp;amp;false;&amp;amp;null;&amp;amp;true;&amp;amp;null;&amp;amp;true;&amp;amp;true;&amp;amp;null;&amp;amp;false;&amp;amp;null;&amp;amp;null;&amp;amp;null;&amp;amp;null;</desc>
</methodsynopsis>
<methodsynopsis function="variant_int">
  <type>mixed</type>
  <methodname>variant_int</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> If variant is negative, then the first negative integer greater than or equal to the variant is returned, otherwise returns the integer portion of the value of variant. </desc>
</methodsynopsis>
<methodsynopsis function="variant_mod">
  <type>mixed</type>
  <methodname>variant_mod</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Divides left by right and returns the remainder. </desc>
</methodsynopsis>
<methodsynopsis function="variant_mul">
  <type>mixed</type>
  <methodname>variant_mul</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Multiplies left by right and returns the result, subject to the following rules: Variant Multiplication RulesIfThenBoth expressions are of the string, date, character, boolean typeMultiplicationOne expression is a string type and the other a characterMultiplicationOne expression is numeric and the other is a stringMultiplicationBoth expressions are numericMultiplicationEither expression is NULLNULL is returnedBoth expressions are emptyEmpty string is returned</desc>
</methodsynopsis>
<methodsynopsis function="variant_neg">
  <type>mixed</type>
  <methodname>variant_neg</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> Performs logical negation of variant and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="variant_not">
  <type>mixed</type>
  <methodname>variant_not</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variant</parameter>
  </methodparam>
  <desc> Performs bitwise not negation on variant and returns the result.  If variant is &amp;amp;null;, the result will also be &amp;amp;null;. </desc>
</methodsynopsis>
<methodsynopsis function="variant_or">
  <type>mixed</type>
  <methodname>variant_or</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Performs a bitwise OR operation, according to the following truth table; note that this is slightly different from a regular OR operation. Variant OR RulesIf left isIf right isthen the result is&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;true;&amp;amp;null;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;null;&amp;amp;null;&amp;amp;null;&amp;amp;true;&amp;amp;true;&amp;amp;null;&amp;amp;false;&amp;amp;null;&amp;amp;null;&amp;amp;null;&amp;amp;null;</desc>
</methodsynopsis>
<methodsynopsis function="variant_pow">
  <type>mixed</type>
  <methodname>variant_pow</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Returns the result of left to the power of right. </desc>
</methodsynopsis>
<methodsynopsis function="variant_round">
  <type>mixed</type>
  <methodname>variant_round</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variant</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>decimals</parameter>
  </methodparam>
  <desc> Returns the value of variant rounded to decimals decimal places. </desc>
</methodsynopsis>
<methodsynopsis function="variant_set_type">
  <type>void</type>
  <methodname>variant_set_type</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>variant</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> This function is similar to variant_cast except that the variant is modified "in-place"; no new variant is created. The parameters for this function have identical meaning to those of variant_cast. </desc>
</methodsynopsis>
<methodsynopsis function="variant_set">
  <type>void</type>
  <methodname>variant_set</methodname>
  <methodparam>
    <type>variant</type>
    <parameter>variant</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Converts value to a variant and assigns it to the variant object; no new variant object is created, and the old value of variant is freed/released. </desc>
</methodsynopsis>
<methodsynopsis function="variant_sub">
  <type>mixed</type>
  <methodname>variant_sub</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Subtracts right from left using the following rules: Variant Subtraction RulesIfThenBoth expressions are of the string typeSubtractionOne expression is a string type and the other a characterSubtractionOne expression is numeric and the other is a stringSubtraction.Both expressions are numericSubtractionEither expression is NULLNULL is returnedBoth expressions are emptyEmpty string is returned</desc>
</methodsynopsis>
<methodsynopsis function="variant_xor">
  <type>mixed</type>
  <methodname>variant_xor</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>right</parameter>
  </methodparam>
  <desc> Performs a logical exclusion, according to the following truth table: Variant XOR RulesIf left isIf right isthen the result is&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;false;&amp;amp;true;&amp;amp;true;&amp;amp;false;&amp;amp;false;&amp;amp;false;&amp;amp;null;&amp;amp;null;&amp;amp;null;</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_add_annotation">
  <type>bool</type>
  <methodname>cpdf_add_annotation</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>llx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lly</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>urx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ury</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>title</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_add_annotation adds a note with the lower left corner at (llx, lly) and the upper right corner at (urx, ury). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_add_outline">
  <type>int</type>
  <methodname>cpdf_add_outline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lastoutline</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sublevel</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>open</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pagenr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> The cpdf_add_outline function adds a bookmark with text text that points to the current page. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_arc">
  <type>bool</type>
  <methodname>cpdf_arc</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>radius</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>end</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_arc function draws an arc with center at point  (x_coor, y_coor) and radius radius, starting at angle start and ending at angle end. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_begin_text">
  <type>bool</type>
  <methodname>cpdf_begin_text</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_begin_text function starts a text section. &amp;amp;return.success; The created text section must be ended with  cpdf_end_text. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_circle">
  <type>bool</type>
  <methodname>cpdf_circle</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>radius</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_circle function draws a circle with center at point  (x_coor, y_coor) and radius radius. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_clip">
  <type>bool</type>
  <methodname>cpdf_clip</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_clip function clips all drawing to the current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_close">
  <type>bool</type>
  <methodname>cpdf_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_close function closes the pdf document. &amp;amp;return.success; This should be the last function even after cpdf_finalize, cpdf_output_buffer and cpdf_save_to_file. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_closepath_fill_stroke">
  <type>bool</type>
  <methodname>cpdf_closepath_fill_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_closepath_fill_stroke function closes, fills the interior of the current path with the current fill color and draws current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_closepath_stroke">
  <type>bool</type>
  <methodname>cpdf_closepath_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_closepath_stroke function is a combination of cpdf_closepath and cpdf_stroke. Then clears the path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_closepath">
  <type>bool</type>
  <methodname>cpdf_closepath</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_closepath function closes the current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_continue_text">
  <type>bool</type>
  <methodname>cpdf_continue_text</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> The cpdf_continue_text function outputs the string in text in the next line. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_curveto">
  <type>bool</type>
  <methodname>cpdf_curveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x3</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y3</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_curveto function draws a Bezier curve from the current point to the point (x3, y3) using (x1, y1) and (x2, y2) as control points. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_end_text">
  <type>bool</type>
  <methodname>cpdf_end_text</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_end_text function ends a text section which was started with cpdf_begin_text. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_fill_stroke">
  <type>bool</type>
  <methodname>cpdf_fill_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_fill_stroke function fills the interior of the current path with the current fill color and draws current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_fill">
  <type>bool</type>
  <methodname>cpdf_fill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_fill function fills the interior of the current path with the current fill color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_finalize_page">
  <type>bool</type>
  <methodname>cpdf_finalize_page</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page_number</parameter>
  </methodparam>
  <desc> The cpdf_finalize_page function ends the page with page number page_number. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_finalize">
  <type>bool</type>
  <methodname>cpdf_finalize</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_finalize function ends the document. You still have to call cpdf_close. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_global_set_document_limits">
  <type>bool</type>
  <methodname>cpdf_global_set_document_limits</methodname>
  <methodparam>
    <type>int</type>
    <parameter>maxpages</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>maxfonts</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>maximages</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>maxannotations</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>maxobjects</parameter>
  </methodparam>
  <desc> The cpdf_global_set_document_limits function sets several document limits. This function has to be called before cpdf_open to take effect. It sets the limits for any document open afterwards. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_import_jpeg">
  <type>int</type>
  <methodname>cpdf_import_jpeg</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file_name</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_scale</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_scale</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>gsave</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_import_jpeg function opens an image stored in the file with the name file_name. The format of the image has to be jpeg. The image is placed on the current page at position (x_coor, y_coor). The image is rotated by angle degrees. gsave should be non-zero to allow this function to operate correctly. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_lineto">
  <type>bool</type>
  <methodname>cpdf_lineto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_lineto function draws a line from the current point to the point with coordinates (x_coor, y_coor). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_moveto">
  <type>bool</type>
  <methodname>cpdf_moveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_moveto function set the current point to the coordinates x_coor and y_coor. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_newpath">
  <type>bool</type>
  <methodname>cpdf_newpath</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_newpath starts a new path on the document given by the pdf_document parameter. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_open">
  <type>int</type>
  <methodname>cpdf_open</methodname>
  <methodparam>
    <type>int</type>
    <parameter>compression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>doc_limits</parameter>
  </methodparam>
  <desc> The cpdf_open function opens a new pdf document. The first parameter turns document compression on if it is unequal to 0. The second optional parameter sets the file in which the document is written. If it is omitted the document is created in memory and can either be written into a file with the cpdf_save_to_file or written to standard output with cpdf_output_buffer. The return value will be needed in further versions of ClibPDF as the first parameter in all other functions which are writing to the pdf document. The ClibPDF library takes the filename "-" as a synonym for stdout. If PHP is compiled as an apache module this will not work because the way ClibPDF outputs to stdout does not work with apache. You can solve this problem by skipping the filename and using cpdf_output_buffer to output the pdf document. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_output_buffer">
  <type>bool</type>
  <methodname>cpdf_output_buffer</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_output_buffer function outputs the pdf document to stdout. The document has to be created in memory which is the case if cpdf_open has been called with no filename parameter. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_page_init">
  <type>bool</type>
  <methodname>cpdf_page_init</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page_number</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>orientation</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>unit</parameter>
  </methodparam>
  <desc> The cpdf_page_init function starts a new page with height height and width width. &amp;amp;return.success;  The page has number page_number and orientation orientation. orientation can be 0 for portrait and 1 for landscape. The last optional parameter unit sets the unit for the coordinate system. The value should be the number of postscript points per unit. Since one inch is equal to 72 points, a value of 72 would set the unit to one inch. The default is also 72. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_place_inline_image">
  <type>bool</type>
  <methodname>cpdf_place_inline_image</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>gsave</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_place_inline_image function places an image created with the PHP image functions on the page at position (x_coor, y_coor). The image can be scaled at the same time. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_rect">
  <type>bool</type>
  <methodname>cpdf_rect</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_rect function draws a rectangle with its lower left corner at point  (x_coor, y_coor). This width is set to width. This height is set to height. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_restore">
  <type>bool</type>
  <methodname>cpdf_restore</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_restore function restores the environment saved with cpdf_save. It works like the postscript command grestore. Very useful if you want to translate or rotate an object without effecting other objects. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_rlineto">
  <type>bool</type>
  <methodname>cpdf_rlineto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_rlineto function draws a line from the current point to the relative point with coordinates (x_coor, y_coor). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_rmoveto">
  <type>bool</type>
  <methodname>cpdf_rmoveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_rmoveto function set the current point relative to the coordinates x_coor and y_coor. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_rotate_text">
  <type>bool</type>
  <methodname>cpdf_rotate_text</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_rotate">
  <type>bool</type>
  <methodname>cpdf_rotate</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <desc> The cpdf_rotate function set the rotation in degrees to angle. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_save_to_file">
  <type>bool</type>
  <methodname>cpdf_save_to_file</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The cpdf_save_to_file function outputs the pdf document into a file if it has been created in memory. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_save">
  <type>bool</type>
  <methodname>cpdf_save</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_save function saves the current environment. It works like the postscript command gsave. Very useful if you want to translate or rotate an object without effecting other objects. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_scale">
  <type>bool</type>
  <methodname>cpdf_scale</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_scale</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_scale</parameter>
  </methodparam>
  <desc> The cpdf_scale function set the scaling factor in both directions. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_action_url">
  <type>bool</type>
  <methodname>cpdf_set_action_url</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xll</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>yll</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xur</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xur</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_char_spacing">
  <type>bool</type>
  <methodname>cpdf_set_char_spacing</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>space</parameter>
  </methodparam>
  <desc> The cpdf_set_char_spacing function sets the spacing between characters. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_creator">
  <type>bool</type>
  <methodname>cpdf_set_creator</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>creator</parameter>
  </methodparam>
  <desc> The cpdf_set_creator function sets the creator of a pdf document. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_current_page">
  <type>bool</type>
  <methodname>cpdf_set_current_page</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page_number</parameter>
  </methodparam>
  <desc> The cpdf_set_current_page function set the page on which all operations are performed. One can switch between pages until a page is finished with cpdf_finalize_page. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_font_directories">
  <type>bool</type>
  <methodname>cpdf_set_font_directories</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pfmdir</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pfbdir</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_font_map_file">
  <type>bool</type>
  <methodname>cpdf_set_font_map_file</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_font">
  <type>bool</type>
  <methodname>cpdf_set_font</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>font_name</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> The cpdf_set_font function sets the current font face, font size and encoding. Currently only the standard postscript fonts are supported. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_horiz_scaling">
  <type>bool</type>
  <methodname>cpdf_set_horiz_scaling</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> The cpdf_set_horiz_scaling function sets the horizontal scaling to scale percent. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_keywords">
  <type>bool</type>
  <methodname>cpdf_set_keywords</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>keywords</parameter>
  </methodparam>
  <desc> The cpdf_set_keywords function sets the keywords of a pdf document. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_leading">
  <type>bool</type>
  <methodname>cpdf_set_leading</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>distance</parameter>
  </methodparam>
  <desc> The cpdf_set_leading function sets the  distance between text lines. This will  be used if text is output by cpdf_continue_text. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_page_animation">
  <type>bool</type>
  <methodname>cpdf_set_page_animation</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>transition</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>duration</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>direction</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>orientation</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>inout</parameter>
  </methodparam>
  <desc> The cpdf_set_page_animation function set the transition between following pages. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_subject">
  <type>bool</type>
  <methodname>cpdf_set_subject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <desc> The cpdf_set_subject function sets the subject of a pdf document. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_text_matrix">
  <type>bool</type>
  <methodname>cpdf_set_text_matrix</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>matrix</parameter>
  </methodparam>
  <desc> The cpdf_set_text_matrix function sets a matrix which describes a transformation  applied on the current text font. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_text_pos">
  <type>bool</type>
  <methodname>cpdf_set_text_pos</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_set_text_pos function sets the position of text for the next cpdf_show  function call. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_text_rendering">
  <type>bool</type>
  <methodname>cpdf_set_text_rendering</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rendermode</parameter>
  </methodparam>
  <desc> The cpdf_set_text_rendering function determines how text is rendered. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_text_rise">
  <type>bool</type>
  <methodname>cpdf_set_text_rise</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_set_text_rise function sets the text rising to value units. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_title">
  <type>bool</type>
  <methodname>cpdf_set_title</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>title</parameter>
  </methodparam>
  <desc> The cpdf_set_title function sets the title of a pdf document. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_viewer_preferences">
  <type>bool</type>
  <methodname>cpdf_set_viewer_preferences</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>preferences</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cpdf_set_word_spacing">
  <type>bool</type>
  <methodname>cpdf_set_word_spacing</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>space</parameter>
  </methodparam>
  <desc> The cpdf_set_word_spacing function sets the spacing between words. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setdash">
  <type>bool</type>
  <methodname>cpdf_setdash</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>white</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>black</parameter>
  </methodparam>
  <desc> The cpdf_setdash function set the dash pattern white white units and black black units. If both are 0 a solid line is set. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setflat">
  <type>bool</type>
  <methodname>cpdf_setflat</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_setflat function set the flatness to a value between 0 and 100. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setgray_fill">
  <type>bool</type>
  <methodname>cpdf_setgray_fill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_setgray_fill function sets the current gray value to fill a path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setgray_stroke">
  <type>bool</type>
  <methodname>cpdf_setgray_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>gray_value</parameter>
  </methodparam>
  <desc> The cpdf_setgray_stroke function sets the current drawing color to the given gray value. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setgray">
  <type>bool</type>
  <methodname>cpdf_setgray</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>gray_value</parameter>
  </methodparam>
  <desc> The cpdf_setgray function sets the current drawing and filling color to the given gray value. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setlinecap">
  <type>bool</type>
  <methodname>cpdf_setlinecap</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_setlinecap function set the linecap parameter between a value of 0 and 2.  0 = butt end, 1 = round, 2 = projecting square. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setlinejoin">
  <type>bool</type>
  <methodname>cpdf_setlinejoin</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_setlinejoin function set the linejoin parameter between a value of 0 and 2. 0 = miter, 1 = round, 2 = bevel. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setlinewidth">
  <type>bool</type>
  <methodname>cpdf_setlinewidth</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> The cpdf_setlinewidth function set the line width to width. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setmiterlimit">
  <type>bool</type>
  <methodname>cpdf_setmiterlimit</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The cpdf_setmiterlimit function set the miter limit to a value greater or equal than 1. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setrgbcolor_fill">
  <type>bool</type>
  <methodname>cpdf_setrgbcolor_fill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> The cpdf_setrgbcolor_fill function sets the current rgb color value to fill a path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setrgbcolor_stroke">
  <type>bool</type>
  <methodname>cpdf_setrgbcolor_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> The cpdf_setrgbcolor_stroke function sets the current drawing color to the given rgb color value. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_setrgbcolor">
  <type>bool</type>
  <methodname>cpdf_setrgbcolor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> The cpdf_setrgbcolor function sets the current drawing and filling color to the given rgb color value. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_show_xy">
  <type>bool</type>
  <methodname>cpdf_show_xy</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The cpdf_show_xy function outputs the string text at position with coordinates (x_coor, y_coor). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_show">
  <type>bool</type>
  <methodname>cpdf_show</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> The cpdf_show function outputs the string in text at the current position. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_stringwidth">
  <type>float</type>
  <methodname>cpdf_stringwidth</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> The cpdf_stringwidth function returns the width of the string in text. It requires a font to be set before. </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_stroke">
  <type>bool</type>
  <methodname>cpdf_stroke</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <desc> The cpdf_stroke function draws a line along current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_text">
  <type>bool</type>
  <methodname>cpdf_text</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>orientation</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>alignmode</parameter>
  </methodparam>
  <desc> The cpdf_text function outputs the string text at position with coordinates (x_coor, y_coor). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="cpdf_translate">
  <type>bool</type>
  <methodname>cpdf_translate</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_coor</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_coor</parameter>
  </methodparam>
  <desc> The cpdf_translate function set the origin of coordinate system to the point (x_coor, y_coor). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="crack_check">
  <type>bool</type>
  <methodname>crack_check</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dictionary</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Performs an obscure check with the given password on the specified dictionary. </desc>
</methodsynopsis>
<methodsynopsis function="crack_closedict">
  <type>bool</type>
  <methodname>crack_closedict</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>dictionary</parameter>
  </methodparam>
  <desc>crack_closedict closes the specified dictionary identifier. </desc>
</methodsynopsis>
<methodsynopsis function="crack_getlastmessage">
  <type>string</type>
  <methodname>crack_getlastmessage</methodname>
  <void/>
  <desc>crack_getlastmessage returns the message from the last obscure check. </desc>
</methodsynopsis>
<methodsynopsis function="crack_opendict">
  <type>resource</type>
  <methodname>crack_opendict</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dictionary</parameter>
  </methodparam>
  <desc>crack_opendict opens the specified CrackLib  dictionary for use with crack_check. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_alnum">
  <type>bool</type>
  <methodname>ctype_alnum</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are alphanumeric. In the standard C locale letters are just [A-Za-z] and the function is equivalent to preg_match('/^[a-z0-9]*$/i', $text). </desc>
</methodsynopsis>
<methodsynopsis function="ctype_alpha">
  <type>bool</type>
  <methodname>ctype_alpha</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just  [A-Za-z] and ctype_alpha is  equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that  are considered neither upper nor lower case. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_cntrl">
  <type>bool</type>
  <methodname>ctype_cntrl</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, esc. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_digit">
  <type>bool</type>
  <methodname>ctype_digit</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are numerical. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_graph">
  <type>bool</type>
  <methodname>ctype_graph</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, creates visible output. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_lower">
  <type>bool</type>
  <methodname>ctype_lower</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are lowercase letters. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_print">
  <type>bool</type>
  <methodname>ctype_print</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are printable. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_punct">
  <type>bool</type>
  <methodname>ctype_punct</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are punctuation character. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_space">
  <type>bool</type>
  <methodname>ctype_space</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, creates whitespace. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_upper">
  <type>bool</type>
  <methodname>ctype_upper</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are uppercase characters. </desc>
</methodsynopsis>
<methodsynopsis function="ctype_xdigit">
  <type>bool</type>
  <methodname>ctype_xdigit</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Checks if all of the characters in the provided string, text, are hexadecimal 'digits'. </desc>
</methodsynopsis>
<methodsynopsis function="curl_close">
  <type>void</type>
  <methodname>curl_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc> This function closes a CURL session and frees all resources. The CURL handle, ch, is also deleted. </desc>
</methodsynopsis>
<methodsynopsis function="curl_copy_handle">
  <type>resource</type>
  <methodname>curl_copy_handle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_errno">
  <type>int</type>
  <methodname>curl_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc> Returns the error number for the last cURL operation on the resource ch, or 0 (zero) if no error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="curl_error">
  <type>string</type>
  <methodname>curl_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc> Returns a clear text error message for the last cURL operation on the resource ch, or  '' (the empty string) if no error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="curl_exec">
  <type>mixed</type>
  <methodname>curl_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc> This function should be called after you initialize a CURL session and all the options for the session are set.  Its purpose is simply to execute the predefined CURL session (given by the ch). Initializing a new CURL session and fetching a webpage ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="curl_getinfo">
  <type>string</type>
  <methodname>curl_getinfo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>opt</parameter>
  </methodparam>
  <desc> Returns information about the last transfer, opt may be one of the following: "CURLINFO_EFFECTIVE_URL" - Last effective URL "CURLINFO_HTTP_CODE" - Last received HTTP code "CURLINFO_FILETIME" - Remote time of the retrieved document, if -1 is returned the time of the document is unknown "CURLINFO_TOTAL_TIME" - Total transaction time in seconds for last transfer "CURLINFO_NAMELOOKUP_TIME" - Time in seconds until name resolving was complete "CURLINFO_CONNECT_TIME" - Time in seconds it took to establish the connection "CURLINFO_PRETRANSFER_TIME" - Time in seconds from start until just before file transfer begins "CURLINFO_STARTTRANSFER_TIME" - Time in seconds until the first byte is about to be transferred "CURLINFO_REDIRECT_TIME" - Time in seconds of all redirection steps before final transaction was started "CURLINFO_SIZE_UPLOAD" - Total number of bytes uploaded "CURLINFO_SIZE_DOWNLOAD" - Total number of bytes downloaded "CURLINFO_SPEED_DOWNLOAD" - Average download speed "CURLINFO_SPEED_UPLOAD" - Average upload speed "CURLINFO_HEADER_SIZE" - Total size of all headers received "CURLINFO_REQUEST_SIZE" - Total size of issued requests, currently only for HTTP requests "CURLINFO_SSL_VERIFYRESULT" - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER "CURLINFO_CONTENT_LENGTH_DOWNLOAD" - content-length of download, read from Content-Length: field "CURLINFO_CONTENT_LENGTH_UPLOAD" - Specified size of upload "CURLINFO_CONTENT_TYPE" - Content-type of downloaded object, NULL indicates server did not send valid Content-Type: header </desc>
</methodsynopsis>
<methodsynopsis function="curl_init">
  <type>resource</type>
  <methodname>curl_init</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <desc> The curl_init will initialize a new session and return a CURL handle for use with the curl_setopt, curl_exec, and curl_close functions.  If the optional url parameter is supplied then the CURLOPT_URL option will be set to the value of the parameter. You can manually set this using the curl_setopt function. Initializing a new CURL session and fetching a webpage ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="curl_multi_add_handle">
  <type>int</type>
  <methodname>curl_multi_add_handle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_close">
  <type>void</type>
  <methodname>curl_multi_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_exec">
  <type>int</type>
  <methodname>curl_multi_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">still_running</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_getcontent">
  <type>string</type>
  <methodname>curl_multi_getcontent</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_info_read">
  <type>array</type>
  <methodname>curl_multi_info_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_init">
  <type>resource</type>
  <methodname>curl_multi_init</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="curl_multi_remove_handle">
  <type>int</type>
  <methodname>curl_multi_remove_handle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_multi_select">
  <type>int</type>
  <methodname>curl_multi_select</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>mh</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>timeout</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="curl_setopt">
  <type>bool</type>
  <methodname>curl_setopt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ch</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Set an option for a CURL session identified by the ch parameter. option specifies which option to set, and value specifies the value for the option given. </desc>
</methodsynopsis>
<methodsynopsis function="curl_version">
  <type>string</type>
  <methodname>curl_version</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> The curl_version function returns a string containing the current CURL version. </desc>
</methodsynopsis>
<methodsynopsis function="cybercash_base64_decode">
  <type>string</type>
  <methodname>cybercash_base64_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>inbuff</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="cybercash_base64_encode">
  <type>string</type>
  <methodname>cybercash_base64_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>inbuff</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="cybercash_decr">
  <type>array</type>
  <methodname>cybercash_decr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>wmk</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sk</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>inbuff</parameter>
  </methodparam>
  <desc> The function returns an associative array with the elements "errcode" and, if "errcode" is &amp;amp;false;, "outbuff" (string), "outLth" (long) and "macbuff" (string). </desc>
</methodsynopsis>
<methodsynopsis function="cybercash_encr">
  <type>array</type>
  <methodname>cybercash_encr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>wmk</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sk</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>inbuff</parameter>
  </methodparam>
  <desc> The function returns an associative array with the elements "errcode" and, if "errcode" is &amp;amp;false;, "outbuff" (string), "outLth" (long) and "macbuff" (string). </desc>
</methodsynopsis>
<methodsynopsis function="cyrus_authenticate">
  <type>bool</type>
  <methodname>cyrus_authenticate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>mechlist</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>service</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>minssf</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxssf</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>authname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cyrus_bind">
  <type>bool</type>
  <methodname>cyrus_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>callbacks</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cyrus_close">
  <type>bool</type>
  <methodname>cyrus_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cyrus_connect">
  <type>resource</type>
  <methodname>cyrus_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cyrus_query">
  <type>bool</type>
  <methodname>cyrus_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="cyrus_unbind">
  <type>bool</type>
  <methodname>cyrus_unbind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trigger_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="checkdate">
  <type>bool</type>
  <methodname>checkdate</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the date given is valid; otherwise returns &amp;amp;false;. Checks the validity of the date formed by the arguments. A date is considered valid if: year is between 1 and 32767 inclusive month is between 1 and 12 inclusive Day is within the allowed number of days for the given month.  Leap years are taken into consideration. </desc>
</methodsynopsis>
<methodsynopsis function="date_sunrise">
  <type>mixed</type>
  <methodname>date_sunrise</methodname>
  <methodparam>
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>latitude</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>longitude</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>zenith</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>gmt_offset</parameter>
  </methodparam>
  <desc>date_sunrise returns the sunrise time for a given day (specified as a timestamp) and location. The latitude, longitude and zenith parameters default to the date.default_latitude, date.default_longitude and date.sunrise_zenith configuration options, respectively. </desc>
</methodsynopsis>
<methodsynopsis function="date_sunset">
  <type>mixed</type>
  <methodname>date_sunset</methodname>
  <methodparam>
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>latitude</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>longitude</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>zenith</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>gmt_offset</parameter>
  </methodparam>
  <desc>date_sunset returns the sunset time for a given day (specified as a timestamp) and location. The latitude, longitude and zenith parameters default to the date.default_latitude, date.default_longitude and date.sunset_zenith configuration options, respectively. </desc>
</methodsynopsis>
<methodsynopsis function="date">
  <type>string</type>
  <methodname>date</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        timestamp
       </parameter>
  </methodparam>
  <desc> Returns a string formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given.  In other words, timestamp is optional and defaults to the value of time. The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer). On Windows this range is limited from 01-01-1970 to 19-01-2038. To generate a timestamp from a string representation of the date, you may be able to use strtotime. Additionally, some databases have functions to convert their date formats into timestamps (such as MySQL's UNIX_TIMESTAMP  function). </desc>
</methodsynopsis>
<methodsynopsis function="getdate">
  <type>array</type>
  <methodname>getdate</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given, as the following associative array elements: </desc>
</methodsynopsis>
<methodsynopsis function="gettimeofday">
  <type>mixed</type>
  <methodname>gettimeofday</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return_float</parameter>
  </methodparam>
  <desc> This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call. </desc>
</methodsynopsis>
<methodsynopsis function="gmdate">
  <type>string</type>
  <methodname>gmdate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Identical to the date function except that the time returned is Greenwich Mean Time (GMT). For example, when run in Finland (GMT +0200), the first line below prints "Jan 01 1998 00:00:00", while the second prints "Dec 31 1997 22:00:00". gmdate example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="gmmktime">
  <type>int</type>
  <methodname>gmmktime</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>hour</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>minute</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>second</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>is_dst</parameter>
  </methodparam>
  <desc> Identical to mktime except the passed parameters represents a GMT date. </desc>
</methodsynopsis>
<methodsynopsis function="gmstrftime">
  <type>string</type>
  <methodname>gmstrftime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Behaves the same as strftime except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00". gmstrftime example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="idate">
  <type>int</type>
  <methodname>idate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <desc> Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time. </desc>
</methodsynopsis>
<methodsynopsis function="localtime">
  <type>array</type>
  <methodname>localtime</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        timestamp
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>
        is_associative
       </parameter>
  </methodparam>
  <desc> The localtime function returns an array identical to that of the structure returned by the C function call.  The first argument to localtime is the timestamp, if this is not given the current time as returned from time is used. The second argument to the localtime is the is_associative, if this is set to 0 or not supplied than the array is returned as a regular, numerically indexed array.  If the argument is set to 1 then localtime is an associative array containing all the different elements of the structure returned by the C function call to localtime.  The names of the different keys of the associative array are as follows: "tm_sec" - seconds "tm_min" - minutes "tm_hour" - hour "tm_mday" - day of the month "tm_mon" - month of the year, starting with 0 for January "tm_year" - Years since 1900 "tm_wday" - Day of the week "tm_yday" - Day of the year "tm_isdst" - Is daylight savings time in effect </desc>
</methodsynopsis>
<methodsynopsis function="microtime">
  <type>mixed</type>
  <methodname>microtime</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>get_as_float</parameter>
  </methodparam>
  <desc>microtime returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call. </desc>
</methodsynopsis>
<methodsynopsis function="mktime">
  <type>int</type>
  <methodname>mktime</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>hour</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>minute</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>second</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>is_dst</parameter>
  </methodparam>
  <desc>Warning: Note the strange order of arguments, which differs from the order of arguments in a regular Unix mktime() call and which does not lend itself well to leaving out parameters from right to left (see below). It is a common error to mix these values up in a script. </desc>
</methodsynopsis>
<methodsynopsis function="strftime">
  <type>string</type>
  <methodname>strftime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        timestamp
       </parameter>
  </methodparam>
  <desc> Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given.  Month and weekday names and other language dependent strings respect the current locale set with setlocale. </desc>
</methodsynopsis>
<methodsynopsis function="strptime">
  <type>array</type>
  <methodname>strptime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>timestamp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <desc>strptime returns an array with the timestamp parsed, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="strtotime">
  <type>int</type>
  <methodname>strtotime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>time</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>now</parameter>
  </methodparam>
  <desc> In PHP 5 up to 5.0.2, "now" and other relative times are wrongly computed from today's midnight. It differs from other versions where it is correctly computed from current time. </desc>
</methodsynopsis>
<methodsynopsis function="time">
  <type>int</type>
  <methodname>time</methodname>
  <void/>
  <desc> Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </desc>
</methodsynopsis>
<methodsynopsis function="dba_close">
  <type>void</type>
  <methodname>dba_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_close closes the established database and frees all resources of the specified database handle. </desc>
</methodsynopsis>
<methodsynopsis function="dba_delete">
  <type>bool</type>
  <methodname>dba_delete</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_delete deletes the specified entry from the database. </desc>
</methodsynopsis>
<methodsynopsis function="dba_exists">
  <type>bool</type>
  <methodname>dba_exists</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_exists checks whether the specified key exists in the database. </desc>
</methodsynopsis>
<methodsynopsis function="dba_fetch">
  <type>string</type>
  <methodname>dba_fetch</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_fetch fetches the data specified by key from the database specified with handle. </desc>
</methodsynopsis>
<methodsynopsis function="dba_firstkey">
  <type>string</type>
  <methodname>dba_firstkey</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_firstkey returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database. </desc>
</methodsynopsis>
<methodsynopsis function="dba_handlers">
  <type>array</type>
  <methodname>dba_handlers</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>full_info</parameter>
  </methodparam>
  <desc>dba_handlers list all the handlers supported by this extension. </desc>
</methodsynopsis>
<methodsynopsis function="dba_insert">
  <type>bool</type>
  <methodname>dba_insert</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_insert inserts the entry described with key and value into the database. </desc>
</methodsynopsis>
<methodsynopsis function="dba_key_split">
  <type>mixed</type>
  <methodname>dba_key_split</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>dba_key_split splits a key (string representation) into an array representation. </desc>
</methodsynopsis>
<methodsynopsis function="dba_list">
  <type>array</type>
  <methodname>dba_list</methodname>
  <void/>
  <desc>dba_list list all open database files. </desc>
</methodsynopsis>
<methodsynopsis function="dba_nextkey">
  <type>string</type>
  <methodname>dba_nextkey</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_nextkey returns the next key of the database and advances the internal key pointer. </desc>
</methodsynopsis>
<methodsynopsis function="dba_open">
  <type>resource</type>
  <methodname>dba_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>handler</parameter>
  </methodparam>
  <methodparam choice="opt">
    <parameter>...</parameter>
  </methodparam>
  <desc>dba_open establishes a database instance for path with mode using handler. </desc>
</methodsynopsis>
<methodsynopsis function="dba_optimize">
  <type>bool</type>
  <methodname>dba_optimize</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_optimize optimizes the underlying database. </desc>
</methodsynopsis>
<methodsynopsis function="dba_popen">
  <type>resource</type>
  <methodname>dba_popen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>handler</parameter>
  </methodparam>
  <methodparam choice="opt">
    <parameter>...</parameter>
  </methodparam>
  <desc>dba_popen establishes a persistent database instance for path with mode using handler. </desc>
</methodsynopsis>
<methodsynopsis function="dba_replace">
  <type>bool</type>
  <methodname>dba_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_replace replaces or inserts the entry described with key and value into the database specified by handle. </desc>
</methodsynopsis>
<methodsynopsis function="dba_sync">
  <type>bool</type>
  <methodname>dba_sync</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>dba_sync synchronizes the database. This will probably  trigger a physical write to the disk, if supported. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_add_record">
  <type>bool</type>
  <methodname>dbase_add_record</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>record</parameter>
  </methodparam>
  <desc> Adds the given data to the database.  </desc>
</methodsynopsis>
<methodsynopsis function="dbase_close">
  <type>bool</type>
  <methodname>dbase_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <desc> Closes the given database link identifier. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_create">
  <type>int</type>
  <methodname>dbase_create</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>fields</parameter>
  </methodparam>
  <desc>dbase_create creates a dBase database with the given definition. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_delete_record">
  <type>bool</type>
  <methodname>dbase_delete_record</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>record_number</parameter>
  </methodparam>
  <desc> Marks the given record to be deleted from the database. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_get_header_info">
  <type>array</type>
  <methodname>dbase_get_header_info</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <desc> Returns information on the column structure of the given database link identifier. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_get_record_with_names">
  <type>array</type>
  <methodname>dbase_get_record_with_names</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>record_number</parameter>
  </methodparam>
  <desc> Gets a record from a dBase database as an associative array. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_get_record">
  <type>array</type>
  <methodname>dbase_get_record</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>record_number</parameter>
  </methodparam>
  <desc> Gets a record from a database as an indexed array. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_numfields">
  <type>int</type>
  <methodname>dbase_numfields</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <desc> Gets the number of fields (columns) in the specified database.  </desc>
</methodsynopsis>
<methodsynopsis function="dbase_numrecords">
  <type>int</type>
  <methodname>dbase_numrecords</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <desc> Gets the number of records (rows) in the specified database. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_open">
  <type>int</type>
  <methodname>dbase_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>dbase_open opens a dBase database with the given access mode. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_pack">
  <type>bool</type>
  <methodname>dbase_pack</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <desc> Packs the specified database by permanently deleting all records marked for deletion using dbase_delete_record. </desc>
</methodsynopsis>
<methodsynopsis function="dbase_replace_record">
  <type>bool</type>
  <methodname>dbase_replace_record</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dbase_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>record</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>record_number</parameter>
  </methodparam>
  <desc> Replaces the given record in the database with the given data. </desc>
</methodsynopsis>
<methodsynopsis function="dblist">
  <type>string</type>
  <methodname>dblist</methodname>
  <void/>
  <desc> Getting the information on the command line </desc>
</methodsynopsis>
<methodsynopsis function="dbmclose">
  <type>bool</type>
  <methodname>dbmclose</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <desc> Unlocks and closes the specified database. </desc>
</methodsynopsis>
<methodsynopsis function="dbmdelete">
  <type>bool</type>
  <methodname>dbmdelete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc> Deletes the value for key in the database. </desc>
</methodsynopsis>
<methodsynopsis function="dbmexists">
  <type>bool</type>
  <methodname>dbmexists</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if there is a value associated with the key. </desc>
</methodsynopsis>
<methodsynopsis function="dbmfetch">
  <type>string</type>
  <methodname>dbmfetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc> Returns the value associated with key. </desc>
</methodsynopsis>
<methodsynopsis function="dbmfirstkey">
  <type>string</type>
  <methodname>dbmfirstkey</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <desc> Returns the first key in the database. Note that no particular order is guaranteed since the database may be built using a hash-table, which doesn't guarantee any ordering. </desc>
</methodsynopsis>
<methodsynopsis function="dbminsert">
  <type>int</type>
  <methodname>dbminsert</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Adds the value to the database with the specified key. </desc>
</methodsynopsis>
<methodsynopsis function="dbmnextkey">
  <type>string</type>
  <methodname>dbmnextkey</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc> Returns the next key after key. By calling dbmfirstkey followed by successive calls to dbmnextkey it is possible to visit every key/value pair in the dbm database. For example: Visiting every key/value pair in a DBM database
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="dbmopen">
  <type>resource</type>
  <methodname>dbmopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The first argument is the full-path filename of the DBM file to be opened and the second is the file open mode which is one of "r", "n", "c" or "w" for read-only, new (implies read-write, and most likely will truncate an already-existing database of the same name), create (implies read-write, and will not truncate an already-existing database of the same name) and read-write respectively. </desc>
</methodsynopsis>
<methodsynopsis function="dbmreplace">
  <type>int</type>
  <methodname>dbmreplace</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Replaces the value for the specified key in the database. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_add">
  <type>int</type>
  <methodname>dbplus_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>tuple</parameter>
  </methodparam>
  <desc> This function will add a tuple to a relation. The tuple data is an array of attribute/value pairs to be inserted into the given relation. After successful execution the tuple array will contain the complete data of the newly created tuple, including all implicitly set domain fields like sequences. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_aql">
  <type>resource</type>
  <methodname>dbplus_aql</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbpath</parameter>
  </methodparam>
  <desc>dbplus_aql will execute an AQL query on the given server and dbpath.  </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_chdir">
  <type>string</type>
  <methodname>dbplus_chdir</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>newdir</parameter>
  </methodparam>
  <desc>dbplus_chdir will change the virtual current directory where relation files will be looked for by dbplus_open. dbplus_chdir will return the absolute path of the current directory. Calling dbplus_chdir without giving any newdir may be used to query the current working directory. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_close">
  <type>int</type>
  <methodname>dbplus_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc> Calling dbplus_close will close a relation previously opened by dbplus_open. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_curr">
  <type>int</type>
  <methodname>dbplus_curr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">tuple</parameter>
  </methodparam>
  <desc>dbplus_curr will read the data for the current tuple for the given relation and will pass it back as an associative array in tuple. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_errcode">
  <type>string</type>
  <methodname>dbplus_errcode</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>errno</parameter>
  </methodparam>
  <desc>dbplus_errcode returns a cleartext error string for the error code passed as errno of for the result code of the last db++ operation if no parameter is given. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_errno">
  <type>int</type>
  <methodname>dbplus_errno</methodname>
  <void/>
  <desc>dbplus_errno will return the error code returned by the last db++ operation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_find">
  <type>int</type>
  <methodname>dbplus_find</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>constraints</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>tuple</parameter>
  </methodparam>
  <desc>dbplus_find will place a constraint on the given relation. Further calls to functions like dbplus_curr or dbplus_next will only return tuples matching the given constraints. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_first">
  <type>int</type>
  <methodname>dbplus_first</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">tuple</parameter>
  </methodparam>
  <desc>dbplus_curr will read the data for the first tuple for the given relation, make it the current tuple and pass it back as an associative array in tuple. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_flush">
  <type>int</type>
  <methodname>dbplus_flush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_flush will write all changes applied to relation since the last flush to disk. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_freealllocks">
  <type>int</type>
  <methodname>dbplus_freealllocks</methodname>
  <void/>
  <desc>dbplus_freealllocks will free all tuple locks held by this client. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_freelock">
  <type>int</type>
  <methodname>dbplus_freelock</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>tname</parameter>
  </methodparam>
  <desc>dbplus_freelock will release a write lock on the given tuple previously obtained by dbplus_getlock. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_freerlocks">
  <type>int</type>
  <methodname>dbplus_freerlocks</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_freerlocks will free all tuple locks held on the given relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_getlock">
  <type>int</type>
  <methodname>dbplus_getlock</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>tname</parameter>
  </methodparam>
  <desc>dbplus_getlock will request a write lock on the specified tuple. It will return zero on success or a non-zero error code, especially DBPLUS_ERR_WLOCKED, on failure. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_getunique">
  <type>int</type>
  <methodname>dbplus_getunique</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>uniqueid</parameter>
  </methodparam>
  <desc>dbplus_getunique will obtain a number guaranteed to be unique for the given relation and will pass it back in the variable given as uniqueid. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_info">
  <type>int</type>
  <methodname>dbplus_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_last">
  <type>int</type>
  <methodname>dbplus_last</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">tuple</parameter>
  </methodparam>
  <desc>dbplus_curr will read the data for the last tuple for the given relation, make it the current tuple and pass it back as an associative array in tuple. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_lockrel">
  <type>int</type>
  <methodname>dbplus_lockrel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_lockrel will request a write lock on the given relation. Other clients may still query the relation, but can't alter it while it is locked. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_next">
  <type>int</type>
  <methodname>dbplus_next</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">tuple</parameter>
  </methodparam>
  <desc>dbplus_curr will read the data for the next tuple for the given relation, will make it the current tuple and will pass it back as an associative array in tuple. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_open">
  <type>resource</type>
  <methodname>dbplus_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> The relation file name will be opened. name can be either a file name or a relative or absolute path name. This will be mapped in any case to an absolute relation file path on a specific host machine and server. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_prev">
  <type>int</type>
  <methodname>dbplus_prev</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">tuple</parameter>
  </methodparam>
  <desc>dbplus_curr will read the data for the previous tuple for the given relation, will make it the current tuple and will pass it back as an associative array in tuple. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rchperm">
  <type>int</type>
  <methodname>dbplus_rchperm</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mask</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>group</parameter>
  </methodparam>
  <desc>dbplus_rchperm will change access permissions as specified by mask, user and group. The values for these are operating system specific. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rcreate">
  <type>resource</type>
  <methodname>dbplus_rcreate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>domlist</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>overwrite</parameter>
  </methodparam>
  <desc>dbplus_rcreate will create a new relation named name. An existing relation by the same name will only be overwritten if the relation is currently not in use and overwrite is set to TRUE. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rcrtexact">
  <type>resource</type>
  <methodname>dbplus_rcrtexact</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>overwrite</parameter>
  </methodparam>
  <desc>dbplus_rcrtexact will create an exact but empty copy of the given relation under a new name. An existing relation by the same name will only be overwritten if overwrite is &amp;amp;true; and no other process is currently using the relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rcrtlike">
  <type>resource</type>
  <methodname>dbplus_rcrtlike</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>overwrite</parameter>
  </methodparam>
  <desc>dbplus_rcrtexact will create an  empty copy of the given relation under a new name, but with default indices. An existing relation by the same name will only be overwritten if overwrite is &amp;amp;true; and no other process is currently using the relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_resolve">
  <type>int</type>
  <methodname>dbplus_resolve</methodname>
  <methodparam>
    <type>string</type>
    <parameter>relation_name</parameter>
  </methodparam>
  <desc>dbplus_resolve will try to resolve the given relation_name and find out internal server id, real hostname and the database path on this host. The function will return an array containing these values under the keys 'sid', 'host' and 'host_path' or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_restorepos">
  <type>int</type>
  <methodname>dbplus_restorepos</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>tuple</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_rkeys">
  <type>resource</type>
  <methodname>dbplus_rkeys</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>domlist</parameter>
  </methodparam>
  <desc>dbplus_rkeys will replace the current primary key for relation with the combination of domains specified by domlist. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_ropen">
  <type>resource</type>
  <methodname>dbplus_ropen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>dbplus_ropen will open the relation file locally for quick access without any client/server overhead. Access is read only and only dbplus_current and dbplus_next may be applied to the returned relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rquery">
  <type>int</type>
  <methodname>dbplus_rquery</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbpath</parameter>
  </methodparam>
  <desc>dbplus_rquery performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library. dbplus_rquery is faster than dbplus_aql but will work on local data only. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rrename">
  <type>int</type>
  <methodname>dbplus_rrename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>dbplus_rrename will change the name of relation to name. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rsecindex">
  <type>resource</type>
  <methodname>dbplus_rsecindex</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>domlist</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>dbplus_rsecindex will create a new secondary index for relation with consists of the domains specified by domlist and is of type type</desc>
</methodsynopsis>
<methodsynopsis function="dbplus_runlink">
  <type>int</type>
  <methodname>dbplus_runlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_unlink will close and remove the relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_rzap">
  <type>int</type>
  <methodname>dbplus_rzap</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_rzap will remove all tuples from relation.  </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_savepos">
  <type>int</type>
  <methodname>dbplus_savepos</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_setindex">
  <type>int</type>
  <methodname>dbplus_setindex</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>idx_name</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_setindexbynumber">
  <type>int</type>
  <methodname>dbplus_setindexbynumber</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>idx_number</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_sql">
  <type>resource</type>
  <methodname>dbplus_sql</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbpath</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_tcl">
  <type>int</type>
  <methodname>dbplus_tcl</methodname>
  <methodparam>
    <type>int</type>
    <parameter>sid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script</parameter>
  </methodparam>
  <desc> A db++ server will prepare a TCL interpreter for each client connection. This interpreter will enable the server to execute TCL code provided by the client as a sort of stored procedures to improve the performance of database operations by avoiding client/server data transfers and context switches. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_tremove">
  <type>int</type>
  <methodname>dbplus_tremove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>tuple</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">current</parameter>
  </methodparam>
  <desc>dbplus_tremove removes tuple from relation if it perfectly matches a tuple within the relation. current, if given, will contain the data of the new current tuple after calling dbplus_tremove. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_undo">
  <type>int</type>
  <methodname>dbplus_undo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_undoprepare">
  <type>int</type>
  <methodname>dbplus_undoprepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="dbplus_unlockrel">
  <type>int</type>
  <methodname>dbplus_unlockrel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_unlockrel will release a write lock previously obtained by dbplus_lockrel. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_unselect">
  <type>int</type>
  <methodname>dbplus_unselect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc> Calling dbplus_unselect will remove a constraint previously set by dbplus_find on relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_update">
  <type>int</type>
  <methodname>dbplus_update</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>old</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>new</parameter>
  </methodparam>
  <desc>dbplus_update replaces the tuple given by old with the data from new if and only if old completely matches a tuple within relation. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_xlockrel">
  <type>int</type>
  <methodname>dbplus_xlockrel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_xlockrel will request an exclusive lock on relation preventing even read access from other clients. </desc>
</methodsynopsis>
<methodsynopsis function="dbplus_xunlockrel">
  <type>int</type>
  <methodname>dbplus_xunlockrel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>relation</parameter>
  </methodparam>
  <desc>dbplus_xunlockrel will release an exclusive lock on relation previously obtained by dbplus_xlockrel. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_close">
  <type>bool</type>
  <methodname>dbx_close</methodname>
  <methodparam>
    <type>object</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="dbx_compare">
  <type>int</type>
  <methodname>dbx_compare</methodname>
  <methodparam>
    <type>array</type>
    <parameter>row_a</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>row_b</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>dbx_compare returns 0 if the  row_a[$column_key] is equal to  row_b[$column_key], and 1 or  -1 if the former is greater or is smaller than  the latter one, respectively, or vice versa if the  flag is set to DBX_CMP_DESC. dbx_compare is a helper function for  dbx_sort to ease the make and use of the custom  sorting function. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_connect">
  <type>object</type>
  <methodname>dbx_connect</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>module</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>persistent</parameter>
  </methodparam>
  <desc> DBX_MYSQL or "mysql" DBX_ODBC or "odbc" DBX_PGSQL or "pgsql" DBX_MSSQL or "mssql" DBX_FBSQL or "fbsql" (available from PHP 4.1.0) DBX_SYBASECT or "sybase_ct" (available from PHP 4.2.0) DBX_OCI8 or "oci8" (available from PHP 4.3.0) DBX_SQLITE or "sqlite" (PHP 5) </desc>
</methodsynopsis>
<methodsynopsis function="dbx_error">
  <type>string</type>
  <methodname>dbx_error</methodname>
  <methodparam>
    <type>object</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Always refer to the module-specific documentation as well. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_escape_string">
  <type>string</type>
  <methodname>dbx_escape_string</methodname>
  <methodparam>
    <type>object</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> See also dbx_query. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_fetch_row">
  <type>object</type>
  <methodname>dbx_fetch_row</methodname>
  <methodparam>
    <type>object</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <desc> The result_identifier parameter is the result object returned by a call to dbx_query. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_query">
  <type>object</type>
  <methodname>dbx_query</methodname>
  <methodparam>
    <type>object</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sql_statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The flags parameter is used to control the amount of information that is returned. It may be any combination of the following  constants with the bitwise OR operator (|). The DBX_COLNAMES_* flags  override the dbx.colnames_case setting from &amp;amp;php.ini;. DBX_RESULT_INDEX It is always set, that is, the returned object  has a data property which is a 2 dimensional array indexed numerically. For example, in the expression  data[2][3]2 stands for the row (or record) number and 3 stands for the column  (or field) number. The first row and column are indexed at 0. If DBX_RESULT_ASSOC is also specified, the  returning object contains the information related to  DBX_RESULT_INFO too, even if it was not specified.  DBX_RESULT_INFO It provides info about columns, such as field names and field types. DBX_RESULT_ASSOC It effects that the field values can be accessed with the respective  column names used as keys to the returned object's  data property. Associated results are actually references to the numerically indexed  data, so modifying data[0][0] causes that data[0]['field_name_for_first_column'] is modified as well. DBX_RESULT_UNBUFFERED (PHP 5) This flag will not create the data property, and  the rows property will initially be 0. Use this  flag for large datasets, and use dbx_fetch_row to retrieve the results row by row. The dbx_fetch_row function will return rows that are conformant to the flags set with this query. Incidentally, it will also update the rows each time it is called. DBX_COLNAMES_UNCHANGED (available from PHP 4.3.0) The case of the returned column names will not be changed. DBX_COLNAMES_UPPERCASE (available from PHP 4.3.0) The case of the returned column names will be changed to  uppercase. DBX_COLNAMES_LOWERCASE (available from PHP 4.3.0) The case of the returned column names will be changed to  lowercase. Note that DBX_RESULT_INDEX is always used, regardless  of the actual value of flags parameter. This means  that only the following combinations are effective: DBX_RESULT_INDEXDBX_RESULT_INDEX | DBX_RESULT_INFODBX_RESULT_INDEX | DBX_RESULT_INFO | DBX_RESULT_ASSOC - this is the default, if  flags is not specified. </desc>
</methodsynopsis>
<methodsynopsis function="dbx_sort">
  <type>bool</type>
  <methodname>dbx_sort</methodname>
  <methodparam>
    <type>object</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_compare_function</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="dio_close">
  <void/>
  <methodname>dio_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <desc> The function dio_close closes the file descriptor fd. </desc>
</methodsynopsis>
<methodsynopsis function="dio_fcntl">
  <type>mixed</type>
  <methodname>dio_fcntl</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cmd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <desc> The dio_fcntl function performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied. </desc>
</methodsynopsis>
<methodsynopsis function="dio_open">
  <type>resource</type>
  <methodname>dio_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>dio_open opens a file and returns a new file descriptor for it.   </desc>
</methodsynopsis>
<methodsynopsis function="dio_read">
  <type>string</type>
  <methodname>dio_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc> The function dio_read reads and returns len bytes from file with descriptor fd.  </desc>
</methodsynopsis>
<methodsynopsis function="dio_seek">
  <type>int</type>
  <methodname>dio_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pos</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <desc> The function dio_seek is used to change the file position of the given file descriptor.   </desc>
</methodsynopsis>
<methodsynopsis function="dio_stat">
  <type>array</type>
  <methodname>dio_stat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <desc>dio_stat returns information about the given file descriptor. </desc>
</methodsynopsis>
<methodsynopsis function="dio_tcsetattr">
  <void/>
  <methodname>dio_tcsetattr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>dio_tcsetattr sets the terminal attributes and baud rate of the open resource. </desc>
</methodsynopsis>
<methodsynopsis function="dio_truncate">
  <type>bool</type>
  <methodname>dio_truncate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>dio_truncate truncates a file to at most  offset bytes in size. </desc>
</methodsynopsis>
<methodsynopsis function="dio_write">
  <type>int</type>
  <methodname>dio_write</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fd</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc>dio_write writes up to len  bytes from data to file fd.  </desc>
</methodsynopsis>
<methodsynopsis function="chdir">
  <type>bool</type>
  <methodname>chdir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> Changes PHP's current directory to  directory. </desc>
</methodsynopsis>
<methodsynopsis function="chroot">
  <type>bool</type>
  <methodname>chroot</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> Changes the root directory of the current process to directory. </desc>
</methodsynopsis>
<methodsynopsis function="read">
  <type>string</type>
  <methodname>read</methodname>
  <void/>
  <desc> A pseudo-object oriented mechanism for reading a directory.  The given directory is opened.  Two properties are available once the directory has been opened.  The handle property can be used with other directory functions such as readdir, rewinddir and closedir.  The path property is set to path the directory that was opened.  Three methods are available: read, rewind and close. </desc>
</methodsynopsis>
<methodsynopsis function="closedir">
  <type>void</type>
  <methodname>closedir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dir_handle</parameter>
  </methodparam>
  <desc> Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir. </desc>
</methodsynopsis>
<methodsynopsis function="getcwd">
  <type>string</type>
  <methodname>getcwd</methodname>
  <void/>
  <desc> Gets the current working directory. </desc>
</methodsynopsis>
<methodsynopsis function="opendir">
  <type>resource</type>
  <methodname>opendir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc> Opens up a directory handle to be used in subsequent closedir, readdir, and rewinddir calls. </desc>
</methodsynopsis>
<methodsynopsis function="readdir">
  <type>string</type>
  <methodname>readdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dir_handle</parameter>
  </methodparam>
  <desc> Returns the filename of the next file from the directory. The filenames are returned in the order in which they are stored by the filesystem. </desc>
</methodsynopsis>
<methodsynopsis function="rewinddir">
  <type>void</type>
  <methodname>rewinddir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dir_handle</parameter>
  </methodparam>
  <desc> Resets the directory stream indicated by dir_handle to the beginning of the directory. </desc>
</methodsynopsis>
<methodsynopsis function="scandir">
  <type>array</type>
  <methodname>scandir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sorting_order</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Returns an array of files and directories from the directory. </desc>
</methodsynopsis>
<methodsynopsis function="isId">
  <type>bool</type>
  <methodname>isId</methodname>
  <void/>
  <desc> This function checks if the attribute is a defined ID. </desc>
</methodsynopsis>
<methodsynopsis function="appendData">
  <type>void</type>
  <methodname>appendData</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> Append the string data to the end of the character data of the node. </desc>
</methodsynopsis>
<methodsynopsis function="deleteData">
  <type>void</type>
  <methodname>deleteData</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <desc> Deletes count characters starting from position  offset.  </desc>
</methodsynopsis>
<methodsynopsis function="insertData">
  <type>void</type>
  <methodname>insertData</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> Inserts string data at position offset. </desc>
</methodsynopsis>
<methodsynopsis function="replaceData">
  <type>void</type>
  <methodname>replaceData</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> Replace count characters starting from position  offset with data.  </desc>
</methodsynopsis>
<methodsynopsis function="substringData">
  <type>string</type>
  <methodname>substringData</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <desc> Returns the specified substring.  </desc>
</methodsynopsis>
<methodsynopsis function="createAttribute">
  <type>DOMAttr</type>
  <methodname>createAttribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMAttr.  &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createAttributeNS">
  <type>DOMAttr</type>
  <methodname>createAttributeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifiedName</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMAttr. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createCDATASection">
  <type>DOMCDATASection</type>
  <methodname>createCDATASection</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMCDATASection. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createComment">
  <type>DOMComment</type>
  <methodname>createComment</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMComment. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createDocumentFragment">
  <type>DOMDocumentFragment</type>
  <methodname>createDocumentFragment</methodname>
  <void/>
  <desc> This function creates a new instance of class  DOMDocumentFragment. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createElement">
  <type>DOMElement</type>
  <methodname>createElement</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMElement. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createElementNS">
  <type>DOMElement</type>
  <methodname>createElementNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifiedName</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function creates a new element node with an associated namespace. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createEntityReference">
  <type>DOMEntityReference</type>
  <methodname>createEntityReference</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMEntityReference. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createProcessingInstruction">
  <type>DOMProcessingInstruction</type>
  <methodname>createProcessingInstruction</methodname>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMProcessingInstruction. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="createTextNode">
  <type>DOMText</type>
  <methodname>createTextNode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function creates a new instance of class DOMText. &amp;amp;dom.node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="getElementById">
  <type>DOMElement</type>
  <methodname>getElementById</methodname>
  <methodparam>
    <type>string</type>
    <parameter>elementId</parameter>
  </methodparam>
  <desc> This function is similar to but  searches for an element with a given id. </desc>
</methodsynopsis>
<methodsynopsis function="getElementsByTagName">
  <type>DOMNodeList</type>
  <methodname>getElementsByTagName</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DOMNodeList containing the elements with a given tag name. </desc>
</methodsynopsis>
<methodsynopsis function="getElementsByTagNameNS">
  <type>DOMNodeList</type>
  <methodname>getElementsByTagNameNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Returns a DOMNodeList of all elements with a given  local name and a namespace URI. </desc>
</methodsynopsis>
<methodsynopsis function="importNode">
  <type>DOMNode</type>
  <methodname>importNode</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>importedNode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>deep</parameter>
  </methodparam>
  <desc> This function returns a copy of the node to import and associates it with  the current document. </desc>
</methodsynopsis>
<methodsynopsis function="load">
  <type>bool</type>
  <methodname>load</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Loads an XML document from a file.  </desc>
</methodsynopsis>
<methodsynopsis function="loadHTML">
  <type>bool</type>
  <methodname>loadHTML</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> The function parses the HTML contained in the string source.  Unlike loading XML, HTML does not have to be well-formed to load. This  function may also be called statically to load and create a  DOMDocument object. The static invocation may be  used when no DOMDocument properties need to be  set prior to loading. </desc>
</methodsynopsis>
<methodsynopsis function="loadHTMLFile">
  <type>bool</type>
  <methodname>loadHTMLFile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The function parses the HTML document in the file named filename. Unlike loading XML, HTML does not have  to be  well-formed to load. </desc>
</methodsynopsis>
<methodsynopsis function="loadXML">
  <type>bool</type>
  <methodname>loadXML</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> Loads an XML document from a string.  </desc>
</methodsynopsis>
<methodsynopsis function="normalize">
  <type>void</type>
  <methodname>normalize</methodname>
  <void/>
  <desc> Normalizes the document. </desc>
</methodsynopsis>
<methodsynopsis function="relaxNGValidate">
  <type>bool</type>
  <methodname>relaxNGValidate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Performs relaxNG validation on the document based on the given RNG schema.  </desc>
</methodsynopsis>
<methodsynopsis function="relaxNGValidateSource">
  <type>bool</type>
  <methodname>relaxNGValidateSource</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> Performs relaxNG validation on the document based on the given RNG source. </desc>
</methodsynopsis>
<methodsynopsis function="save">
  <type>mixed</type>
  <methodname>save</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Creates an XML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  </desc>
</methodsynopsis>
<methodsynopsis function="saveHTML">
  <type>string</type>
  <methodname>saveHTML</methodname>
  <void/>
  <desc> Creates an HTML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  </desc>
</methodsynopsis>
<methodsynopsis function="saveHTMLFile">
  <type>int</type>
  <methodname>saveHTMLFile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Creates an HTML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  </desc>
</methodsynopsis>
<methodsynopsis function="saveXML">
  <type>string</type>
  <methodname>saveXML</methodname>
  <methodparam choice="opt">
    <type>DOMNode</type>
    <parameter>node</parameter>
  </methodparam>
  <desc> Creates an XML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  </desc>
</methodsynopsis>
<methodsynopsis function="schemaValidate">
  <type>bool</type>
  <methodname>schemaValidate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Validates a document based on the given schema file.  </desc>
</methodsynopsis>
<methodsynopsis function="schemaValidateSource">
  <type>bool</type>
  <methodname>schemaValidateSource</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> Validates a document based on a schema defined in the given string. </desc>
</methodsynopsis>
<methodsynopsis function="validate">
  <type>bool</type>
  <methodname>validate</methodname>
  <void/>
  <desc> Validates the document based on its DTD.  </desc>
</methodsynopsis>
<methodsynopsis function="xinclude">
  <type>int</type>
  <methodname>xinclude</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This method substitutes XIncludes in a DOMDocument object. </desc>
</methodsynopsis>
<methodsynopsis function="getAttribute">
  <type>string</type>
  <methodname>getAttribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Gets the value of the attribute with name name  for the current node. </desc>
</methodsynopsis>
<methodsynopsis function="getAttributeNode">
  <type>DOMAttr</type>
  <methodname>getAttributeNode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the attribute node with name name for the current element. </desc>
</methodsynopsis>
<methodsynopsis function="getAttributeNodeNS">
  <type>DOMAttr</type>
  <methodname>getAttributeNodeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Returns the attribute node in namespace namespaceURI  with local name localName for the current node. </desc>
</methodsynopsis>
<methodsynopsis function="getAttributeNS">
  <type>string</type>
  <methodname>getAttributeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Gets the value of the attribute in namespace namespaceURI  with local name localName for the current node.  </desc>
</methodsynopsis>
<methodsynopsis function="getElementsByTagName">
  <type>DOMNodeList</type>
  <methodname>getElementsByTagName</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function returns a new instance of the class DOMNodeList of all descendant elements with a given tag name, in the order in which they are encountered in a preorder traversal of this element tree.  </desc>
</methodsynopsis>
<methodsynopsis function="getElementsByTagNameNS">
  <type>DOMNodeList</type>
  <methodname>getElementsByTagNameNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> This function fetch all the descendant elements with a given  localName and namespaceURI. </desc>
</methodsynopsis>
<methodsynopsis function="hasAttribute">
  <type>bool</type>
  <methodname>hasAttribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Indicates whether attribute named name  exists as a member of the element. </desc>
</methodsynopsis>
<methodsynopsis function="hasAttributeNS">
  <type>bool</type>
  <methodname>hasAttributeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Indicates whether attribute in namespace namespaceURI  named localName exists as a member of the element. </desc>
</methodsynopsis>
<methodsynopsis function="removeAttribute">
  <type>bool</type>
  <methodname>removeAttribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Removes attribute named name from the element. </desc>
</methodsynopsis>
<methodsynopsis function="removeAttributeNode">
  <type>bool</type>
  <methodname>removeAttributeNode</methodname>
  <methodparam>
    <type>DOMAttr</type>
    <parameter>oldnode</parameter>
  </methodparam>
  <desc> Removes attribute oldnode from the element. </desc>
</methodsynopsis>
<methodsynopsis function="removeAttributeNS">
  <type>bool</type>
  <methodname>removeAttributeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Removes attribute is namespace namespaceURI  named localName from the element. </desc>
</methodsynopsis>
<methodsynopsis function="setAttribute">
  <type>bool</type>
  <methodname>setAttribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets an attribute with name name to the given value. If the attribute does not exist, it will be created. </desc>
</methodsynopsis>
<methodsynopsis function="setAttributeNode">
  <type>DOMAttr</type>
  <methodname>setAttributeNode</methodname>
  <methodparam>
    <type>DOMAttr</type>
    <parameter>attr</parameter>
  </methodparam>
  <desc> Adds new attribute node attr to element.  </desc>
</methodsynopsis>
<methodsynopsis function="setAttributeNodeNS">
  <type>DOMAttr</type>
  <methodname>setAttributeNodeNS</methodname>
  <methodparam>
    <type>DOMAttr</type>
    <parameter>attr</parameter>
  </methodparam>
  <desc> Adds new attribute node attr to element.  </desc>
</methodsynopsis>
<methodsynopsis function="setAttributeNS">
  <type>void</type>
  <methodname>setAttributeNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifiedName</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets an attribute with namespace namespaceURI and  name name to the given value. If the attribute  does not exist, it will be created. </desc>
</methodsynopsis>
<methodsynopsis function="createDocument">
  <type>DOMDocument</type>
  <methodname>createDocument</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifiedName</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>DOMDocumentType</type>
    <parameter>doctype</parameter>
  </methodparam>
  <desc> Creates a DOMDocument object of the specified type with its document element.  </desc>
</methodsynopsis>
<methodsynopsis function="createDocumentType">
  <type>DOMDocumentType</type>
  <methodname>createDocumentType</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifiedName</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>publicId</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>systemId</parameter>
  </methodparam>
  <desc> Creates an empty DOMDocumentType object. Entity  declarations and notations are not made available. Entity reference  expansions and default attribute additions do not occur. </desc>
</methodsynopsis>
<methodsynopsis function="hasFeature">
  <type>bool</type>
  <methodname>hasFeature</methodname>
  <methodparam>
    <type>string</type>
    <parameter>feature</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> Test if the DOM implementation implements a specific  feature. </desc>
</methodsynopsis>
<methodsynopsis function="getNamedItem">
  <type>DOMNode</type>
  <methodname>getNamedItem</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Retrieves a node specified by its nodeName. </desc>
</methodsynopsis>
<methodsynopsis function="getNamedItemNS">
  <type>DOMNode</type>
  <methodname>getNamedItemNS</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Retrieves a node specified by localName and  namespaceURI. </desc>
</methodsynopsis>
<methodsynopsis function="item">
  <type>DOMNode</type>
  <methodname>item</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Retrieves a node specified by index within the  DOMNamedNodeMap object. </desc>
</methodsynopsis>
<methodsynopsis function="appendChild">
  <type>DOMNode</type>
  <methodname>appendChild</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>newnode</parameter>
  </methodparam>
  <desc> This functions appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. ,  etc. or simply by using any other node. </desc>
</methodsynopsis>
<methodsynopsis function="cloneNode">
  <type>DOMNode</type>
  <methodname>cloneNode</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>deep</parameter>
  </methodparam>
  <desc> Creates a copy of the node.  </desc>
</methodsynopsis>
<methodsynopsis function="hasAttributes">
  <type>bool</type>
  <methodname>hasAttributes</methodname>
  <void/>
  <desc> This method checks if the node has attributes. The tested node have to be an XML_ELEMENT_NODE. </desc>
</methodsynopsis>
<methodsynopsis function="hasChildNodes">
  <type>bool</type>
  <methodname>hasChildNodes</methodname>
  <void/>
  <desc> This function checks if the node has children. </desc>
</methodsynopsis>
<methodsynopsis function="insertBefore">
  <type>DOMNode</type>
  <methodname>insertBefore</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>newnode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>DOMNode</type>
    <parameter>refnode</parameter>
  </methodparam>
  <desc> This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.   </desc>
</methodsynopsis>
<methodsynopsis function="isSameNode">
  <type>bool</type>
  <methodname>isSameNode</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>node</parameter>
  </methodparam>
  <desc> This function indicates if two nodes are the same node. The comparison is not based on content </desc>
</methodsynopsis>
<methodsynopsis function="isSupported">
  <type>bool</type>
  <methodname>isSupported</methodname>
  <methodparam>
    <type>string</type>
    <parameter>feature</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> Checks if the asked feature is supported for the  specified version. </desc>
</methodsynopsis>
<methodsynopsis function="lookupNamespaceURI">
  <type>string</type>
  <methodname>lookupNamespaceURI</methodname>
  <methodparam>
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> Gets the namespace URI of the node based on the  prefix. </desc>
</methodsynopsis>
<methodsynopsis function="lookupPrefix">
  <type>string</type>
  <methodname>lookupPrefix</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <desc> Gets the namespace prefix of the node based on the namespace URI. </desc>
</methodsynopsis>
<methodsynopsis function="normalize">
  <type>void</type>
  <methodname>normalize</methodname>
  <void/>
  <desc> Normalizes the node. </desc>
</methodsynopsis>
<methodsynopsis function="removeChild">
  <type>DOMNode</type>
  <methodname>removeChild</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>oldnode</parameter>
  </methodparam>
  <desc> This functions removes a child from a list of children. </desc>
</methodsynopsis>
<methodsynopsis function="replaceChild">
  <type>DOMNode</type>
  <methodname>replaceChild</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>newnode</parameter>
  </methodparam>
  <methodparam>
    <type>DOMNode</type>
    <parameter>oldnode</parameter>
  </methodparam>
  <desc> This function replaces the child oldnode  with the passed new node. If the new node is already a child it  will not be added a second time. If the replacement succeeds the  old node is returned. </desc>
</methodsynopsis>
<methodsynopsis function="item">
  <type>DOMNode</type>
  <methodname>item</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Retrieves a node specified by index within the  DOMNodeList object. </desc>
</methodsynopsis>
<methodsynopsis function="isWhitespaceInElementContent">
  <type>bool</type>
  <methodname>isWhitespaceInElementContent</methodname>
  <void/>
  <desc> Indicates whether this text node contains whitespace. The text node is  determined to contain whitespace in element content during the load of the  document. </desc>
</methodsynopsis>
<methodsynopsis function="splitText">
  <type>DOMText</type>
  <methodname>splitText</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Breaks this node into two nodes at the specified offset,  keeping both in the tree as siblings.  </desc>
</methodsynopsis>
<methodsynopsis function="evaluate">
  <type>mixed</type>
  <methodname>evaluate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>DOMNode</type>
    <parameter>contextnode</parameter>
  </methodparam>
  <desc> Executes the given XPath expression and returns a typed result if possible. </desc>
</methodsynopsis>
<methodsynopsis function="query">
  <type>DOMNodeList</type>
  <methodname>query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>DOMNode</type>
    <parameter>contextnode</parameter>
  </methodparam>
  <desc> Executes the given XPath expression. </desc>
</methodsynopsis>
<methodsynopsis function="registerNamespace">
  <type>bool</type>
  <methodname>registerNamespace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <desc> Registers the namespaceURI and  prefix with the DOMXPath object. </desc>
</methodsynopsis>
<methodsynopsis function="dom_import_simplexml">
  <type>DOMElement</type>
  <methodname>dom_import_simplexml</methodname>
  <methodparam>
    <type>SimpleXMLElement</type>
    <parameter>node</parameter>
  </methodparam>
  <desc> This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.  </desc>
</methodsynopsis>
<methodsynopsis function="DomAttribute-&gt;name">
  <type>string</type>
  <methodname>DomAttribute-&gt;name</methodname>
  <void/>
  <desc> This function returns the name of the attribute. </desc>
</methodsynopsis>
<methodsynopsis function="DomAttribute-&gt;specified">
  <type>bool</type>
  <methodname>DomAttribute-&gt;specified</methodname>
  <void/>
  <desc> Check DOM standard for a detailed explanation. </desc>
</methodsynopsis>
<methodsynopsis function="DomAttribute-&gt;value">
  <type>mixed</type>
  <methodname>DomAttribute-&gt;value</methodname>
  <void/>
  <desc> This function returns the value of the attribute. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;add_root">
  <type>domelement</type>
  <methodname>DomDocument-&gt;add_root</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Adds a root element node to a dom document and returns the new node. The element name is given in the passed parameter. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_attribute">
  <type>domattribute</type>
  <methodname>DomDocument-&gt;create_attribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomAttribute. The name of the attribute is the value of the first parameter. The value of the attribute is the value of the second parameter. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_cdata_section">
  <type>domcdata</type>
  <methodname>DomDocument-&gt;create_cdata_section</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomCData. The content of the cdata is the value of the passed parameter. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_comment">
  <type>domcomment</type>
  <methodname>DomDocument-&gt;create_comment</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomComment. The content of the comment is the value of the passed parameter. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_element_ns">
  <type>domelement</type>
  <methodname>DomDocument-&gt;create_element_ns</methodname>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomElement. The tag name of the element is the value of the passed parameter name. The URI of the namespace is the value of the passed parameter uri. If there is already a namespace declaration with the same uri in the root-node  of the document, the prefix of this is taken, otherwise it will take the one provided  in the optional parameter prefix or generate a random one. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_element">
  <type>domelement</type>
  <methodname>DomDocument-&gt;create_element</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomElement. The tag name of the element is the value of the passed parameter. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_entity_reference">
  <type>domentityreference</type>
  <methodname>DomDocument-&gt;create_entity_reference</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomEntityReference. The content of the entity reference is the value of the passed parameter. &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_processing_instruction">
  <type>domprocessinginstruction</type>
  <methodname>DomDocument-&gt;create_processing_instruction</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomCData. The content of the pi is the value of the passed parameter.  &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;create_text_node">
  <type>domtext</type>
  <methodname>DomDocument-&gt;create_text_node</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> This function returns a new instance of class DomText. The content of the text is the value of the passed parameter.  &amp;amp;node.inserted; </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;doctype">
  <type>domdocumenttype</type>
  <methodname>DomDocument-&gt;doctype</methodname>
  <void/>
  <desc> This function returns an object of class DomDocumentType. In versions of PHP before 4.3 this has been the class Dtd, but the DOM Standard does not know such a class. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;document_element">
  <type>domelement</type>
  <methodname>DomDocument-&gt;document_element</methodname>
  <void/>
  <desc> This function returns the root element node of a document.  </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;dump_file">
  <type>string</type>
  <methodname>DomDocument-&gt;dump_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>compressionmode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>format</parameter>
  </methodparam>
  <desc> Creates an XML document from the dom representation. This function usually is called after building a new dom document from scratch as in the example below. The format specifies whether the output should be neatly formatted, or not. The first parameter specifies the name of the filename and the second parameter, whether it should be compressed or not. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;dump_mem">
  <type>string</type>
  <methodname>DomDocument-&gt;dump_mem</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> Creates an XML document from the dom representation. This function usually is called after building a new dom document from scratch as in the example below. The format specifies whether the output should be neatly formatted, or not. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;get_element_by_id">
  <type>domelement</type>
  <methodname>DomDocument-&gt;get_element_by_id</methodname>
  <methodparam>
    <type>string</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> This function is similar to domdocument_get_elements_by_tagname but searches for an element with a given id. According to the DOM standard this requires a DTD which defines the attribute ID to be of type ID, though the current implementation simply does an xpath search for "//*[@ID = '%s']". This does not comply to the DOM standard which requires to return null if it is not known which attribute is of type id. This behaviour is likely to be fixed, so do not rely on the current behaviour. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;get_elements_by_tagname">
  <type>array</type>
  <methodname>DomDocument-&gt;get_elements_by_tagname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;html_dump_mem">
  <type>string</type>
  <methodname>DomDocument-&gt;html_dump_mem</methodname>
  <void/>
  <desc> Creates an HTML document from the dom representation. This function usually is called after building a new dom document from scratch as in the example below.  </desc>
</methodsynopsis>
<methodsynopsis function="DomDocument-&gt;xinclude">
  <type>int</type>
  <methodname>DomDocument-&gt;xinclude</methodname>
  <void/>
  <desc> This function substitutes XIncludes in a DomDocument object. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;entities">
  <type>array</type>
  <methodname>DomDocumentType-&gt;entities</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;internal_subset">
  <type>bool</type>
  <methodname>DomDocumentType-&gt;internal_subset</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;name">
  <type>string</type>
  <methodname>DomDocumentType-&gt;name</methodname>
  <void/>
  <desc> This function returns the name of the document type. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;notations">
  <type>array</type>
  <methodname>DomDocumentType-&gt;notations</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;public_id">
  <type>string</type>
  <methodname>DomDocumentType-&gt;public_id</methodname>
  <void/>
  <desc> This function returns the public id of the document type. </desc>
</methodsynopsis>
<methodsynopsis function="DomDocumentType-&gt;system_id">
  <type>string</type>
  <methodname>DomDocumentType-&gt;system_id</methodname>
  <void/>
  <desc> Returns the system id of the document type. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;get_attribute_node">
  <type>domattribute</type>
  <methodname>DomElement-&gt;get_attribute_node</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the node of the attribute named name in the current element. The name parameter is case sensitive. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;get_attribute">
  <type>string</type>
  <methodname>DomElement-&gt;get_attribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the value of the attribute named name in the current node. The name parameter is case sensitive. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;get_elements_by_tagname">
  <type>array</type>
  <methodname>DomElement-&gt;get_elements_by_tagname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function returns an array with all the elements which has  name as his tagname. Every element of the array is a DomElement. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;has_attribute">
  <type>bool</type>
  <methodname>DomElement-&gt;has_attribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This functions checks to see if an attribute named name exists in the current node. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;remove_attribute">
  <type>bool</type>
  <methodname>DomElement-&gt;remove_attribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;set_attribute">
  <type>domattribute</type>
  <methodname>DomElement-&gt;set_attribute</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets an attribute with name name to the given value. If the attribute does not exist, it will be created. </desc>
</methodsynopsis>
<methodsynopsis function="DomElement-&gt;tagname">
  <type>string</type>
  <methodname>DomElement-&gt;tagname</methodname>
  <void/>
  <desc> Returns the name of the current node. Calling this function is the same as accessing the tagname property, or calling DomElement-&amp;gt;node_name of the current node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;add_namespace">
  <type>bool</type>
  <methodname>DomNode-&gt;add_namespace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;append_child">
  <type>domelement</type>
  <methodname>DomNode-&gt;append_child</methodname>
  <methodparam>
    <type>domelement</type>
    <parameter>newnode</parameter>
  </methodparam>
  <desc> This functions appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. domdocument_create_element, domdocument_create_text etc. or simply by using any other node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;append_sibling">
  <type>domelement</type>
  <methodname>DomNode-&gt;append_sibling</methodname>
  <methodparam>
    <type>domelement</type>
    <parameter>newnode</parameter>
  </methodparam>
  <desc> This functions appends a sibling to an existing node. The child can be created with e.g. domdocument_create_element, domdocument_create_text etc. or simply by using any other node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;attributes">
  <type>array</type>
  <methodname>DomNode-&gt;attributes</methodname>
  <void/>
  <desc> This function only returns an array of attributes if the node is of type XML_ELEMENT_NODE. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;child_nodes">
  <type>array</type>
  <methodname>DomNode-&gt;child_nodes</methodname>
  <void/>
  <desc> Returns all children of the node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;clone_node">
  <type>domelement</type>
  <methodname>DomNode-&gt;clone_node</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;dump_node">
  <type>string</type>
  <methodname>DomNode-&gt;dump_node</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;first_child">
  <type>domelement</type>
  <methodname>DomNode-&gt;first_child</methodname>
  <void/>
  <desc> Returns the first child of the node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;get_content">
  <type>string</type>
  <methodname>DomNode-&gt;get_content</methodname>
  <void/>
  <desc> This function returns the content of the actual node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;has_attributes">
  <type>bool</type>
  <methodname>DomNode-&gt;has_attributes</methodname>
  <void/>
  <desc> This function checks if the node has attributes. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;has_child_nodes">
  <type>bool</type>
  <methodname>DomNode-&gt;has_child_nodes</methodname>
  <void/>
  <desc> This function checks if the node has children. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;insert_before">
  <type>domelement</type>
  <methodname>DomNode-&gt;insert_before</methodname>
  <methodparam>
    <type>domelement</type>
    <parameter>newnode</parameter>
  </methodparam>
  <methodparam>
    <type>domelement</type>
    <parameter>refnode</parameter>
  </methodparam>
  <desc> This function inserts the new node newnode right before the node refnode. The return value is the  inserted node. If you plan to do further modifications on the appended  child you must use the returned node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;is_blank_node">
  <type>bool</type>
  <methodname>DomNode-&gt;is_blank_node</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;last_child">
  <type>domelement</type>
  <methodname>DomNode-&gt;last_child</methodname>
  <void/>
  <desc> Returns the last child of the node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;next_sibling">
  <type>domelement</type>
  <methodname>DomNode-&gt;next_sibling</methodname>
  <void/>
  <desc> This function returns the next sibling of the current node. If there is no next sibling it returns &amp;amp;false; (&amp;lt; 4.3) or null (&amp;gt;= 4.3). You can  use this function to iterate over all children of a node as shown in the  example. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;node_name">
  <type>string</type>
  <methodname>DomNode-&gt;node_name</methodname>
  <void/>
  <desc> Returns name of the node. The name has different meanings for the different types of nodes as illustrated in the following table. Meaning of valueTypeMeaningDomAttributevalue of attributeDomAttributeDomCDataSection#cdata-sectionDomComment#commentDomDocument#documentDomDocumentTypedocument type nameDomElementtag nameDomEntityname of entityDomEntityReferencename of entity referenceDomNotationnotation nameDomProcessingInstructiontargetDomText#text</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;node_type">
  <type>int</type>
  <methodname>DomNode-&gt;node_type</methodname>
  <void/>
  <desc> Returns the type of the node. All possible types are listed in the table in the introduction. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;node_value">
  <type>string</type>
  <methodname>DomNode-&gt;node_value</methodname>
  <void/>
  <desc> Returns value of the node. The value has different meanings for the different types of nodes as illustrated in the following table. Meaning of valueTypeMeaningDomAttributevalue of attributeDomAttributeDomCDataSectioncontentDomCommentcontent of commentDomDocumentnullDomDocumentTypenullDomElementnullDomEntitynullDomEntityReferencenullDomNotationnullDomProcessingInstructionentire content without targetDomTextcontent of text</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;owner_document">
  <type>domdocument</type>
  <methodname>DomNode-&gt;owner_document</methodname>
  <void/>
  <desc> This function returns the document the current node belongs to. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;parent_node">
  <type>domnode</type>
  <methodname>DomNode-&gt;parent_node</methodname>
  <void/>
  <desc> This function returns the parent node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;prefix">
  <type>string</type>
  <methodname>DomNode-&gt;prefix</methodname>
  <void/>
  <desc> Returns the name space prefix of the node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;previous_sibling">
  <type>domelement</type>
  <methodname>DomNode-&gt;previous_sibling</methodname>
  <void/>
  <desc> This function returns the previous sibling of the current node. If there  is no previous sibling it returns &amp;amp;false; (&amp;lt; 4.3) or &amp;amp;null; (&amp;gt;= 4.3). You  can use this function to iterate over all children of a node as shown in  the example. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;remove_child">
  <type>domtext</type>
  <methodname>DomNode-&gt;remove_child</methodname>
  <methodparam>
    <type>domtext</type>
    <parameter>oldchild</parameter>
  </methodparam>
  <desc> This functions removes a child from a list of children. If child cannot be removed or is not a child the function will return &amp;amp;false;. If the child could be removed the functions returns the old child. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;replace_child">
  <type>domelement</type>
  <methodname>DomNode-&gt;replace_child</methodname>
  <methodparam>
    <type>domelement</type>
    <parameter>oldnode</parameter>
  </methodparam>
  <methodparam>
    <type>domelement</type>
    <parameter>newnode</parameter>
  </methodparam>
  <desc> (PHP 4.2) This function replaces the child oldnode with the passed new node. If the new node is already a child it will not be added a second time. If the old node cannot be found the function returns &amp;amp;false;. If the replacement succeeds the old node is returned. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;replace_node">
  <type>domelement</type>
  <methodname>DomNode-&gt;replace_node</methodname>
  <methodparam>
    <type>domelement</type>
    <parameter>newnode</parameter>
  </methodparam>
  <desc> (PHP 4.2) This function replaces an existing node with the passed new node. Before the replacement newnode is copied if it has a parent to make sure a node which is already in the document will not be inserted a second time. This behaviour enforces doing all modifications on the node before the replacement or to refetch the inserted node afterwards with functions like domnode_first_child, domnode_child_nodes etc.. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;set_content">
  <type>bool</type>
  <methodname>DomNode-&gt;set_content</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;set_name">
  <type>bool</type>
  <methodname>DomNode-&gt;set_name</methodname>
  <void/>
  <desc> Sets name of node. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;set_namespace">
  <type>void</type>
  <methodname>DomNode-&gt;set_namespace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> Sets the namespace of a node to uri. If there is already a namespace declaration with the same uri in one of the parent nodes of the node, the prefix of this is taken, otherwise it will take the one provided  in the optional parameter prefix or generate a random one. </desc>
</methodsynopsis>
<methodsynopsis function="DomNode-&gt;unlink_node">
  <type>void</type>
  <methodname>DomNode-&gt;unlink_node</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomProcessingInstruction-&gt;data">
  <type>string</type>
  <methodname>DomProcessingInstruction-&gt;data</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="DomProcessingInstruction-&gt;target">
  <type>string</type>
  <methodname>DomProcessingInstruction-&gt;target</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="domxml_new_doc">
  <type>domdocument</type>
  <methodname>domxml_new_doc</methodname>
  <methodparam>
    <type>string</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> Creates a new dom document from scratch and returns it. </desc>
</methodsynopsis>
<methodsynopsis function="domxml_open_file">
  <type>domdocument</type>
  <methodname>domxml_open_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">error</parameter>
  </methodparam>
  <desc> The function parses the XML document in the file named filename and returns an object of class "Dom document", having the properties as listed above. The file is accessed read-only. </desc>
</methodsynopsis>
<methodsynopsis function="domxml_open_mem">
  <type>domdocument</type>
  <methodname>domxml_open_mem</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">error</parameter>
  </methodparam>
  <desc> The function parses the XML document in str and returns an object of class "Dom document", having the properties as listed above. This function, domxml_open_file or domxml_new_doc must be called before any other function calls. </desc>
</methodsynopsis>
<methodsynopsis function="domxml_version">
  <type>string</type>
  <methodname>domxml_version</methodname>
  <void/>
  <desc> This function returns the version of the version of the XML library  currently used. </desc>
</methodsynopsis>
<methodsynopsis function="domxml_xmltree">
  <type>domdocument</type>
  <methodname>domxml_xmltree</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> The function parses the XML document in str and returns a tree PHP objects as the parsed document. This function is isolated from the other functions, which means you cannot access the tree with any of the other functions. Modifying it, for example by adding nodes, makes no sense since there is currently no way to dump it as an XML file. However this function may be valuable if you want to read a file and investigate the content. </desc>
</methodsynopsis>
<methodsynopsis function="domxml_xslt_stylesheet_doc">
  <type>XsltStylesheet</type>
  <methodname>domxml_xslt_stylesheet_doc</methodname>
  <methodparam>
    <type>domdocument</type>
    <parameter>DocDocumentObject</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="domxml_xslt_stylesheet_file">
  <type>XsltStylesheet</type>
  <methodname>domxml_xslt_stylesheet_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>xsl_file</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="domxml_xslt_stylesheet">
  <type>XsltStylesheet</type>
  <methodname>domxml_xslt_stylesheet</methodname>
  <methodparam>
    <type>string</type>
    <parameter>xsl_document</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="DomXsltStylesheet-&gt;process">
  <type>domdocument</type>
  <methodname>DomXsltStylesheet-&gt;process</methodname>
  <methodparam>
    <type>domdocument</type>
    <parameter>DomDocument</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>xslt_parameters</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>param_is_xpath</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="DomXsltStylesheet-&gt;result_dump_file">
  <type>string</type>
  <methodname>DomXsltStylesheet-&gt;result_dump_file</methodname>
  <methodparam>
    <type>domdocument</type>
    <parameter>DomDocument</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> This function is only available since PHP 4.3 </desc>
</methodsynopsis>
<methodsynopsis function="DomXsltStylesheet-&gt;result_dump_mem">
  <type>string</type>
  <methodname>DomXsltStylesheet-&gt;result_dump_mem</methodname>
  <methodparam>
    <type>domdocument</type>
    <parameter>DomDocument</parameter>
  </methodparam>
  <desc> This function is only available since PHP 4.3 </desc>
</methodsynopsis>
<methodsynopsis function="xpath_eval_expression">
  <type>XPathObject</type>
  <methodname>xpath_eval_expression</methodname>
  <methodparam>
    <type>XPathContext</type>
    <parameter>xpath_context</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expression</parameter>
  </methodparam>
  <desc> xpath_eval_expression Example
]]&amp;gt; &amp;amp;example.outputs; int(1) ["nodeset"]=&amp;gt; array(1) { [0]=&amp;gt; object(domattribute)(5) { ["type"]=&amp;gt; int(2) ["name"]=&amp;gt; string(8) "language" ["value"]=&amp;gt; string(2) "en" [0]=&amp;gt; int(7) [1]=&amp;gt; int(138004256) } }
}
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="xpath_eval">
  <type>array</type>
  <methodname>xpath_eval</methodname>
  <methodparam>
    <type>XPathContext</type>
    <parameter>xpath_context</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>xpath_expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>domnode</type>
    <parameter>contextnode</parameter>
  </methodparam>
  <desc> The optional contextnode can be specified for doing relative XPath queries.  </desc>
</methodsynopsis>
<methodsynopsis function="xpath_new_context">
  <type>XPathContext</type>
  <methodname>xpath_new_context</methodname>
  <methodparam>
    <type>domdocument</type>
    <parameter>dom_document</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="xptr_eval">
  <type>int</type>
  <methodname>xptr_eval</methodname>
  <methodparam choice="opt">
    <type>XPathContext</type>
    <parameter>xpath_context</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>eval_str</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xptr_new_context">
  <type>XPathContext</type>
  <methodname>xptr_new_context</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="dotnet_load">
  <type>int</type>
  <methodname>dotnet_load</methodname>
  <methodparam>
    <type>string</type>
    <parameter>assembly_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>datatype_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>codepage</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="debug_backtrace">
  <type>array</type>
  <methodname>debug_backtrace</methodname>
  <void/>
  <desc>debug_backtrace generates a PHP backtrace and returns this information as an associative array.  The possible returned elements are listed in the following table: </desc>
</methodsynopsis>
<methodsynopsis function="debug_print_backtrace">
  <type>void</type>
  <methodname>debug_print_backtrace</methodname>
  <void/>
  <desc>debug_print_backtrace prints a PHP backtrace. It prints the function calls, included/required files and evaled stuff. </desc>
</methodsynopsis>
<methodsynopsis function="error_log">
  <type>int</type>
  <methodname>error_log</methodname>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>message_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>destination</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extra_headers</parameter>
  </methodparam>
  <desc> Sends an error message to the web server's error log, a TCP port or to a file.  The first parameter, message, is the error message that should be logged.  The second parameter, message_type says where the message should go: error_log log types0message is sent to PHP's system logger, using the Operating System's system logging mechanism or a file, depending on what the error_log configuration directive is set to.  This is the default option. 1message is sent by email to the address in the destination parameter.  This is the only message type where the fourth parameter, extra_headers is used.  This message type uses the same internal function as mail does. 2message is sent through the PHP debugging connection.  This option is only available if remote debugging has been enabled.  In this case, the destination parameter specifies the host name or IP address and optionally, port number, of the socket receiving the debug information. 3message is appended to the file destination. </desc>
</methodsynopsis>
<methodsynopsis function="error_reporting">
  <type>int</type>
  <methodname>error_reporting</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <desc> The error_reporting function sets the error_reporting directive at runtime.  PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. </desc>
</methodsynopsis>
<methodsynopsis function="restore_error_handler">
  <type>bool</type>
  <methodname>restore_error_handler</methodname>
  <void/>
  <desc> Used after changing the error handler function using set_error_handler, to revert to the previous error handler (which could be the built-in or a user defined function). This function always returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="restore_exception_handler">
  <type>bool</type>
  <methodname>restore_exception_handler</methodname>
  <void/>
  <desc> Used after changing the exception handler function using set_exception_handler, to revert to the previous exception handler (which could be the built-in or a user defined function). This function always returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="set_error_handler">
  <type>mixed</type>
  <methodname>set_error_handler</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>error_handler</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>error_types</parameter>
  </methodparam>
  <desc> Sets a user function (error_handler) to handle errors in a script. Returns a string containing the previously defined error handler (if any), or &amp;amp;false; on error. If the previous handler was a class method, this function will return an indexed array with the class and the method name. </desc>
</methodsynopsis>
<methodsynopsis function="set_exception_handler">
  <type>string</type>
  <methodname>set_exception_handler</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>exception_handler</parameter>
  </methodparam>
  <desc> Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called. </desc>
</methodsynopsis>
<methodsynopsis function="trigger_error">
  <type>bool</type>
  <methodname>trigger_error</methodname>
  <methodparam>
    <type>string</type>
    <parameter>error_msg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>error_type</parameter>
  </methodparam>
  <desc> Used to trigger a user error condition, it can be used by in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler). It only works with the E_USER family of constants, and will default to E_USER_NOTICE. </desc>
</methodsynopsis>
<methodsynopsis function="escapeshellarg">
  <type>string</type>
  <methodname>escapeshellarg</methodname>
  <methodparam>
    <type>string</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>escapeshellarg adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument.  This function should be used to escape individual arguments to shell functions coming from user input.  The shell functions include exec, system and the backtick operator. </desc>
</methodsynopsis>
<methodsynopsis function="escapeshellcmd">
  <type>string</type>
  <methodname>escapeshellcmd</methodname>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <desc>escapeshellcmd escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands.  This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec or system functions, or to the backtick operator. </desc>
</methodsynopsis>
<methodsynopsis function="exec">
  <type>string</type>
  <methodname>exec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">output</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">return_var</parameter>
  </methodparam>
  <desc>exec executes the given command. </desc>
</methodsynopsis>
<methodsynopsis function="passthru">
  <type>void</type>
  <methodname>passthru</methodname>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">return_var</parameter>
  </methodparam>
  <desc> The passthru function is similar to the exec function in that it executes a command. This function should be used in place of exec or system when the output from the Unix command is binary data which needs to be passed directly back to the browser.  A common use for this is to execute something like the pbmplus utilities that can output an image stream directly.  By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly. </desc>
</methodsynopsis>
<methodsynopsis function="proc_close">
  <type>int</type>
  <methodname>proc_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>process</parameter>
  </methodparam>
  <desc>proc_close is similar to pclose except that it only works on processes opened by proc_open. proc_close waits for the process to terminate, and returns its exit code.  If you have open pipes to that process, you should fclose them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open. </desc>
</methodsynopsis>
<methodsynopsis function="proc_get_status">
  <type>array</type>
  <methodname>proc_get_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>process</parameter>
  </methodparam>
  <desc>proc_get_status fetches data about a process opened using proc_open. </desc>
</methodsynopsis>
<methodsynopsis function="proc_nice">
  <type>bool</type>
  <methodname>proc_nice</methodname>
  <methodparam>
    <type>int</type>
    <parameter>increment</parameter>
  </methodparam>
  <desc>proc_nice changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority. </desc>
</methodsynopsis>
<methodsynopsis function="proc_open">
  <type>resource</type>
  <methodname>proc_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>cmd</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>descriptorspec</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">pipes</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>cwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>env</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>other_options</parameter>
  </methodparam>
  <desc>proc_open is similar to popen but provides a much greater degree of control over the program execution. </desc>
</methodsynopsis>
<methodsynopsis function="proc_terminate">
  <type>int</type>
  <methodname>proc_terminate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>process</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>signal</parameter>
  </methodparam>
  <desc> Signals a process (created using proc_open) that it should terminate. proc_terminate returns immediately and does not wait for the process to terminate. </desc>
</methodsynopsis>
<methodsynopsis function="shell_exec">
  <type>string</type>
  <methodname>shell_exec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>cmd</parameter>
  </methodparam>
  <desc> This function is identical to the backtick operator. </desc>
</methodsynopsis>
<methodsynopsis function="system">
  <type>string</type>
  <methodname>system</methodname>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">return_var</parameter>
  </methodparam>
  <desc>system is just like the C version of the function in that it executes the given command and outputs the result. </desc>
</methodsynopsis>
<methodsynopsis function="exif_imagetype">
  <type>int</type>
  <methodname>exif_imagetype</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>exif_imagetype reads the first bytes of an image and checks its signature. </desc>
</methodsynopsis>
<methodsynopsis function="exif_read_data">
  <type>array</type>
  <methodname>exif_read_data</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>sections</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>arrays</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>thumbnail</parameter>
  </methodparam>
  <desc>exif_read_data reads the EXIF headers from a JPEG or  TIFF image file.  This way you can read meta data  generated by digital cameras. </desc>
</methodsynopsis>
<methodsynopsis function="exif_tagname">
  <type>string</type>
  <methodname>exif_tagname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> index The image index </desc>
</methodsynopsis>
<methodsynopsis function="exif_thumbnail">
  <type>string</type>
  <methodname>exif_thumbnail</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">height</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">imagetype</parameter>
  </methodparam>
  <desc>exif_thumbnail reads the embedded thumbnail of a  TIFF or JPEG image.  </desc>
</methodsynopsis>
<methodsynopsis function="fam_cancel_monitor">
  <type>bool</type>
  <methodname>fam_cancel_monitor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>fam_monitor</parameter>
  </methodparam>
  <desc>fam_cancel_monitor terminates monitoring on a resource previously requested using one of the fam_monitor_ functions. In addition an FAMAcknowledge event occurs. </desc>
</methodsynopsis>
<methodsynopsis function="fam_close">
  <type>void</type>
  <methodname>fam_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <desc>fam_close closes a connection to the FAM service previously opened using fam_open. </desc>
</methodsynopsis>
<methodsynopsis function="fam_monitor_collection">
  <type>resource</type>
  <methodname>fam_monitor_collection</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dirname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>depth</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mask</parameter>
  </methodparam>
  <desc>fam_monitor_collection requests monitoring for a collection of files within a directory. The actual files to be monitored are specified by a directory path in dirname, the maximum search  depth starting from this directory and a shell pattern mask restricting the file names to look for.  </desc>
</methodsynopsis>
<methodsynopsis function="fam_monitor_directory">
  <type>resource</type>
  <methodname>fam_monitor_directory</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dirname</parameter>
  </methodparam>
  <desc>fam_monitor_directory requests monitoring for a directory and all contained files. A FAM event will be generated whenever the status  of the directory (i.e. the result of function stat on  that directory) or its content (i.e. the results of readdir)  change. </desc>
</methodsynopsis>
<methodsynopsis function="fam_monitor_file">
  <type>resource</type>
  <methodname>fam_monitor_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>fam_monitor_file requests monitoring for a single file. A FAM event will be generated whenever the file status  (i.e. the result of function stat on that file)  changes. </desc>
</methodsynopsis>
<methodsynopsis function="fam_next_event">
  <type>array</type>
  <methodname>fam_next_event</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <desc>fam_next_event returns the next pending FAM event. The function will block until an event is available which can be checked for using fam_pending. </desc>
</methodsynopsis>
<methodsynopsis function="fam_open">
  <type>resource</type>
  <methodname>fam_open</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>appname</parameter>
  </methodparam>
  <desc>fam_open opens a connection to the FAM service  daemon. The optional parameter appname should  be set to a string identifying the application for logging reasons. </desc>
</methodsynopsis>
<methodsynopsis function="fam_pending">
  <type>bool</type>
  <methodname>fam_pending</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <desc>fam_pending returns &amp;amp;true; if events are available to be fetched using fam_next_event. </desc>
</methodsynopsis>
<methodsynopsis function="fam_resume_monitor">
  <type>bool</type>
  <methodname>fam_resume_monitor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>fam_monitor</parameter>
  </methodparam>
  <desc>fam_resume_monitor resumes monitoring  of a resource previously suspend using fam_suspend_monitor. </desc>
</methodsynopsis>
<methodsynopsis function="fam_suspend_monitor">
  <type>bool</type>
  <methodname>fam_suspend_monitor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fam</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>fam_monitor</parameter>
  </methodparam>
  <desc>fam_suspend_monitor temporarily suspend monitoring of a resource previously requested using one of the fam_monitor_ functions. Monitoring can later be continued using fam_resume_monitor without the need of requesting a complete new monitor. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_affected_rows">
  <type>int</type>
  <methodname>fbsql_affected_rows</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_affected_rows returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier.  If the link identifier isn't specified, the last link opened by fbsql_connect is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_autocommit">
  <type>bool</type>
  <methodname>fbsql_autocommit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>OnOff</parameter>
  </methodparam>
  <desc>fbsql_autocommit returns the current autocommit status. If the optional OnOff parameter is given the auto commit status will be changed. With OnOff set to &amp;amp;true; each statement will be committed automatically, if no errors was found. With OnOff set to &amp;amp;false; the user must commit or rollback the transaction using either fbsql_commit or fbsql_rollback. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_blob_size">
  <type>int</type>
  <methodname>fbsql_blob_size</methodname>
  <methodparam>
    <type>string</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="fbsql_change_user">
  <type>resource</type>
  <methodname>fbsql_change_user</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        database
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_change_user changes the logged in user of the current active connection, or the connection given by the optional parameter link_identifier.  If a database is specified, this will default or current database after the user has been changed.  If the new user and password authorization fails, the current connected user stays active. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_clob_size">
  <type>int</type>
  <methodname>fbsql_clob_size</methodname>
  <methodparam>
    <type>string</type>
    <parameter>clob_handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="fbsql_close">
  <type>bool</type>
  <methodname>fbsql_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier                   
       </parameter>
  </methodparam>
  <desc> Returns: &amp;amp;true; on success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_commit">
  <type>bool</type>
  <methodname>fbsql_commit</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_connect">
  <type>resource</type>
  <methodname>fbsql_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Returns a positive FrontBase link identifier on success, or an error message on failure. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_create_blob">
  <type>string</type>
  <methodname>fbsql_create_blob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>blob_data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: A resource handle to the newly created blob. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_create_clob">
  <type>string</type>
  <methodname>fbsql_create_clob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>clob_data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: A resource handle to the newly created CLOB. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_create_db">
  <type>bool</type>
  <methodname>fbsql_create_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database_options</parameter>
  </methodparam>
  <desc>fbsql_create_db attempts to create a new database named database_name on the server  associated with the specified connection  link_identifier. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_data_seek">
  <type>bool</type>
  <methodname>fbsql_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_database_password">
  <type>string</type>
  <methodname>fbsql_database_password</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        database_password
       </parameter>
  </methodparam>
  <desc>  Returns: The database password associated with the link identifier. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_database">
  <type>string</type>
  <methodname>fbsql_database</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_db_query">
  <type>resource</type>
  <methodname>fbsql_db_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: A positive FrontBase result identifier to the query result, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_db_status">
  <type>int</type>
  <methodname>fbsql_db_status</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: An integer value with the current status. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_drop_db">
  <type>bool</type>
  <methodname>fbsql_drop_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_errno">
  <type>int</type>
  <methodname>fbsql_errno</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc> Returns the error number from the last fbsql function, or 0 (zero) if no error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_error">
  <type>string</type>
  <methodname>fbsql_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc> Returns the error text from the last fbsql function, or '' (the empty string) if no error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_array">
  <type>array</type>
  <methodname>fbsql_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        result_type
       </parameter>
  </methodparam>
  <desc>  Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_assoc">
  <type>array</type>
  <methodname>fbsql_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>  Returns an associative array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows.</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_field">
  <type>object</type>
  <methodname>fbsql_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        field_offset
       </parameter>
  </methodparam>
  <desc> Returns an object containing field information. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_lengths">
  <type>array</type>
  <methodname>fbsql_fetch_lengths</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>  Returns: An array that corresponds to the lengths of each field in the last row fetched by fbsql_fetch_row, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_object">
  <type>object</type>
  <methodname>fbsql_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        result_type
       </parameter>
  </methodparam>
  <desc>  Returns an object with properties that correspond to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_fetch_row">
  <type>array</type>
  <methodname>fbsql_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>  Returns: An array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_flags">
  <type>string</type>
  <methodname>fbsql_field_flags</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>fbsql_field_flags returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_len">
  <type>int</type>
  <methodname>fbsql_field_len</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>fbsql_field_len returns the length of the specified field. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_name">
  <type>string</type>
  <methodname>fbsql_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_index</parameter>
  </methodparam>
  <desc>fbsql_field_name returns the name of the specified field index. result must be a valid result identifier and field_index is the numerical offset of the field. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_seek">
  <type>bool</type>
  <methodname>fbsql_field_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Seeks to the specified field offset.  If the next call to fbsql_fetch_field doesn't include a field offset, the field offset specified in fbsql_field_seek will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_table">
  <type>string</type>
  <methodname>fbsql_field_table</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>  Returns the name of the table that the specified field is in. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_field_type">
  <type>string</type>
  <methodname>fbsql_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>fbsql_field_type is similar to the fbsql_field_name function. The arguments are identical, but the field type is returned instead. The field type will be one of "int", "real", "string", "blob", and others as detailed in the FrontBase documentation. fbsql_field_type example";
echo "The table has the following fields "; 
while ($i "; $i++;
}
fbsql_close(); ?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_free_result">
  <type>bool</type>
  <methodname>fbsql_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>fbsql_free_result will free all memory associated with the result identifier result. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_get_autostart_info">
  <type>array</type>
  <methodname>fbsql_get_autostart_info</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_hostname">
  <type>string</type>
  <methodname>fbsql_hostname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>host_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_insert_id">
  <type>int</type>
  <methodname>fbsql_insert_id</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_insert_id returns the ID generated for an column defined as DEFAULT UNIQUE by the previous INSERT query using the given link_identifier.  If link_identifier isn't specified, the last opened link is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_list_dbs">
  <type>resource</type>
  <methodname>fbsql_list_dbs</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_list_dbs will return a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename function to traverse this result pointer. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_list_fields">
  <type>resource</type>
  <methodname>fbsql_list_fields</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_list_fields retrieves information about the given tablename. Arguments are the database name and the table name. A result pointer is returned which can be used with fbsql_field_flags, fbsql_field_len, fbsql_field_name, and fbsql_field_type. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_list_tables">
  <type>resource</type>
  <methodname>fbsql_list_tables</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>fbsql_list_tables takes a database name and returns a result pointer much like the fbsql_db_query function.  The fbsql_tablename function should be used to extract the actual table names from the result pointer. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_next_result">
  <type>bool</type>
  <methodname>fbsql_next_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets.  This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.  The function will return &amp;amp;true; if an additional result set was available or &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_num_fields">
  <type>int</type>
  <methodname>fbsql_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>fbsql_num_fields returns the number of fields in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_num_rows">
  <type>int</type>
  <methodname>fbsql_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>fbsql_num_rows returns the number of rows in a result set. This command is only valid for SELECT statements. To retrieve the number of rows returned from a INSERT, UPDATE or DELETE query, use fbsql_affected_rows. fbsql_num_rows example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_password">
  <type>string</type>
  <methodname>fbsql_password</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_pconnect">
  <type>resource</type>
  <methodname>fbsql_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Returns: A positive FrontBase persistent link identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_query">
  <type>resource</type>
  <methodname>fbsql_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>batch_size</parameter>
  </methodparam>
  <desc>fbsql_query sends a query to the currently active database on the server that's associated with the specified link identifier.  If link_identifier isn't specified, the last opened link is assumed.  If no link is open, the function tries to establish a link as if fbsql_connect was called with no arguments, and use it. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_read_blob">
  <type>string</type>
  <methodname>fbsql_read_blob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: A string containing the BLOB specified by blob_handle. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_read_clob">
  <type>string</type>
  <methodname>fbsql_read_clob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>clob_handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  Returns: A string containing the CLOB specified by clob_handle. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_result">
  <type>mixed</type>
  <methodname>fbsql_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>fbsql_result returns the contents of one cell from a FrontBase result set.  The field argument can be the field's offset, or the field's name, or the field's table dot field's name (tabledname.fieldname).  If the column name has been aliased ('select foo as bar from...'), use the alias instead of the column name. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_rollback">
  <type>bool</type>
  <methodname>fbsql_rollback</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_select_db">
  <type>bool</type>
  <methodname>fbsql_select_db</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>fbsql_select_db sets the current active database on the server that's associated with the specified link identifier.  If no link identifier is specified, the last opened link is assumed.  If no link is open, the function will try to establish a link as if fbsql_connect was called, and use it. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_set_lob_mode">
  <type>bool</type>
  <methodname>fbsql_set_lob_mode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <desc>  Returns: &amp;amp;true; on success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_set_password">
  <type>bool</type>
  <methodname>fbsql_set_password</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>old_password</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="fbsql_set_transaction">
  <type>void</type>
  <methodname>fbsql_set_transaction</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>Locking</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>Isolation</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_start_db">
  <type>bool</type>
  <methodname>fbsql_start_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database_options</parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_stop_db">
  <type>bool</type>
  <methodname>fbsql_stop_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>
        link_identifier
       </parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_tablename">
  <type>string</type>
  <methodname>fbsql_tablename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>i</parameter>
  </methodparam>
  <desc>fbsql_tablename takes a result pointer returned by the fbsql_list_tables function as well as an integer index and returns the name of a table. The fbsql_num_rows function may be used to determine the number of tables in the result pointer. fbsql_tablename example"; $i++;
}
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="fbsql_username">
  <type>string</type>
  <methodname>fbsql_username</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fbsql_warnings">
  <type>bool</type>
  <methodname>fbsql_warnings</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>
        OnOff
       </parameter>
  </methodparam>
  <desc>  Returns  &amp;amp;true; if warnings is turned on otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_add_doc_javascript">
  <type>bool</type>
  <methodname>fdf_add_doc_javascript</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script_code</parameter>
  </methodparam>
  <desc> Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it. It is strongly suggested to use '\r' for linebreaks within script_code. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_add_template">
  <type>bool</type>
  <methodname>fdf_add_template</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>newpage</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>template</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fdf_close">
  <type>bool</type>
  <methodname>fdf_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> The fdf_close function closes the FDF document.</desc>
</methodsynopsis>
<methodsynopsis function="fdf_create">
  <type>resource</type>
  <methodname>fdf_create</methodname>
  <void/>
  <desc> The fdf_create creates a new FDF document. This function is needed if one would like to populate input fields in a PDF document with data.</desc>
</methodsynopsis>
<methodsynopsis function="fdf_enum_values">
  <type>bool</type>
  <methodname>fdf_enum_values</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>userdata</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fdf_errno">
  <type>int</type>
  <methodname>fdf_errno</methodname>
  <void/>
  <desc>fdf_errno returns the error code set by the last FDF function call. This is zero  for a successfull operation or a non-zero error code on failure. A textual description may be obtained using the  fdf_error function.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_error">
  <type>string</type>
  <methodname>fdf_error</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>error_code</parameter>
  </methodparam>
  <desc>fdf_error returns a textual description for  the fdf error code given in error_code. The function uses the internal error code set by the last operation  if no error_code is given, so  fdf_error() is a convenient shortcut for  fdf_error(fdf_errno()). </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_ap">
  <type>bool</type>
  <methodname>fdf_get_ap</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>face</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The fdf_get_ap function gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file.  The possible values of face are FDFNormalAP, FDFRolloverAP and  FDFDownAP. The appearance is stored in  filename. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_attachment">
  <type>array</type>
  <methodname>fdf_get_attachment</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>savepath</parameter>
  </methodparam>
  <desc> Extracts a file uploaded by means of the "file selection" field fieldname and stores it under  savepath. savepath may be   the name of a plain file or an existing directory in which the file is to be created under its original name. Any existing file under the same name will be overwritten.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_encoding">
  <type>string</type>
  <methodname>fdf_get_encoding</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> The fdf_get_encoding returns the value of the /Encoding key. An empty string is returned if the default PDFDocEncoding/Unicode scheme is used. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_file">
  <type>string</type>
  <methodname>fdf_get_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> The fdf_set_file returns the value of the /F key. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_flags">
  <type>int</type>
  <methodname>fdf_get_flags</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>whichflags</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_opt">
  <type>mixed</type>
  <methodname>fdf_get_opt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdof</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>element</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_status">
  <type>string</type>
  <methodname>fdf_get_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> The fdf_get_status returns the value of the /STATUS key. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_value">
  <type>string</type>
  <methodname>fdf_get_value</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>which</parameter>
  </methodparam>
  <desc> The fdf_get_value function returns the value for the requested fieldname. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_get_version">
  <type>string</type>
  <methodname>fdf_get_version</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> This function will return the fdf version for the given  fdf_document, or the toolkit API version number if no parameter is given.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_header">
  <type>bool</type>
  <methodname>fdf_header</methodname>
  <void/>
  <desc> This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_next_field_name">
  <type>string</type>
  <methodname>fdf_next_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <desc> The fdf_next_field_name function returns the name of the field after the field in fieldname or the field name of the first field if the second parameter is &amp;amp;null;. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_open_string">
  <type>resource</type>
  <methodname>fdf_open_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>fdf_data</parameter>
  </methodparam>
  <desc> The fdf_open_string function reads form data  from a string. fdf_data must contain the data  as returned from a PDF form or created using fdf_create  and fdf_save_string.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_open">
  <type>resource</type>
  <methodname>fdf_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The fdf_open function opens a file with form data. This file must contain the data as returned from a PDF form or created using fdf_create and  fdf_save.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_remove_item">
  <type>bool</type>
  <methodname>fdf_remove_item</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>item</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="fdf_save_string">
  <type>string</type>
  <methodname>fdf_save_string</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <desc> The fdf_save_string function returns the FDF document as a string. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_save">
  <type>bool</type>
  <methodname>fdf_save</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The fdf_save function saves a FDF document. The resulting FDF will be written to filename.  Without a filenamefdf_save will write the FDF to the default PHP output stream. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_ap">
  <type>bool</type>
  <methodname>fdf_set_ap</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field_name</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>face</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page_number</parameter>
  </methodparam>
  <desc> The fdf_set_ap function sets the appearance of a field (i.e. the value of the /AP key). The possible values of face are FDFNormalAP, FDFRolloverAP  and FDFDownAP. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_encoding">
  <type>bool</type>
  <methodname>fdf_set_encoding</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>fdf_set_encoding sets the character encoding in FDF document fdf_document.  encoding should be the valid encoding  name. Currently the following values are supported:  "Shift-JIS", "UHC", "GBK","BigFive". An empty string resets the encoding to the default PDFDocEncoding/Unicode scheme. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_file">
  <type>bool</type>
  <methodname>fdf_set_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>target_frame</parameter>
  </methodparam>
  <desc> The fdf_set_file selects a different PDF document to display the form results in then the form it originated from. The url needs to be given as an  absolute URL. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_flags">
  <type>bool</type>
  <methodname>fdf_set_flags</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>whichFlags</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>newFlags</parameter>
  </methodparam>
  <desc> The fdf_set_flags sets certain flags of the given field fieldname. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_javascript_action">
  <type>bool</type>
  <methodname>fdf_set_javascript_action</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>trigger</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script</parameter>
  </methodparam>
  <desc>fdf_set_javascript_action sets a javascript action for the given field fieldname. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_on_import_javascript">
  <type>bool</type>
  <methodname>fdf_set_on_import_javascript</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>before_data_import</parameter>
  </methodparam>
  <desc> See also fdf_add_doc_javascript&amp;amp;listendand; fdf_set_javascript_action. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_opt">
  <type>bool</type>
  <methodname>fdf_set_opt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>element</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc> The fdf_set_opt sets options  of the given field fieldname. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_status">
  <type>bool</type>
  <methodname>fdf_set_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> The fdf_set_status sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_submit_form_action">
  <type>bool</type>
  <methodname>fdf_set_submit_form_action</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>trigger</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The fdf_set_submit_form_action sets a submit form action for the given field fieldname. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_target_frame">
  <type>bool</type>
  <methodname>fdf_set_target_frame</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>frame_name</parameter>
  </methodparam>
  <desc> Sets the target frame to display a result PDF defined with fdf_save_file in. </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_value">
  <type>bool</type>
  <methodname>fdf_set_value</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fieldname</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>isName</parameter>
  </methodparam>
  <desc> The fdf_set_value function sets the value for a field named fieldname.  The value will be stored as a string unless it is an array. In this case all array elements will be stored as a value array.  </desc>
</methodsynopsis>
<methodsynopsis function="fdf_set_version">
  <type>string</type>
  <methodname>fdf_set_version</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fdf_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> This function will set the fdf version for the given fdf_document. Some features supported by this extension are only available in newer fdf versions. For the current FDF toolkit 5.0 version  may be either '1.2', '1.3' or '1.4'. </desc>
</methodsynopsis>
<methodsynopsis function="filepro_fieldcount">
  <type>int</type>
  <methodname>filepro_fieldcount</methodname>
  <void/>
  <desc> Returns the number of fields (columns) in the opened filePro database. </desc>
</methodsynopsis>
<methodsynopsis function="filepro_fieldname">
  <type>string</type>
  <methodname>filepro_fieldname</methodname>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc> Returns the name of the field corresponding  to field_number. </desc>
</methodsynopsis>
<methodsynopsis function="filepro_fieldtype">
  <type>string</type>
  <methodname>filepro_fieldtype</methodname>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc> Returns the edit type of the field corresponding to field_number. </desc>
</methodsynopsis>
<methodsynopsis function="filepro_fieldwidth">
  <type>int</type>
  <methodname>filepro_fieldwidth</methodname>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc> Returns the width of the field corresponding to field_number. </desc>
</methodsynopsis>
<methodsynopsis function="filepro_retrieve">
  <type>string</type>
  <methodname>filepro_retrieve</methodname>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc> Returns the data from the specified location in the database. The row_number parameter must be between zero and the total number of rows minus one  (0..filepro_rowcount - 1). Likewise, field_number accepts values between zero and the total number of fields minus one (0..filepro_fieldcount - 1) </desc>
</methodsynopsis>
<methodsynopsis function="filepro_rowcount">
  <type>int</type>
  <methodname>filepro_rowcount</methodname>
  <void/>
  <desc> Returns the number of rows in the opened filePro database. </desc>
</methodsynopsis>
<methodsynopsis function="filepro">
  <type>bool</type>
  <methodname>filepro</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> This reads and verifies the map file, storing the field count and info. </desc>
</methodsynopsis>
<methodsynopsis function="basename">
  <type>string</type>
  <methodname>basename</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>suffix</parameter>
  </methodparam>
  <desc> Given a string containing a path to a file, this function will return the base name of the file. If the filename ends in suffix this will also be cut off. </desc>
</methodsynopsis>
<methodsynopsis function="chgrp">
  <type>bool</type>
  <methodname>chgrp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>group</parameter>
  </methodparam>
  <desc> Attempts to change the group of the file filename to group (specified by name or number). Only the superuser may change the group of a file arbitrarily; other users may change the group of a file to any group of which that user is a member. </desc>
</methodsynopsis>
<methodsynopsis function="chmod">
  <type>bool</type>
  <methodname>chmod</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Attempts to change the mode of the file specified by filename to that given in mode. </desc>
</methodsynopsis>
<methodsynopsis function="chown">
  <type>bool</type>
  <methodname>chown</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>user</parameter>
  </methodparam>
  <desc> Attempts to change the owner of the file filename to user user (specified by name or number).  Only the superuser may change the owner of a file. </desc>
</methodsynopsis>
<methodsynopsis function="clearstatcache">
  <type>void</type>
  <methodname>clearstatcache</methodname>
  <void/>
  <desc> When you use stat, lstat, or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache.  In these cases, you can use the clearstatcache function to clear the information that PHP caches about a file.  </desc>
</methodsynopsis>
<methodsynopsis function="copy">
  <type>bool</type>
  <methodname>copy</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc> Makes a copy of the file source to dest. &amp;amp;return.success; copy example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="delete">
  <type>void</type>
  <methodname>delete</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <desc> This is a dummy manual entry to satisfy those people who are looking for unlink or unset in the wrong place. </desc>
</methodsynopsis>
<methodsynopsis function="dirname">
  <type>string</type>
  <methodname>dirname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc> Given a string containing a path to a file, this function will return the name of the directory. </desc>
</methodsynopsis>
<methodsynopsis function="disk_free_space">
  <type>float</type>
  <methodname>disk_free_space</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition. </desc>
</methodsynopsis>
<methodsynopsis function="disk_total_space">
  <type>float</type>
  <methodname>disk_total_space</methodname>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition. </desc>
</methodsynopsis>
<methodsynopsis function="fclose">
  <type>bool</type>
  <methodname>fclose</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The file pointed to by handle is closed. </desc>
</methodsynopsis>
<methodsynopsis function="feof">
  <type>bool</type>
  <methodname>feof</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the file pointer is at EOF or an error occurs (including socket timeout); otherwise returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="fflush">
  <type>bool</type>
  <methodname>fflush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> This function forces a write of all buffered output to the  resource pointed to by the file handle handle. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fgetc">
  <type>string</type>
  <methodname>fgetc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> Returns a string containing a single character read from the file pointed to by handle. Returns &amp;amp;false; on EOF. </desc>
</methodsynopsis>
<methodsynopsis function="fgetcsv">
  <type>array</type>
  <methodname>fgetcsv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>enclosure</parameter>
  </methodparam>
  <desc> handle A valid file pointer to a file successfully opened by fopen, popen, or fsockopen. length (Optional) Must be greater than the longest line (in characters) to be found in the CSV file (allowing for trailing line-end characters). It became optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP 5.0.4 and later) the maximum line length is not limited, which is slightly slower. delimiter (Optional) Set the field delimiter (one character only). Defaults as a comma. enclosure (Optional) Set the field enclosure character (one character only). Defaults as a double quotation mark. Added in PHP 4.3.0. </desc>
</methodsynopsis>
<methodsynopsis function="fgets">
  <type>string</type>
  <methodname>fgets</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Returns a string of up to length - 1 bytes read from the file pointed to by handle. Reading ends when length - 1 bytes have been read, on a newline (which is included in the return value), or on EOF (whichever comes first). If no length is specified, the length defaults to 1k, or 1024 bytes. </desc>
</methodsynopsis>
<methodsynopsis function="fgetss">
  <type>string</type>
  <methodname>fgetss</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>allowable_tags</parameter>
  </methodparam>
  <desc> Identical to fgets, except that fgetss attempts to strip any HTML and PHP tags from the text it reads. </desc>
</methodsynopsis>
<methodsynopsis function="file_exists">
  <type>bool</type>
  <methodname>file_exists</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> On windows, use //computername/share/filename or \\computername\share\filename to check files on network shares. </desc>
</methodsynopsis>
<methodsynopsis function="file_get_contents">
  <type>string</type>
  <methodname>file_get_contents</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlen</parameter>
  </methodparam>
  <desc>  Identical to file, except that file_get_contents returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents will return &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="file_put_contents">
  <type>int</type>
  <methodname>file_put_contents</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> You can also specify the data parameter as an array (not multi-dimension arrays). This is equivalent to file_put_contents($filename, join('', $array)). </desc>
</methodsynopsis>
<methodsynopsis function="file">
  <type>array</type>
  <methodname>file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc>  Identical to readfile, except that file returns the file in an array. Each element of the array corresponds to a line in the file, with the newline still attached.  Upon failure, file returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="fileatime">
  <type>int</type>
  <methodname>fileatime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> fileatime example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="filectime">
  <type>int</type>
  <methodname>filectime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns the time the file was last changed, or &amp;amp;false; in case of an error. The time is returned as a Unix timestamp. </desc>
</methodsynopsis>
<methodsynopsis function="filegroup">
  <type>int</type>
  <methodname>filegroup</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>     Returns the group ID of the file, or &amp;amp;false; in case of an error. The group ID is returned in numerical format, use posix_getgrgid to resolve it to a group name. Upon failure, &amp;amp;false; is returned along with an error of level E_WARNING. </desc>
</methodsynopsis>
<methodsynopsis function="fileinode">
  <type>int</type>
  <methodname>fileinode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>  Returns the inode number of the file, or &amp;amp;false; in case of an error. </desc>
</methodsynopsis>
<methodsynopsis function="filemtime">
  <type>int</type>
  <methodname>filemtime</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns the time the file was last modified, or &amp;amp;false; in case of an error. The time is returned as a Unix timestamp, which is suitable for the date function. </desc>
</methodsynopsis>
<methodsynopsis function="fileowner">
  <type>int</type>
  <methodname>fileowner</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>     Returns the user ID of the owner of the file, or &amp;amp;false; in case of an error. The user ID is returned in numerical format, use posix_getpwuid to resolve it to a username. </desc>
</methodsynopsis>
<methodsynopsis function="fileperms">
  <type>int</type>
  <methodname>fileperms</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>     Returns the permissions on the file, or &amp;amp;false; in case of an error. </desc>
</methodsynopsis>
<methodsynopsis function="filesize">
  <type>int</type>
  <methodname>filesize</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>  Returns the size of the file in bytes, or &amp;amp;false; in case of an error. </desc>
</methodsynopsis>
<methodsynopsis function="filetype">
  <type>string</type>
  <methodname>filetype</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>     Returns the type of the file. Possible values are fifo, char, dir, block, link, file, and unknown. </desc>
</methodsynopsis>
<methodsynopsis function="flock">
  <type>bool</type>
  <methodname>flock</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>operation</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">wouldblock</parameter>
  </methodparam>
  <desc>flock is mandatory under Windows. </desc>
</methodsynopsis>
<methodsynopsis function="fnmatch">
  <type>bool</type>
  <methodname>fnmatch</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>fnmatch checks if the passed string would  match the given shell wildcard pattern. </desc>
</methodsynopsis>
<methodsynopsis function="fopen">
  <type>resource</type>
  <methodname>fopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>zcontext</parameter>
  </methodparam>
  <desc> The mode parameter specifies the type of access you require to the stream.  It may be any of the following: A list of possible modes for fopen  using modemodeDescription'r' Open for reading only; place the file pointer at the beginning of the file. 'r+' Open for reading and writing; place the file pointer at the beginning of the file. 'w' Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it. 'w+' Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to zero length.  If the file does not exist, attempt to create it. 'a' Open for writing only; place the file pointer at the end of  the file. If the file does not exist, attempt to create it. 'a+' Open for reading and writing; place the file pointer at the end of the file. If the file does not exist, attempt to create it. 'x' Create and open for writing only; place the file pointer at the beginning of the file.  If the file already exists, the  fopen call will fail by returning &amp;amp;false; and generating an error of level E_WARNING.  If the file does not exist, attempt to create it.  This is equivalent to specifying O_EXCL|O_CREAT flags for the underlying open(2) system call.  This option is supported in PHP 4.3.2 and later, and only works for local files. 'x+' Create and open for reading and writing; place the file pointer at the beginning of the file.  If the file already exists, the  fopen call will fail by returning &amp;amp;false; and generating an error of level E_WARNING.  If the file does not exist, attempt to create it.  This is equivalent to specifying O_EXCL|O_CREAT flags for the underlying open(2) system call.  This option is supported in PHP 4.3.2 and later, and only works for local files. </desc>
</methodsynopsis>
<methodsynopsis function="fpassthru">
  <type>int</type>
  <methodname>fpassthru</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> When using fpassthru on a binary file on Windows systems, you should make sure to open the file in binary mode by appending a b to the mode used in the call to fopen. </desc>
</methodsynopsis>
<methodsynopsis function="fputcsv">
  <type>int</type>
  <methodname>fputcsv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>fields</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>enclosure</parameter>
  </methodparam>
  <desc>fputcsv formats a line (passed as a fields array) as CSV and write it to the specified file handle. Returns the length of the written string, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="fread">
  <type>string</type>
  <methodname>fread</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="fscanf">
  <type>mixed</type>
  <methodname>fscanf</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter role="reference">...</parameter>
  </methodparam>
  <desc> The function fscanf is similar to sscanf, but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf. If only two parameters were passed to this function, the values parsed will be returned as an array. Otherwise, if optional parameters are passed, the function will return the number of assigned values. The optional parameters must be passed by reference. </desc>
</methodsynopsis>
<methodsynopsis function="fseek">
  <type>int</type>
  <methodname>fseek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <desc> Sets the file position indicator for the file referenced by handle. The new position, measured in bytes&amp;#xD; from the beginning of the file, is obtained by adding offset to the position specified by whence, whose values are defined as follows: SEEK_SET - Set position equal to offset bytes.SEEK_CUR - Set position to current location plus offset.SEEK_END - Set position to end-of-file plus offset.  (To move to a position before the end-of-file, you need to pass a negative  value in offset.)</desc>
</methodsynopsis>
<methodsynopsis function="fstat">
  <type>array</type>
  <methodname>fstat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat function except that it operates on an open file pointer instead of a filename. </desc>
</methodsynopsis>
<methodsynopsis function="ftell">
  <type>int</type>
  <methodname>ftell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> Returns the position of the file pointer referenced by handle; i.e., its offset into the file stream. </desc>
</methodsynopsis>
<methodsynopsis function="ftruncate">
  <type>bool</type>
  <methodname>ftruncate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <desc> Takes the filepointer, handle, and truncates the file to  length, size. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fwrite">
  <type>int</type>
  <methodname>fwrite</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> On systems which differentiate between binary and text files  (i.e. Windows) the file must be opened with 'b' included in fopen mode parameter. </desc>
</methodsynopsis>
<methodsynopsis function="glob">
  <type>array</type>
  <methodname>glob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The glob function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells. No tilde expansion or parameter substitution is done. </desc>
</methodsynopsis>
<methodsynopsis function="is_dir">
  <type>bool</type>
  <methodname>is_dir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is a directory. If filename is a relative filename, it will be checked relative to the current working directory. </desc>
</methodsynopsis>
<methodsynopsis function="is_executable">
  <type>bool</type>
  <methodname>is_executable</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is executable. </desc>
</methodsynopsis>
<methodsynopsis function="is_file">
  <type>bool</type>
  <methodname>is_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is a regular file. </desc>
</methodsynopsis>
<methodsynopsis function="is_link">
  <type>bool</type>
  <methodname>is_link</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is a symbolic link. </desc>
</methodsynopsis>
<methodsynopsis function="is_readable">
  <type>bool</type>
  <methodname>is_readable</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is readable. </desc>
</methodsynopsis>
<methodsynopsis function="is_uploaded_file">
  <type>bool</type>
  <methodname>is_uploaded_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd. </desc>
</methodsynopsis>
<methodsynopsis function="is_writable">
  <type>bool</type>
  <methodname>is_writable</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the filename exists and is writable.  The filename argument may be a directory name allowing you to check if a directory is writeable. </desc>
</methodsynopsis>
<methodsynopsis function="link">
  <type>bool</type>
  <methodname>link</methodname>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>link creates a hard link. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="linkinfo">
  <type>int</type>
  <methodname>linkinfo</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc>linkinfo returns the st_dev  field of the Unix C stat structure returned by the lstat  system call.  This function is used to verify if a link (pointed to by path) really exists (using the same method as the S_ISLNK macro defined in stat.h).  Returns 0 or &amp;amp;false; in case of error. </desc>
</methodsynopsis>
<methodsynopsis function="lstat">
  <type>array</type>
  <methodname>lstat</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Gathers the statistics of the file or symbolic link named by filename.  This function is identical to the stat function except that if the filename parameter is a symbolic link, the status of the symbolic link is returned, not the status of the file pointed to by the symbolic link. </desc>
</methodsynopsis>
<methodsynopsis function="mkdir">
  <type>bool</type>
  <methodname>mkdir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>recursive</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Attempts to create the directory specified by pathname. </desc>
</methodsynopsis>
<methodsynopsis function="move_uploaded_file">
  <type>bool</type>
  <methodname>move_uploaded_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>destination</parameter>
  </methodparam>
  <desc> This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination. </desc>
</methodsynopsis>
<methodsynopsis function="parse_ini_file">
  <type>array</type>
  <methodname>parse_ini_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>process_sections</parameter>
  </methodparam>
  <desc>parse_ini_file loads in the ini file specified in filename, and returns the settings in it in an associative array. By setting the last process_sections parameter to &amp;amp;true;, you get a multidimensional array, with the section names and settings included. The default for process_sections is &amp;amp;false; </desc>
</methodsynopsis>
<methodsynopsis function="pathinfo">
  <type>array</type>
  <methodname>pathinfo</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pathinfo returns an associative array containing information about path.  The following array elements are returned: dirname, basename and extension. </desc>
</methodsynopsis>
<methodsynopsis function="pclose">
  <type>int</type>
  <methodname>pclose</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>  Closes a file pointer to a pipe opened by popen. </desc>
</methodsynopsis>
<methodsynopsis function="popen">
  <type>resource</type>
  <methodname>popen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>  Opens a pipe to a process executed by forking the command given by command. </desc>
</methodsynopsis>
<methodsynopsis function="readfile">
  <type>int</type>
  <methodname>readfile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Reads a file and writes it to the output buffer. </desc>
</methodsynopsis>
<methodsynopsis function="readlink">
  <type>string</type>
  <methodname>readlink</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc>readlink does the same as the readlink C function and returns the contents of the symbolic link path or &amp;amp;false; in case of error. </desc>
</methodsynopsis>
<methodsynopsis function="realpath">
  <type>string</type>
  <methodname>realpath</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc>realpath expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path and return the canonicalized absolute pathname.  The resulting path will have no symbolic link, '/./' or '/../' components. </desc>
</methodsynopsis>
<methodsynopsis function="rename">
  <type>bool</type>
  <methodname>rename</methodname>
  <methodparam>
    <type>string</type>
    <parameter>oldname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc>  Attempts to rename oldname to newname. </desc>
</methodsynopsis>
<methodsynopsis function="rewind">
  <type>bool</type>
  <methodname>rewind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc>     Sets the file position indicator for handle to the beginning of the file stream. </desc>
</methodsynopsis>
<methodsynopsis function="rmdir">
  <type>bool</type>
  <methodname>rmdir</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dirname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc>  Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="stat">
  <type>array</type>
  <methodname>stat</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Gathers the statistics of the file named by filename.  If filename is a symbolic link, statistics are from the file itself, not the symlink.  lstat is identical to  stat except it would instead be based off the symlinks  status. </desc>
</methodsynopsis>
<methodsynopsis function="symlink">
  <type>bool</type>
  <methodname>symlink</methodname>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>symlink creates a symbolic link from the existing target with the specified name link. </desc>
</methodsynopsis>
<methodsynopsis function="tempnam">
  <type>string</type>
  <methodname>tempnam</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dir</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> Creates a file with a unique filename in the specified directory. If the directory does not exist, tempnam may generate a file in the system's temporary directory, and return the name of that.  </desc>
</methodsynopsis>
<methodsynopsis function="tmpfile">
  <type>resource</type>
  <methodname>tmpfile</methodname>
  <void/>
  <desc> Creates a temporary file with an unique name in read-write (w+) mode, returning a file handle similar to the one returned by fopen. The file is automatically removed when closed (using fclose), or when the script ends. </desc>
</methodsynopsis>
<methodsynopsis function="touch">
  <type>bool</type>
  <methodname>touch</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>time</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>atime</parameter>
  </methodparam>
  <desc> Attempts to set the access and modification time of the file named by filename to the value given by&amp;#xD; time. If the parameter time&amp;#xD; is not given, uses the present time. This is equivalent to what utime&amp;#xD; (sometimes referred to as utimes) does. If the third parameter&amp;#xD; atime is present, the access time of the given filename is set to the value of atime.  Note that the access time is always modified, regardless of the number of parameters. </desc>
</methodsynopsis>
<methodsynopsis function="umask">
  <type>int</type>
  <methodname>umask</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mask</parameter>
  </methodparam>
  <desc>umask sets PHP's umask to  mask &amp;amp; 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished. </desc>
</methodsynopsis>
<methodsynopsis function="unlink">
  <type>bool</type>
  <methodname>unlink</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Deletes filename.  Similar to the Unix C unlink() function. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="fribidi_log2vis">
  <type>string</type>
  <methodname>fribidi_log2vis</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>direction</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ftp_alloc">
  <type>bool</type>
  <methodname>ftp_alloc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>filesize</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <desc> Sends an ALLO command to the remote FTP server to  allocate space for a file to be uploaded. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_cdup">
  <type>bool</type>
  <methodname>ftp_cdup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <desc>  Changes to the parent directory. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_chdir">
  <type>bool</type>
  <methodname>ftp_chdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc>  Changes the current directory to the specified one. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_chmod">
  <type>int</type>
  <methodname>ftp_chmod</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>  Sets the permissions on the specified remote file to  mode. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_close">
  <type>bool</type>
  <methodname>ftp_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <desc>ftp_close closes the given link identifier and releases the resource. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_connect">
  <type>resource</type>
  <methodname>ftp_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc>ftp_connect opens an FTP connection to the specified host.   </desc>
</methodsynopsis>
<methodsynopsis function="ftp_delete">
  <type>bool</type>
  <methodname>ftp_delete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc>ftp_delete deletes the file specified by path from the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_exec">
  <type>bool</type>
  <methodname>ftp_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <desc> Sends a SITE EXEC command request to the FTP server.  </desc>
</methodsynopsis>
<methodsynopsis function="ftp_fget">
  <type>bool</type>
  <methodname>ftp_fget</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resumepos</parameter>
  </methodparam>
  <desc>ftp_fget retrieves remote_file from the FTP server, and writes it to the given file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_fput">
  <type>bool</type>
  <methodname>ftp_fput</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>startpos</parameter>
  </methodparam>
  <desc>ftp_fput uploads the data from a file pointer to a remote file on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_get_option">
  <type>mixed</type>
  <methodname>ftp_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> This function returns the value for the requested  option from the specified FTP connection. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_get">
  <type>bool</type>
  <methodname>ftp_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resumepos</parameter>
  </methodparam>
  <desc>ftp_get retrieves a remote file from the FTP server, and saves it into a local file.  </desc>
</methodsynopsis>
<methodsynopsis function="ftp_login">
  <type>bool</type>
  <methodname>ftp_login</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Logs in to the given FTP stream. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_mdtm">
  <type>int</type>
  <methodname>ftp_mdtm</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <desc>ftp_mdtm gets the last modified time for a remote file. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_mkdir">
  <type>string</type>
  <methodname>ftp_mkdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc>  Creates the specified directory on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nb_continue">
  <type>int</type>
  <methodname>ftp_nb_continue</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <desc>  Continues retrieving/sending a file non-blocking. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nb_fget">
  <type>int</type>
  <methodname>ftp_nb_fget</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resumepos</parameter>
  </methodparam>
  <desc>ftp_nb_fget retrieves a remote file from the FTP  server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nb_fput">
  <type>int</type>
  <methodname>ftp_nb_fput</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>startpos</parameter>
  </methodparam>
  <desc>ftp_nb_fput uploads the data from a file pointer to a remote file on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nb_get">
  <type>int</type>
  <methodname>ftp_nb_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resumepos</parameter>
  </methodparam>
  <desc>ftp_nb_get retrieves a remote file from the FTP server, and saves it into a local file.  </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nb_put">
  <type>int</type>
  <methodname>ftp_nb_put</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>startpos</parameter>
  </methodparam>
  <desc>ftp_nb_put stores a local file on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_nlist">
  <type>array</type>
  <methodname>ftp_nlist</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> ftp_stream The link identifier of the FTP connection. directory The directory to be listed. This parameter can also include arguments, eg. ftp_nlist($conn_id, "-la /your/dir"); Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters.  </desc>
</methodsynopsis>
<methodsynopsis function="ftp_pasv">
  <type>bool</type>
  <methodname>ftp_pasv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>pasv</parameter>
  </methodparam>
  <desc>ftp_pasv turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_put">
  <type>bool</type>
  <methodname>ftp_put</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>startpos</parameter>
  </methodparam>
  <desc>ftp_put stores a local file on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_pwd">
  <type>string</type>
  <methodname>ftp_pwd</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="ftp_raw">
  <type>array</type>
  <methodname>ftp_raw</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <desc> Sends an arbitrary command to the FTP server.  </desc>
</methodsynopsis>
<methodsynopsis function="ftp_rawlist">
  <type>array</type>
  <methodname>ftp_rawlist</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>recursive</parameter>
  </methodparam>
  <desc>ftp_rawlist executes the FTP  LIST command, and returns the result as an array. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_rename">
  <type>bool</type>
  <methodname>ftp_rename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>oldname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newname</parameter>
  </methodparam>
  <desc>ftp_rename renames a file or a directory on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_rmdir">
  <type>bool</type>
  <methodname>ftp_rmdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc>  Removes the specified directory on the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_set_option">
  <type>bool</type>
  <methodname>ftp_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function controls various runtime options for the specified FTP  stream. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_site">
  <type>bool</type>
  <methodname>ftp_site</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <desc>ftp_site sends the given SITE  command to the FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_size">
  <type>int</type>
  <methodname>ftp_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <desc>ftp_size returns the size of the given file in bytes. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_ssl_connect">
  <type>resource</type>
  <methodname>ftp_ssl_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc>ftp_ssl_connect opens a SSL-FTP connection to the specified host. </desc>
</methodsynopsis>
<methodsynopsis function="ftp_systype">
  <type>string</type>
  <methodname>ftp_systype</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>ftp_stream</parameter>
  </methodparam>
  <desc> Returns the system type identifier of the remove FTP server. </desc>
</methodsynopsis>
<methodsynopsis function="call_user_func_array">
  <type>mixed</type>
  <methodname>call_user_func_array</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>param_arr</parameter>
  </methodparam>
  <desc> Call a user defined function given by function, with the parameters in param_arr. For example: </desc>
</methodsynopsis>
<methodsynopsis function="call_user_func">
  <type>mixed</type>
  <methodname>call_user_func</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>parameter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Call a user defined function given by the function parameter.  Take the following: </desc>
</methodsynopsis>
<methodsynopsis function="create_function">
  <type>string</type>
  <methodname>create_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <desc> Creates an anonymous function from the parameters passed, and returns a unique name for it. Usually the args will be passed as a single quote delimited string, and this is also recommended for the code. The reason for using single quoted strings, is to protect the variable names from parsing, otherwise, if you use double quotes there will be a need to escape the variable names, e.g.  \$avar. </desc>
</methodsynopsis>
<methodsynopsis function="func_get_arg">
  <type>mixed</type>
  <methodname>func_get_arg</methodname>
  <methodparam>
    <type>int</type>
    <parameter>arg_num</parameter>
  </methodparam>
  <desc> \n"; if ($numargs &amp;gt;= 2) { echo "Second argument is: " . func_get_arg(1) . "\n"; }
}  foo (1, 2, 3);
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="func_get_args">
  <type>array</type>
  <methodname>func_get_args</methodname>
  <void/>
  <desc> \n"; if ($numargs &amp;gt;= 2) { echo "Second argument is: " . func_get_arg(1) . "\n"; } $arg_list = func_get_args(); for ($i = 0; $i \n"; }
}  foo(1, 2, 3);
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="func_num_args">
  <type>int</type>
  <methodname>func_num_args</methodname>
  <void/>
  <desc> ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="function_exists">
  <type>bool</type>
  <methodname>function_exists</methodname>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <desc> Checks the list of defined functions, both built-in (internal) and user-defined, for function_name. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="get_defined_functions">
  <type>array</type>
  <methodname>get_defined_functions</methodname>
  <void/>
  <desc> This function returns an multidimensional array containing a list of all defined functions, both built-in (internal) and user-defined. The  internal functions will be accessible via $arr["internal"], and the user defined ones using $arr["user"] (see example below). </desc>
</methodsynopsis>
<methodsynopsis function="register_shutdown_function">
  <type>void</type>
  <methodname>register_shutdown_function</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>parameter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Multiple calls to register_shutdown_function can be made, and each will be called in the same order as they were registered. If you call exit within one registered shutdown function, processing will stop completely and no other registered shutdown functions will be called. </desc>
</methodsynopsis>
<methodsynopsis function="register_tick_function">
  <type>void</type>
  <methodname>register_tick_function</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>arg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> register_tick_function example method
$object = new my_class();
register_tick_function(array(&amp;amp;$object, 'my_method'), true);
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="unregister_tick_function">
  <type>void</type>
  <methodname>unregister_tick_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="bind_textdomain_codeset">
  <type>string</type>
  <methodname>bind_textdomain_codeset</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>codeset</parameter>
  </methodparam>
  <desc> With bind_textdomain_codeset, you can set in which encoding will be messages from domain returned by gettext and similar functions. </desc>
</methodsynopsis>
<methodsynopsis function="bindtextdomain">
  <type>string</type>
  <methodname>bindtextdomain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc> The bindtextdomain function sets the path for a domain. It returns the full pathname for the domain currently being set. </desc>
</methodsynopsis>
<methodsynopsis function="dcgettext">
  <type>string</type>
  <methodname>dcgettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>category</parameter>
  </methodparam>
  <desc> This function allows you to override the current domain for a single message lookup. It also allows you to specify a category. </desc>
</methodsynopsis>
<methodsynopsis function="dcngettext">
  <type>string</type>
  <methodname>dcngettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgid1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgid2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>category</parameter>
  </methodparam>
  <desc> This function allows you to override the current domain for a single plural message lookup. It also allows you to specify a category. </desc>
</methodsynopsis>
<methodsynopsis function="dgettext">
  <type>string</type>
  <methodname>dgettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <desc> The dgettext function allows you to override the current domain for a single message lookup. </desc>
</methodsynopsis>
<methodsynopsis function="dngettext">
  <type>string</type>
  <methodname>dngettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgid1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgid2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc> The dngettext function allows you to override the current domain for a single plural message lookup. </desc>
</methodsynopsis>
<methodsynopsis function="gettext">
  <type>string</type>
  <methodname>gettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <desc> This function returns a translated string if one is found in the translation table, or the submitted message if not found. You may use the underscore character '_' as an alias to this function. </desc>
</methodsynopsis>
<methodsynopsis function="ngettext">
  <type>string</type>
  <methodname>ngettext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>msgid1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgid2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>ngettext returns correct plural form of message identified by msgid1 and msgid2 for count n. Some languages have more than one form for plural messages dependent on the count. </desc>
</methodsynopsis>
<methodsynopsis function="textdomain">
  <type>string</type>
  <methodname>textdomain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text_domain</parameter>
  </methodparam>
  <desc> This function sets the domain to search within when calls are made to gettext, usually the named after an application. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_abs">
  <type>resource</type>
  <methodname>gmp_abs</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns absolute value of a. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_add">
  <type>resource</type>
  <methodname>gmp_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Add two GMP numbers. The result will be a GMP number representing the sum of the arguments. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_and">
  <type>resource</type>
  <methodname>gmp_and</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Calculates logical AND of two GMP numbers. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_clrbit">
  <type>void</type>
  <methodname>gmp_clrbit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter role="reference">a</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Clears (sets to 0) bit index in a. The index starts at 0. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_cmp">
  <type>int</type>
  <methodname>gmp_cmp</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Returns a positive value if a &amp;gt; b, zero if a = b and a negative value if a &amp;lt; b. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_com">
  <type>resource</type>
  <methodname>gmp_com</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns the one's complement of a. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_div_q">
  <type>resource</type>
  <methodname>gmp_div_q</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>round</parameter>
  </methodparam>
  <desc> Divides a by b and returns the integer result. The result rounding is defined by the round, which can have the following values: GMP_ROUND_ZERO: The result is truncated towards 0. GMP_ROUND_PLUSINF: The result is rounded towards +infinity. GMP_ROUND_MINUSINF: The result is rounded towards -infinity. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_div_qr">
  <type>array</type>
  <methodname>gmp_div_qr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>n</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>d</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>round</parameter>
  </methodparam>
  <desc> The function divides n by d and returns array, with the first element being [n/d] (the integer result of the division) and the second being (n - [n/d] * d) (the remainder of the division). </desc>
</methodsynopsis>
<methodsynopsis function="gmp_div_r">
  <type>resource</type>
  <methodname>gmp_div_r</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>n</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>d</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>round</parameter>
  </methodparam>
  <desc> Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_divexact">
  <type>resource</type>
  <methodname>gmp_divexact</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>n</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>d</parameter>
  </methodparam>
  <desc> Divides n by d, using fast "exact division" algorithm. This function produces correct results only when it is known in advance that d divides n. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_fact">
  <type>resource</type>
  <methodname>gmp_fact</methodname>
  <methodparam>
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Calculates factorial (a!) of a. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_gcd">
  <type>resource</type>
  <methodname>gmp_gcd</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_gcdext">
  <type>array</type>
  <methodname>gmp_gcdext</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd is the greatest common divisor. Returns an array with respective elements g, s and t. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_hamdist">
  <type>int</type>
  <methodname>gmp_hamdist</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Returns the hamming distance between a and b. Both operands should be non-negative. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_init">
  <type>resource</type>
  <methodname>gmp_init</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>base</parameter>
  </methodparam>
  <desc> Creates a GMP number from an integer or string. String representation can be decimal or hexadecimal. In the latter case, the string should start with 0x. Optional parameter base is available since PHP 4.1.0. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_intval">
  <type>int</type>
  <methodname>gmp_intval</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>gmpnumber</parameter>
  </methodparam>
  <desc> This function allows to convert GMP number to integer. This function returns a useful result only if the number actually fits the PHP integer (i.e., signed long type). If you want just to print the GMP number, use gmp_strval. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_invert">
  <type>resource</type>
  <methodname>gmp_invert</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Computes the inverse of a modulo b. Returns &amp;amp;false; if an inverse does not exist. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_jacobi">
  <type>int</type>
  <methodname>gmp_jacobi</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>p</parameter>
  </methodparam>
  <desc> Computes Jacobi symbol of a and p. p should be odd and must be positive. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_legendre">
  <type>int</type>
  <methodname>gmp_legendre</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>p</parameter>
  </methodparam>
  <desc> Compute the Legendre symbol of a and p. p should be odd and must be positive. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_mod">
  <type>resource</type>
  <methodname>gmp_mod</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>n</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>d</parameter>
  </methodparam>
  <desc> Calculates n modulo d. The result is always non-negative, the sign of d is ignored. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_mul">
  <type>resource</type>
  <methodname>gmp_mul</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Multiplies a by b and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_neg">
  <type>resource</type>
  <methodname>gmp_neg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns -a. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_or">
  <type>resource</type>
  <methodname>gmp_or</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Calculates logical inclusive OR of two GMP numbers. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_perfect_square">
  <type>bool</type>
  <methodname>gmp_perfect_square</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if a is a perfect square, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_popcount">
  <type>int</type>
  <methodname>gmp_popcount</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Return the population count of a. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_pow">
  <type>resource</type>
  <methodname>gmp_pow</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>base</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>exp</parameter>
  </methodparam>
  <desc> Raise base into power exp. The case of 0^0 yields 1. exp cannot be negative. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_powm">
  <type>resource</type>
  <methodname>gmp_powm</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>base</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>exp</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>mod</parameter>
  </methodparam>
  <desc> Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_prob_prime">
  <type>int</type>
  <methodname>gmp_prob_prime</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>reps</parameter>
  </methodparam>
  <desc> If this function returns 0, a is definitely not prime. If it returns 1, then a is "probably" prime.  If it returns 2, then a is surely prime. Reasonable values of reps vary from 5 to 10 (default being 10); a higher value lowers the probability for a non-prime to pass as a "probable" prime. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_random">
  <type>resource</type>
  <methodname>gmp_random</methodname>
  <methodparam>
    <type>int</type>
    <parameter>limiter</parameter>
  </methodparam>
  <desc> Generate a random number. The number will be between zero and the number of bits per limb multiplied by limiter. If limiter is negative, negative numbers are generated. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_scan0">
  <type>int</type>
  <methodname>gmp_scan0</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <desc> Scans a, starting with bit start, towards more significant bits, until the first clear bit is found. Returns the index of the found bit. The index starts from 0. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_scan1">
  <type>int</type>
  <methodname>gmp_scan1</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <desc> Scans a, starting with bit start, towards more significant bits, until the first set bit is found. Returns the index of the found bit. If no set bit is found, -1 is returned. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_setbit">
  <type>void</type>
  <methodname>gmp_setbit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter role="reference">a</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>set_clear</parameter>
  </methodparam>
  <desc> Sets bit index in a. set_clear defines if the bit is set to 0 or 1. By default the bit is set to 1. Index starts at 0. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_sign">
  <type>int</type>
  <methodname>gmp_sign</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns 1 if a is positive, -1 if a is negative, and 0 if a is zero. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_sqrt">
  <type>resource</type>
  <methodname>gmp_sqrt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Calculates square root of a and returns the integer portion of the result. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_sqrtrem">
  <type>array</type>
  <methodname>gmp_sqrtrem</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> Returns array where first element is the integer square root of a (see also gmp_sqrt), and the second is the remainder (i.e., the difference between a and the first element squared). </desc>
</methodsynopsis>
<methodsynopsis function="gmp_strval">
  <type>string</type>
  <methodname>gmp_strval</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>gmpnumber</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>base</parameter>
  </methodparam>
  <desc> Convert GMP number to string representation in base base. The default base is 10.  Allowed values for the base are from 2 to 36. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_sub">
  <type>resource</type>
  <methodname>gmp_sub</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Subtracts b from a and returns the result. </desc>
</methodsynopsis>
<methodsynopsis function="gmp_xor">
  <type>resource</type>
  <methodname>gmp_xor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> Calculates logical exclusive OR (XOR) of two GMP numbers. </desc>
</methodsynopsis>
<methodsynopsis function="header">
  <type>void</type>
  <methodname>header</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>replace</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>http_response_code</parameter>
  </methodparam>
  <desc>header is used to send raw HTTP headers.  See the HTTP/1.1 specification for more information on HTTP headers. </desc>
</methodsynopsis>
<methodsynopsis function="headers_list">
  <type>array</type>
  <methodname>headers_list</methodname>
  <void/>
  <desc> Examples using headers_list ]]&amp;gt; this will output : string(29) "X-Powered-By: PHP/5.0.0" [1]=&amp;gt; string(19) "Set-Cookie: foo=bar" [2]=&amp;gt; string(18) "X-Sample-Test: foo" [3]=&amp;gt; string(24) "Content-type: text/plain"
} ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="headers_sent">
  <type>bool</type>
  <methodname>headers_sent</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">file</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">line</parameter>
  </methodparam>
  <desc> Examples using headers_sent link instead\n"; exit;
} ?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="setcookie">
  <type>bool</type>
  <methodname>setcookie</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>expire</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>secure</parameter>
  </methodparam>
  <desc>setcookie defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including &amp;lt;html&amp;gt; and &amp;lt;head&amp;gt; tags as well as any whitespace. If output exists prior to calling this function, setcookie will fail and return &amp;amp;false;. If setcookie successfully runs, it will return &amp;amp;true;. This does not indicate whether the user accepted the cookie. </desc>
</methodsynopsis>
<methodsynopsis function="setrawcookie">
  <type>bool</type>
  <methodname>setrawcookie</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>expire</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>secure</parameter>
  </methodparam>
  <desc>setrawcookie is exactly the same as setcookie except that the cookie value will not be automatically urlencoded when sent to the browser. </desc>
</methodsynopsis>
<methodsynopsis function="hw_array2objrec">
  <type>string</type>
  <methodname>hw_array2objrec</methodname>
  <methodparam>
    <type>array</type>
    <parameter>object_array</parameter>
  </methodparam>
  <desc> Converts an object_array into an object record. Multiple attributes like 'Title' in different languages are treated properly. </desc>
</methodsynopsis>
<methodsynopsis function="hw_changeobject">
  <type>void</type>
  <methodname>hw_changeobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>attributes</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_children">
  <type>array</type>
  <methodname>hw_children</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object ids. Each id belongs to a child of the collection with ID objectID. The array contains all children both documents and collections.</desc>
</methodsynopsis>
<methodsynopsis function="hw_childrenobj">
  <type>array</type>
  <methodname>hw_childrenobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object records. Each object record belongs to a child of the collection with ID objectID. The array contains all children both documents and collections.</desc>
</methodsynopsis>
<methodsynopsis function="hw_close">
  <type>int</type>
  <methodname>hw_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns &amp;amp;false; if connection is not a valid connection index, otherwise &amp;amp;true;.  Closes down the connection to a Hyperwave server with the given connection index. </desc>
</methodsynopsis>
<methodsynopsis function="hw_connect">
  <type>int</type>
  <methodname>hw_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Opens a connection to a Hyperwave server and returns a connection index on success, or &amp;amp;false; if the connection could not be made. Each of the arguments should be a quoted string, except for the port number. The username and password arguments are optional and can be left out. In such a case no identification with the server will be done. It is similar to identify as user anonymous. This function returns a connection index that is needed by other Hyperwave functions. You can have multiple connections open at once. Keep in mind, that the password is not encrypted. </desc>
</methodsynopsis>
<methodsynopsis function="hw_connection_info">
  <type>void</type>
  <methodname>hw_connection_info</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_cp">
  <type>int</type>
  <methodname>hw_cp</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>object_id_array</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>destination_id</parameter>
  </methodparam>
  <desc> Copies the objects with object ids as specified in the second parameter to the collection with the id destination id. </desc>
</methodsynopsis>
<methodsynopsis function="hw_deleteobject">
  <type>int</type>
  <methodname>hw_deleteobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>object_to_delete</parameter>
  </methodparam>
  <desc> Deletes the object with the given object id in the second parameter. It will delete all instances of the object. </desc>
</methodsynopsis>
<methodsynopsis function="hw_docbyanchor">
  <type>int</type>
  <methodname>hw_docbyanchor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchorID</parameter>
  </methodparam>
  <desc> Returns an th object id of the document to which anchorID belongs. </desc>
</methodsynopsis>
<methodsynopsis function="hw_docbyanchorobj">
  <type>string</type>
  <methodname>hw_docbyanchorobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchorID</parameter>
  </methodparam>
  <desc> Returns an th object record of the document to which anchorID belongs. </desc>
</methodsynopsis>
<methodsynopsis function="hw_document_attributes">
  <type>string</type>
  <methodname>hw_document_attributes</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Returns the object record of the document. </desc>
</methodsynopsis>
<methodsynopsis function="hw_document_bodytag">
  <type>string</type>
  <methodname>hw_document_bodytag</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> Returns the BODY tag of the document. If the document is an HTML document the BODY tag should be printed before the document. </desc>
</methodsynopsis>
<methodsynopsis function="hw_document_content">
  <type>string</type>
  <methodname>hw_document_content</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Returns the content of the document. If the document is an HTML document the content is everything after the BODY tag. Information from the HEAD and BODY tag is in the stored in the object record. </desc>
</methodsynopsis>
<methodsynopsis function="hw_document_setcontent">
  <type>string</type>
  <methodname>hw_document_setcontent</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Sets or replaces the content of the document. If the document is an HTML document the content is everything after the BODY tag. Information from the HEAD and BODY tag is in the stored in the object record. If you provide this information in the content of the document too, the Hyperwave server will change the object record accordingly when the document is inserted. Probably not a very good idea. If this functions fails the document will retain its old content. </desc>
</methodsynopsis>
<methodsynopsis function="hw_document_size">
  <type>int</type>
  <methodname>hw_document_size</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Returns the size in bytes of the document.</desc>
</methodsynopsis>
<methodsynopsis function="hw_dummy">
  <type>string</type>
  <methodname>hw_dummy</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msgid</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_edittext">
  <type>int</type>
  <methodname>hw_edittext</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Uploads the text document to the server. The object record of the document may not be modified while the document is edited.  This function will only works for pure text documents. It will not open a special data connection and therefore blocks the control connection during the transfer. </desc>
</methodsynopsis>
<methodsynopsis function="hw_error">
  <type>int</type>
  <methodname>hw_error</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns the last error number. If the return value is 0 no error has occurred. The error relates to the last command. </desc>
</methodsynopsis>
<methodsynopsis function="hw_errormsg">
  <type>string</type>
  <methodname>hw_errormsg</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns a string containing the last error message or 'No Error'. If &amp;amp;false; is returned, this function failed. The message relates to the last command. </desc>
</methodsynopsis>
<methodsynopsis function="hw_free_document">
  <type>int</type>
  <methodname>hw_free_document</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Frees the memory occupied by the Hyperwave document. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getanchors">
  <type>array</type>
  <methodname>hw_getanchors</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object ids with anchors of the document with object ID objectID. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getanchorsobj">
  <type>array</type>
  <methodname>hw_getanchorsobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object records with anchors of the document with object ID objectID. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getandlock">
  <type>string</type>
  <methodname>hw_getandlock</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns the object record for the object with ID objectID. It will also lock the object, so other users cannot access it until it is unlocked. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getchildcoll">
  <type>array</type>
  <methodname>hw_getchildcoll</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object ids. Each object ID belongs to a child collection of the collection with ID objectID. The function will not return child documents.</desc>
</methodsynopsis>
<methodsynopsis function="hw_getchildcollobj">
  <type>array</type>
  <methodname>hw_getchildcollobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object records. Each object records belongs to a child collection of the collection with ID objectID. The function will not return child documents. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getchilddoccoll">
  <type>array</type>
  <methodname>hw_getchilddoccoll</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns array of object ids for child documents of a collection. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getchilddoccollobj">
  <type>array</type>
  <methodname>hw_getchilddoccollobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an array of object records for child documents of a collection.</desc>
</methodsynopsis>
<methodsynopsis function="hw_getobject">
  <type>array</type>
  <methodname>hw_getobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc> Returns the object record for the object with ID objectID if the second parameter is an integer. If the second parameter is an array of integer the function will return an array of object records. In such a case the last parameter is also evaluated which is a query string. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getobjectbyquery">
  <type>array</type>
  <methodname>hw_getobjectbyquery</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max_hits</parameter>
  </methodparam>
  <desc> Searches for objects on the whole server and returns an array of object ids. The maximum number of matches is limited to  max_hits. If max_hits is set to -1 the maximum number of matches is unlimited. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getobjectbyquerycoll">
  <type>array</type>
  <methodname>hw_getobjectbyquerycoll</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max_hits</parameter>
  </methodparam>
  <desc> Searches for objects in collection with ID objectID and returns an array of object ids. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getobjectbyquerycollobj">
  <type>array</type>
  <methodname>hw_getobjectbyquerycollobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max_hits</parameter>
  </methodparam>
  <desc> Searches for objects in collection with ID objectID and returns an array of object records. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getobjectbyqueryobj">
  <type>array</type>
  <methodname>hw_getobjectbyqueryobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max_hits</parameter>
  </methodparam>
  <desc> Searches for objects on the whole server and returns an array of object records. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getparents">
  <type>array</type>
  <methodname>hw_getparents</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an indexed array of object ids. Each object id belongs to a parent of the object with ID objectID. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getparentsobj">
  <type>array</type>
  <methodname>hw_getparentsobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns an indexed array of object records plus an associated array with statistical information about the object records. The associated array is the last entry of the returned array. Each object record belongs to a parent of the object with ID objectID. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getrellink">
  <type>string</type>
  <methodname>hw_getrellink</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rootid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sourceid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>destid</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_getremote">
  <type>int</type>
  <methodname>hw_getremote</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns a remote document. Remote documents in Hyperwave notation are documents retrieved from an external source. Common remote documents are for example external web pages or queries in a database.  In order to be able to access external sources through remote documents Hyperwave introduces the HGI (Hyperwave Gateway Interface) which is similar to the CGI. Currently, only ftp, http-servers and some databases can be accessed by the HGI. Calling hw_getremote returns the document from the external source.  If you want to use this function you should be very familiar with HGIs.  You should also consider to use PHP instead of Hyperwave to access external sources. Adding database support by a Hyperwave gateway should be more difficult than doing it in PHP. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getremotechildren">
  <type>int</type>
  <methodname>hw_getremotechildren</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_record</parameter>
  </methodparam>
  <desc> Returns the children of a remote document. Children of a remote document are remote documents itself. This makes sense if a database query has to be narrowed and is explained in Hyperwave Programmers' Guide. If the number of children is 1 the function will return the document itself formatted by the Hyperwave Gateway Interface (HGI). If the number of children is greater than 1 it will return an array of object record with each maybe the input value for another call to hw_getremotechildren. Those object records are virtual and do not exist in the Hyperwave server, therefore they do not have a valid object ID. How exactly such an object record looks like is up to the HGI. If you want to use this function you should be very familiar with HGIs. You should also consider to use PHP instead of Hyperwave to access external sources. Adding database support by a Hyperwave gateway should be more difficult than doing it in PHP. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getsrcbydestobj">
  <type>array</type>
  <methodname>hw_getsrcbydestobj</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Returns the object records of all anchors pointing to the object with ID objectID. The object can either be a document or an anchor of type destination.</desc>
</methodsynopsis>
<methodsynopsis function="hw_gettext">
  <type>int</type>
  <methodname>hw_gettext</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>
        rootID/prefix
       </parameter>
  </methodparam>
  <desc> Returns the document with object ID objectID. If the document has anchors which can be inserted, they will be inserted already. The optional parameter rootID/prefix can be a string or an integer. If it is an integer it determines how links are inserted into the document. The default is 0 and will result in links that are constructed from the name of the link's destination object. This is useful for web applications. If a link points to an object with name 'internet_movie' the HTML link will be &amp;lt;A HREF="/internet_movie"&amp;gt;. The actual location of the source and destination object in the document hierarchy is disregarded. You will have to set up your web browser, to rewrite that URL to for example '/my_script.php3/internet_movie'. 'my_script.php3' will have to evaluate $PATH_INFO and retrieve the document. All links will have the prefix '/my_script.php3/'. If you do not want this you can set the optional parameter rootID/prefix to any prefix which is used instead. Is this case it has to be a string. </desc>
</methodsynopsis>
<methodsynopsis function="hw_getusername">
  <type>string</type>
  <methodname>hw_getusername</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns the username of the connection. </desc>
</methodsynopsis>
<methodsynopsis function="hw_identify">
  <type>int</type>
  <methodname>hw_identify</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Identifies as user with username and password. Identification is only valid for the current session. I do not thing this function will be needed very often. In most cases it will be easier to identify with the opening of the connection. </desc>
</methodsynopsis>
<methodsynopsis function="hw_incollections">
  <type>array</type>
  <methodname>hw_incollections</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>object_id_array</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>collection_id_array</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>return_collections</parameter>
  </methodparam>
  <desc> Checks whether a set of objects (documents or collections) specified by the object_id_array is part of the collections listed in collection_id_array. When the fourth parameter return_collections is 0, the subset of object ids that is part of the collections (i.e., the documents or collections that are children of one or more collections of collection ids or their subcollections, recursively) is returned as an array. When the fourth parameter is 1, however, the set of collections that have one or more objects of this subset as children are returned as an array. This option allows a client to, e.g., highlight the part of the collection hierarchy that contains the matches of a previous query, in a graphical overview. </desc>
</methodsynopsis>
<methodsynopsis function="hw_info">
  <type>string</type>
  <methodname>hw_info</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns information about the current connection. The returned string has the following format: &amp;lt;Serverstring&amp;gt;, &amp;lt;Host&amp;gt;, &amp;lt;Port&amp;gt;, &amp;lt;Username&amp;gt;, &amp;lt;Port of Client&amp;gt;, &amp;lt;Byte swapping&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="hw_inscoll">
  <type>int</type>
  <methodname>hw_inscoll</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>object_array</parameter>
  </methodparam>
  <desc> Inserts a new collection with attributes as in object_array into collection with object ID objectID. </desc>
</methodsynopsis>
<methodsynopsis function="hw_insdoc">
  <type>int</type>
  <methodname>hw_insdoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>parentID</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_record</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Inserts a new document with attributes as in object_record into collection with object ID parentID. This function inserts either  an object record only or an object record and a pure ascii text in text if text is given. If you want to insert a general document of any kind use hw_insertdocument instead. </desc>
</methodsynopsis>
<methodsynopsis function="hw_insertanchors">
  <type>string</type>
  <methodname>hw_insertanchors</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hwdoc</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>anchorecs</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>dest</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>urlprefixes</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_insertdocument">
  <type>int</type>
  <methodname>hw_insertdocument</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>parent_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Uploads a document into the collection with parent_id. The document has to be created before with hw_new_document. Make sure that the object record of the new document contains at least the attributes: Type, DocumentType, Title and Name. Possibly you also want to set the MimeType. The functions returns the object id of the new document or &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="hw_insertobject">
  <type>int</type>
  <methodname>hw_insertobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_rec</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Inserts an object into the server. The object can be any valid hyperwave object. See the HG-CSP documentation for a detailed information on how the parameters have to be. </desc>
</methodsynopsis>
<methodsynopsis function="hw_mapid">
  <type>int</type>
  <methodname>hw_mapid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>server_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>object_id</parameter>
  </methodparam>
  <desc> Maps a global object id on any hyperwave server, even those you did not connect to with hw_connect, onto a virtual object id. This virtual object id can then be used as any other object id, e.g. to obtain the object record with hw_getobject. The server id is the first part of the global object id (GOid) of the object which is actually the IP number as an integer. </desc>
</methodsynopsis>
<methodsynopsis function="hw_modifyobject">
  <type>int</type>
  <methodname>hw_modifyobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>object_to_change</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>remove</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>add</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> This command allows to remove, add, or modify individual attributes of an object record.  The object is specified by the Object ID object_to_change. The first array remove is a list of attributes to remove. The second array add is a list of attributes to add. In order to modify an attribute one will have to remove the old one and add a new one. hw_modifyobject will always remove the attributes before it adds attributes unless the value of the attribute to remove is not a string or array. </desc>
</methodsynopsis>
<methodsynopsis function="hw_mv">
  <type>int</type>
  <methodname>hw_mv</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>object_id_array</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>source_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>destination_id</parameter>
  </methodparam>
  <desc> Moves the objects with object ids as specified in the second parameter from the collection with id source_id to the collection with the id destination_id. If the destination id is 0 the objects will be unlinked from the source collection. If this is the last instance of that object it will be deleted. If you want to delete all instances at once, use hw_deleteobject. </desc>
</methodsynopsis>
<methodsynopsis function="hw_new_document">
  <type>int</type>
  <methodname>hw_new_document</methodname>
  <methodparam>
    <type>string</type>
    <parameter>object_record</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>document_data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>document_size</parameter>
  </methodparam>
  <desc> Returns a new Hyperwave document with document data set to document_data and object record set to object_record. The length of the  document_data has to passed in document_sizeThis function does not insert the document into the Hyperwave server. </desc>
</methodsynopsis>
<methodsynopsis function="hw_objrec2array">
  <type>array</type>
  <methodname>hw_objrec2array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>object_record</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>
        format
       </parameter>
  </methodparam>
  <desc> Converts an object_record into an object array. The keys of the resulting array are the attributes names. Multi-value attributes like 'Title' in different languages form its own array. The keys of this array are the left part to the colon of the attribute value. This left part must be two characters long. Other multi-value attributes without a prefix form an indexed array. If the optional parameter is missing the  attributes 'Title', 'Description' and 'Keyword' are treated as language attributes and the attributes 'Group', 'Parent' and 'HtmlAttr' as non-prefixed multi-value attributes. By passing an array holding the type for each attribute you can alter this behaviour. The array is an associated array with the attribute name as its key and the value being one of HW_ATTR_LANG or HW_ATTR_NONE. </desc>
</methodsynopsis>
<methodsynopsis function="hw_output_document">
  <type>int</type>
  <methodname>hw_output_document</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hw_document</parameter>
  </methodparam>
  <desc> Prints the document without the BODY tag. </desc>
</methodsynopsis>
<methodsynopsis function="hw_pconnect">
  <type>int</type>
  <methodname>hw_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Returns a connection index on success, or &amp;amp;false; if the connection could not be made.  Opens a persistent connection to a Hyperwave server. Each of the arguments should be a quoted string, except for the port number. The username and password arguments are optional and can be left out. In such a case no identification with the server will be done. It is similar to identify as user anonymous. This function returns a connection index that is needed by other Hyperwave functions. You can have multiple persistent connections open at once.</desc>
</methodsynopsis>
<methodsynopsis function="hw_pipedocument">
  <type>int</type>
  <methodname>hw_pipedocument</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>url_prefixes</parameter>
  </methodparam>
  <desc> Returns the Hyperwave document with object ID objectID. If the document has anchors which can be inserted, they will have been inserted already. The document will be transferred via a special data connection which does not block the control connection.</desc>
</methodsynopsis>
<methodsynopsis function="hw_root">
  <type>int</type>
  <methodname>hw_root</methodname>
  <methodparam>
    <parameter/>
  </methodparam>
  <desc> Returns the object ID of the hyperroot collection. Currently this is always 0. The child collection of the hyperroot is the root collection of the connected server. </desc>
</methodsynopsis>
<methodsynopsis function="hw_setlinkroot">
  <type>void</type>
  <methodname>hw_setlinkroot</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rootid</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_stat">
  <type>string</type>
  <methodname>hw_stat</methodname>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="hw_unlock">
  <type>int</type>
  <methodname>hw_unlock</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>objectID</parameter>
  </methodparam>
  <desc> Unlocks a document, so other users regain access. </desc>
</methodsynopsis>
<methodsynopsis function="hw_who">
  <type>int</type>
  <methodname>hw_who</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns an array of users currently logged into the Hyperwave server. Each entry in this array is an array itself containing the elements id, name, system, onSinceDate, onSinceTime, TotalTime and self. 'self' is 1 if this entry belongs to the user who initiated the request. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_attribute-&gt;key">
  <type>string</type>
  <methodname>hw_api_attribute-&gt;key</methodname>
  <void/>
  <desc> Returns the name of the attribute. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_attribute-&gt;langdepvalue">
  <type>string</type>
  <methodname>hw_api_attribute-&gt;langdepvalue</methodname>
  <methodparam>
    <type>string</type>
    <parameter>language</parameter>
  </methodparam>
  <desc> Returns the value in the given language of the attribute. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_attribute-&gt;value">
  <type>string</type>
  <methodname>hw_api_attribute-&gt;value</methodname>
  <void/>
  <desc> Returns the value of the attribute. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_attribute-&gt;values">
  <type>array</type>
  <methodname>hw_api_attribute-&gt;values</methodname>
  <void/>
  <desc> Returns all values of the attribute as an array of strings. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_attribute">
  <type>HW_API_Attribute</type>
  <methodname>hw_api_attribute</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Creates a new instance of hw_api_attribute with the given name and value. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;checkin">
  <type>bool</type>
  <methodname>hw_api-&gt;checkin</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function checks in an object or a whole hierarchy of objects. The parameters array contains the required element 'objectIdentifier' and the optional element 'version', 'comment', 'mode' and 'objectQuery'. 'version' sets the version of the object. It consists of the major and minor version separated by a period. If the version is not set, the minor version is incremented. 'mode' can be one of the following values: HW_API_CHECKIN_NORMAL Checks in and commits the object. The object must be a document. HW_API_CHECKIN_RECURSIVE If the object to check in is a collection, all children will be checked in recursively if they are documents. Trying to check in a collection would result in an error. HW_API_CHECKIN_FORCE_VERSION_CONTROL Checks in an object even if it is not under version control. HW_API_CHECKIN_REVERT_IF_NOT_CHANGED Check if the new version is different from the last version. Unless this is the case the object will be checked in. HW_API_CHECKIN_KEEP_TIME_MODIFIED Keeps the time modified from the most recent object. HW_API_CHECKIN_NO_AUTO_COMMIT The object is not automatically committed on check-in. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;checkout">
  <type>bool</type>
  <methodname>hw_api-&gt;checkout</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function checks out an object or a whole hierarchy of objects. The parameters array contains the required element 'objectIdentifier' and the optional element 'version', 'mode' and 'objectQuery'. 'mode' can be one of the following values: HW_API_CHECKIN_NORMAL Checks out an object. The object must be a document. HW_API_CHECKIN_RECURSIVE If the object to check out is a collection, all children will be checked out recursively if they are documents. Trying to check out a collection would result in an error. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;children">
  <type>array</type>
  <methodname>hw_api-&gt;children</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves the children of a collection or the attributes of a document. The children can be further filtered by specifying an object query. The parameter array contains the required elements 'objectIdentifier' and the optional elements 'attributeSelector' and 'objectQuery'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_content-&gt;mimetype">
  <type>string</type>
  <methodname>hw_api_content-&gt;mimetype</methodname>
  <void/>
  <desc> Returns the mimetype of the content. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_content-&gt;read">
  <type>string</type>
  <methodname>hw_api_content-&gt;read</methodname>
  <methodparam>
    <type>string</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam>
    <type>integer</type>
    <parameter>len</parameter>
  </methodparam>
  <desc> Reads len bytes from the content into the given buffer. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;content">
  <type>HW_API_Content</type>
  <methodname>hw_api-&gt;content</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function returns the content of a document as an object of type hw_api_content. The parameter array contains the required elements 'objectidentifier' and the optional element 'mode'. The mode can be one of the constants HW_API_CONTENT_ALLLINKS, HW_API_CONTENT_REACHABLELINKS or  HW_API_CONTENT_PLAIN. HW_API_CONTENT_ALLLINKS means to insert all  anchors even if the destination is not reachable.  HW_API_CONTENT_REACHABLELINKS tells hw_api_content to insert only reachable links and HW_API_CONTENT_PLAIN will lead to  document without any links. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;copy">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;copy</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function will make a physical copy including the content if it exists and returns the new object or an error object. The parameter array contains the required elements 'objectIdentifier' and 'destinationParentIdentifier'. The optional parameter is 'attributeSelector'` </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;dbstat">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;dbstat</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;dcstat">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;dcstat</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;dstanchors">
  <type>array</type>
  <methodname>hw_api-&gt;dstanchors</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves all destination anchors of an object. The parameter array contains the required element 'objectIdentifier' and the optional elements 'attributeSelector' and 'objectQuery'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;dstofsrcanchor">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;dstofsrcanchor</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves the destination object pointed by the specified source anchors. The destination object can either be a destination anchor or a whole document. The parameters array contains the required element 'objectIdentifier' and the optional element 'attributeSelector'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_error-&gt;count">
  <type>int</type>
  <methodname>hw_api_error-&gt;count</methodname>
  <void/>
  <desc> Returns the number of error reasons. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_error-&gt;reason">
  <type>HW_API_Reason</type>
  <methodname>hw_api_error-&gt;reason</methodname>
  <void/>
  <desc> Returns the first error reason. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;find">
  <type>array</type>
  <methodname>hw_api-&gt;find</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This functions searches for objects either by executing a key or/and full text query. The found objects can further be filtered by an optional object query. They are sorted by their importance. The second search operation is relatively slow and its result can be limited to a certain number of hits. This allows to perform an incremental search, each returning just a subset of all found documents, starting at a given index. The parameter array contains the 'keyquery' or/and 'fulltextquery' depending on who you would like to search. Optional parameters are 'objectquery', 'scope', 'languages' and 'attributeselector'. In case of an incremental search the optional parameters 'startIndex', numberOfObjectsToGet' and 'exactMatchUnit' can be passed. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;ftstat">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;ftstat</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hwapi_hgcsp">
  <type>HW_API</type>
  <methodname>hwapi_hgcsp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc> Opens a connection to the Hyperwave server on host hostname. The protocol used is HGCSP. If you do not pass a port number, 418 is used. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;hwstat">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;hwstat</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;identify">
  <type>bool</type>
  <methodname>hw_api-&gt;identify</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Logs into the Hyperwave Server. The parameter array must contain the elements 'username' and 'password'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;info">
  <type>array</type>
  <methodname>hw_api-&gt;info</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;insert">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;insert</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Insert a new object. The object type can be user, group, document or anchor. Depending on the type other object attributes has to be set. The parameter array contains the required elements 'object' and 'content' (if the object is a document) and the optional parameters 'parameters', 'mode' and 'attributeSelector'. The 'object' must contain all attributes of the object. 'parameters' is an object as well holding further attributes like the destination (attribute key is 'Parent'). 'content' is the content of the document. 'mode' can be a combination of the following flags: HW_API_INSERT_NORMAL The object in inserted into the server. HW_API_INSERT_FORCE_VERSION_CONTROLHW_API_INSERT_AUTOMATIC_CHECKOUTHW_API_INSERT_PLAINHW_API_INSERT_KEEP_TIME_MODIFIEDHW_API_INSERT_DELAY_INDEXING</desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;insertanchor">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;insertanchor</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function is a shortcut for hwapi_insert. It inserts an object of type anchor and sets some of the attributes required for an anchor. The parameter array contains the required elements 'object' and 'documentIdentifier' and the optional elements 'destinationIdentifier', 'parameter', 'hint' and 'attributeSelector'. The 'documentIdentifier' specifies the document where the anchor shall be inserted. The target of the anchor is set in 'destinationIdentifier' if it already exists. If the target does not exists the element 'hint' has to be set to the name of  object which is supposed to be inserted later. Once it is inserted the anchor target is resolved automatically. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;insertcollection">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;insertcollection</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function is a shortcut for hwapi_insert. It inserts an object of type collection and sets some of the attributes required for a collection. The parameter array contains the required elements 'object' and 'parentIdentifier' and the optional elements 'parameter' and 'attributeSelector'. See hwapi_insert for the meaning of each element. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;insertdocument">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;insertdocument</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function is a shortcut for hwapi_insert. It inserts an object with content and sets some of the attributes required for a document. The parameter array contains the required elements 'object', 'parentIdentifier' and 'content' and the optional elements 'mode', 'parameter' and 'attributeSelector'. See hwapi_insert for the meaning of each element. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;link">
  <type>bool</type>
  <methodname>hw_api-&gt;link</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Creates a link to an object. Accessing this link is like accessing the object to links points to. The parameter array contains the required elements 'objectIdentifier' and 'destinationParentIdentifier'. 'destinationParentIdentifier' is the target collection. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;lock">
  <type>bool</type>
  <methodname>hw_api-&gt;lock</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Locks an object for exclusive editing by the user calling this function. The object can be only unlocked by this user or the system user.  The parameter array contains the required element 'objectIdentifier' and the optional parameters 'mode' and 'objectquery'. 'mode' determines how an object is locked. HW_API_LOCK_NORMAL means,  an object is locked until it is unlocked. HW_API_LOCK_RECURSIVE  is only valid for collection and locks all objects within the collection and possible subcollections. HW_API_LOCK_SESSION means, an  object is locked only as long as the session is valid. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;move">
  <type>bool</type>
  <methodname>hw_api-&gt;move</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api_content">
  <type>HW_API_Content</type>
  <methodname>hw_api_content</methodname>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mimetype</parameter>
  </methodparam>
  <desc> Creates a new content object from the string content. The mimetype is set to mimetype. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;assign">
  <type>bool</type>
  <methodname>hw_api_object-&gt;assign</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Clones the attributes of an object. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;attreditable">
  <type>bool</type>
  <methodname>hw_api_object-&gt;attreditable</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;count">
  <type>int</type>
  <methodname>hw_api_object-&gt;count</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;insert">
  <type>bool</type>
  <methodname>hw_api_object-&gt;insert</methodname>
  <methodparam>
    <type>HW_API_Attribute</type>
    <parameter>attribute</parameter>
  </methodparam>
  <desc> Adds an attribute to the object. Returns &amp;amp;true; on success and otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object">
  <type>hw_api_object</type>
  <methodname>hw_api_object</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;remove">
  <type>bool</type>
  <methodname>hw_api_object-&gt;remove</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Removes the attribute with the given name. Returns &amp;amp;true; on success and otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;title">
  <type>string</type>
  <methodname>hw_api_object-&gt;title</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api_object-&gt;value">
  <type>string</type>
  <methodname>hw_api_object-&gt;value</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the value of the attribute with the given name or &amp;amp;false; if an error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;object">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;object</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function retrieves the attribute information of an object of any version. It will not return the document content. The parameter array contains the required elements 'objectIdentifier' and the optional elements 'attributeSelector' and 'version'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;objectbyanchor">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;objectbyanchor</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> This function retrieves an object the specified anchor belongs to. The parameter array contains the required element 'objectIdentifier' and the optional element 'attributeSelector'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;parents">
  <type>array</type>
  <methodname>hw_api-&gt;parents</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves the parents of an object. The parents can be further filtered by specifying an object query. The parameter array contains the required elements 'objectidentifier' and the optional elements 'attributeselector' and 'objectquery'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_reason-&gt;description">
  <type>string</type>
  <methodname>hw_api_reason-&gt;description</methodname>
  <void/>
  <desc> Returns the description of a reason </desc>
</methodsynopsis>
<methodsynopsis function="hw_api_reason-&gt;type">
  <type>HW_API_Reason</type>
  <methodname>hw_api_reason-&gt;type</methodname>
  <void/>
  <desc> Returns the type of a reason. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;remove">
  <type>bool</type>
  <methodname>hw_api-&gt;remove</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Removes an object from the specified parent. Collections will be removed recursively. You can pass an optional object query to remove only those objects which match the query. An object will be deleted physically if it is the last instance. The parameter array contains the required elements 'objectidentifier' and 'parentidentifier'. If you want to remove a user or group 'parentidentifier' can be skipped. The optional parameter 'mode' determines how the deletion is performed. In normal mode the object will not be removed physically until all instances are removed. In physical mode all instances of the object will be deleted immediately. In removelinks mode all references to and from the objects will be deleted as well. In nonrecursive the deletion is not performed recursive. Removing a collection which is not empty will cause an error. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;replace">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;replace</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Replaces the attributes and the content of an object The parameter array contains the required elements 'objectIdentifier' and 'object' and the optional parameters 'content', 'parameters', 'mode' and 'attributeSelector'. 'objectIdentifier' contains the object to be replaced. 'object' contains the new object. 'content' contains the new content. 'parameters' contain extra information for HTML documents. HTML_Language is the letter abbreviation of the language of the title. HTML_Base sets the base attribute of the HTML document. 'mode' can be a combination of the following flags: HW_API_REPLACE_NORMAL The object on the server is replace with the object passed. HW_API_REPLACE_FORCE_VERSION_CONTROLHW_API_REPLACE_AUTOMATIC_CHECKOUTHW_API_REPLACE_AUTOMATIC_CHECKINHW_API_REPLACE_PLAINHW_API_REPLACE_REVERT_IF_NOT_CHANGEDHW_API_REPLACE_KEEP_TIME_MODIFIED</desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;setcommittedversion">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;setcommittedversion</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Commits a version of a document. The committed version is the one which is visible to users with read access. By default the last version is the committed version. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;srcanchors">
  <type>array</type>
  <methodname>hw_api-&gt;srcanchors</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves all source anchors of an object. The parameter array contains the required element 'objectIdentifier' and the optional elements 'attributeSelector' and 'objectQuery'. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;srcsofdst">
  <type>array</type>
  <methodname>hw_api-&gt;srcsofdst</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Retrieves all the source anchors pointing to the specified destination. The destination object can either be a destination anchor or a whole document. The parameters array contains the required element 'objectIdentifier' and the optional element 'attributeSelector' and 'objectQuery'. The function returns an array of objects or an error. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;unlock">
  <type>bool</type>
  <methodname>hw_api-&gt;unlock</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc> Unlocks a locked object. Only the user who has locked the object and the system user may unlock an object. The parameter array contains the required element 'objectIdentifier' and the optional parameters 'mode' and 'objectquery'. The meaning of 'mode' is the same as in function hwapi_lock. </desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;user">
  <type>hw_api_object</type>
  <methodname>hw_api-&gt;user</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="hw_api-&gt;userlist">
  <type>array</type>
  <methodname>hw_api-&gt;userlist</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameter</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="ibase_add_user">
  <type>bool</type>
  <methodname>ibase_add_user</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>first_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>middle_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>last_name</parameter>
  </methodparam>
  <desc> PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_affected_rows">
  <type>int</type>
  <methodname>ibase_affected_rows</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> This function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the transaction context specified by link_identifier. If link_identifier is a connection resource, its default transaction is used. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_backup">
  <type>mixed</type>
  <methodname>ibase_backup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>source_db</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest_file</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>verbose</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_blob_add">
  <type>bool</type>
  <methodname>ibase_blob_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>ibase_blob_add adds data into a blob created with ibase_blob_create. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_cancel">
  <type>bool</type>
  <methodname>ibase_blob_cancel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <desc> This function will discard a BLOB created by ibase_create_blob if it has not yet been closed by ibase_blob_close. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_close">
  <type>mixed</type>
  <methodname>ibase_blob_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <desc> This function closes a BLOB that has either been opened for reading by ibase_open_blob or has been opened for writing by ibase_create_blob. If the BLOB was being read, this function returns &amp;amp;true; on success, if the BLOB was being written to, this function returns a string containing the BLOB id that has been assigned to it by the database. On failure, this function returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_create">
  <type>resource</type>
  <methodname>ibase_blob_create</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>ibase_blob_create creates a new BLOB for filling with data. It returns a BLOB handle for later use with ibase_blob_add or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_echo">
  <type>bool</type>
  <methodname>ibase_blob_echo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>blob_id</parameter>
  </methodparam>
  <desc> This function opens a BLOB for reading and sends its contents directly  to standard output (the browser, in most cases). &amp;amp;return.success;      </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_get">
  <type>string</type>
  <methodname>ibase_blob_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>blob_handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc> This function returns at most len bytes from a BLOB  that has been opened for reading by ibase_blob_open. Returns &amp;amp;false; on failure. BLOB_VALUE); $blob_hndl = ibase_blob_open($data-&amp;gt;BLOB_VALUE); echo         ibase_blob_get($blob_hndl, $blob_data[0]);
?&amp;gt;
]]&amp;gt; Whilst this example doesn't do much more than a 'ibase_blob_echo($data-&amp;gt;BLOB_VALUE)' would do,  it does show you how to get information into a $variable to manipulate as you please.  </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_import">
  <type>string</type>
  <methodname>ibase_blob_import</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>file_handle</parameter>
  </methodparam>
  <desc> This function creates a BLOB, reads an entire file into it, closes it and  returns the assigned BLOB id. The file handle is a handle returned by fopen. Returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_info">
  <type>array</type>
  <methodname>ibase_blob_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>blob_id</parameter>
  </methodparam>
  <desc> Returns an array containing information about a BLOB. The information returned consists of the length of the BLOB, the number of segments it contains, the size of the largest segment, and whether it is a stream BLOB or a segmented BLOB. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_blob_open">
  <type>resource</type>
  <methodname>ibase_blob_open</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>blob_id</parameter>
  </methodparam>
  <desc>ibase_blob_open opens an existing BLOB for reading. It returns a BLOB handle for later use with ibase_blob_get or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_close">
  <type>bool</type>
  <methodname>ibase_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc> Closes the link to an InterBase database that's associated with a connection id returned from ibase_connect. If the connection id is omitted, the last opened link is assumed. Default transaction on link is committed, other transactions are rolled back. &amp;amp;return.success;  </desc>
</methodsynopsis>
<methodsynopsis function="ibase_commit_ret">
  <type>bool</type>
  <methodname>ibase_commit_ret</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_or_trans_identifier</parameter>
  </methodparam>
  <desc> If called without an argument, this function commits the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be committed. If the argument is a transaction identifier, the corresponding transaction will be committed. The transaction context will be retained, so statements executed from within this transaction will not be invalidated. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_commit">
  <type>bool</type>
  <methodname>ibase_commit</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_or_trans_identifier</parameter>
  </methodparam>
  <desc> If called without an argument, this function commits the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be committed. If the argument is a transaction identifier, the corresponding transaction will be committed. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_connect">
  <type>resource</type>
  <methodname>ibase_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>buffers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>dialect</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>role</parameter>
  </methodparam>
  <desc> Establishes a connection to an InterBase server. The database argument has to be a valid path to database file on the server it resides on. If the server is not local, it must be prefixed with either 'hostname:' (TCP/IP), '//hostname/' (NetBEUI) or 'hostname@' (IPX/SPX), depending on the connection protocol used. username and password can also be specified with PHP configuration directives ibase.default_user and ibase.default_password. charset is the default character set for a database. buffers is the number of database buffers to allocate for the server-side cache. If 0 or omitted, server chooses its own default. dialect selects the default SQL dialect for any statement executed within a connection, and it defaults to the highest one supported by client libraries. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_db_info">
  <type>string</type>
  <methodname>ibase_db_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>action</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>argument</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_delete_user">
  <type>bool</type>
  <methodname>ibase_delete_user</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <desc> PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_drop_db">
  <type>bool</type>
  <methodname>ibase_drop_db</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> This functions drops a database that was opened by either ibase_connect or ibase_pconnect. The database is closed and deleted from the server. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_errcode">
  <type>int</type>
  <methodname>ibase_errcode</methodname>
  <void/>
  <desc> Returns the error code that resulted from the most recent InterBase function call. Returns &amp;amp;false; if no error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_errmsg">
  <type>string</type>
  <methodname>ibase_errmsg</methodname>
  <void/>
  <desc> See also ibase_errcode. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_execute">
  <type>resource</type>
  <methodname>ibase_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>bind_arg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Execute a query prepared by ibase_prepare. If  the query raises an error, returns &amp;amp;false;. If it is successful and  there is a (possibly empty) result set (such as with a SELECT query),  returns a result identifier. If the query was successful and there were  no results, returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_fetch_assoc">
  <type>array</type>
  <methodname>ibase_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fetch_flag</parameter>
  </methodparam>
  <desc>ibase_fetch_assoc returns an associative array that corresponds to the fetched row.  Subsequent calls will return  the next row in the result set, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_fetch_object">
  <type>object</type>
  <methodname>ibase_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fetch_flag</parameter>
  </methodparam>
  <desc> Fetches a row as a pseudo-object from a result_id obtained either by ibase_query or ibase_execute. email . "\n"; } ibase_close($dbh);
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_fetch_row">
  <type>array</type>
  <methodname>ibase_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fetch_flag</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_field_info">
  <type>array</type>
  <methodname>ibase_field_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc> Returns an array with information about a field after a select query has been run. The array is in the form of name, alias, relation, length, type. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_free_event_handler">
  <type>bool</type>
  <methodname>ibase_free_event_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>event</parameter>
  </methodparam>
  <desc> This function causes the registered event handler specified by  event to be cancelled. The callback function will no longer be called for the events it was registered to handle. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_free_query">
  <type>bool</type>
  <methodname>ibase_free_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>query</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_free_result">
  <type>bool</type>
  <methodname>ibase_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_gen_id">
  <type>int</type>
  <methodname>ibase_gen_id</methodname>
  <methodparam>
    <type>string</type>
    <parameter>generator</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>increment</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_maintain_db">
  <type>bool</type>
  <methodname>ibase_maintain_db</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>action</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>argument</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_modify_user">
  <type>bool</type>
  <methodname>ibase_modify_user</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>first_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>middle_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>last_name</parameter>
  </methodparam>
  <desc> PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_name_result">
  <type>bool</type>
  <methodname>ibase_name_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements. &amp;amp;return.success; ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_num_fields">
  <type>int</type>
  <methodname>ibase_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Returns an integer containing the number of fields in a result set. ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_num_params">
  <type>int</type>
  <methodname>ibase_num_params</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>query</parameter>
  </methodparam>
  <desc> This function returns the number of parameters in the prepared query specified by query. This is the number of binding arguments that must be present when calling ibase_execute. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_param_info">
  <type>array</type>
  <methodname>ibase_param_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param_number</parameter>
  </methodparam>
  <desc> Returns an array with information about a parameter after a  query has been prepared. The array is in the form of name, alias, relation, length, type. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_pconnect">
  <type>resource</type>
  <methodname>ibase_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>buffers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>dialect</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>role</parameter>
  </methodparam>
  <desc>ibase_pconnect acts very much like ibase_connect with two major differences. First, when connecting, the function will first try to find a (persistent) link that's already opened with the same parameters. If one is found, an identifier for it will be returned instead of opening a new connection. Second, the connection to the InterBase server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (ibase_close will not close links established by ibase_pconnect). This type of link is therefore called 'persistent'. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_prepare">
  <type>resource</type>
  <methodname>ibase_prepare</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_query">
  <type>resource</type>
  <methodname>ibase_query</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>bind_args</parameter>
  </methodparam>
  <desc> ibase_query example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_restore">
  <type>mixed</type>
  <methodname>ibase_restore</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>source_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest_db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>verbose</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_rollback_ret">
  <type>bool</type>
  <methodname>ibase_rollback_ret</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_or_trans_identifier</parameter>
  </methodparam>
  <desc> If called without an argument, this function rolls back the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be rolled back. If the argument is a transaction identifier, the corresponding transaction will be rolled back. The transaction context will be retained, so statements executed from within this transaction will not be invalidated. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_rollback">
  <type>bool</type>
  <methodname>ibase_rollback</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_or_trans_identifier</parameter>
  </methodparam>
  <desc> If called without an argument, this function rolls back the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be rolled back. If the argument is a transaction identifier, the corresponding transaction will be rolled back. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ibase_server_info">
  <type>string</type>
  <methodname>ibase_server_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>action</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_service_attach">
  <type>resource</type>
  <methodname>ibase_service_attach</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dba_username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dba_password</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_service_detach">
  <type>bool</type>
  <methodname>ibase_service_detach</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>service_handle</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ibase_set_event_handler">
  <type>resource</type>
  <methodname>ibase_set_event_handler</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>event_handler</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>event_name1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>event_name2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> This function registers a PHP user function as event handler for the specified events. The callback is called with the event name and the link resource as arguments whenever one of the specified events is posted by the database. The callback must return &amp;amp;false; if the event handler should be canceled. Any other return value is ignored. This function accepts up to 15 event arguments. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_timefmt">
  <type>int</type>
  <methodname>ibase_timefmt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>columntype</parameter>
  </methodparam>
  <desc> Sets the format of timestamp, date or time type columns returned from queries. Internally, the columns are formatted by c-function strftime(), so refer to its documentation regarding to the format of the string. columntype is one of the constants IBASE_TIMESTAMP, IBASE_DATE and IBASE_TIME. If omitted, defaults to IBASE_TIMESTAMP for backwards compatibility. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_trans">
  <type>resource</type>
  <methodname>ibase_trans</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>trans_args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Begins a transaction. </desc>
</methodsynopsis>
<methodsynopsis function="ibase_wait_event">
  <type>string</type>
  <methodname>ibase_wait_event</methodname>
  <methodparam>
    <type>string</type>
    <parameter>event_name1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>event_name2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> This function suspends execution of the script until one of the specified events is posted by the database. The name of the event that was posted is returned. This function accepts up to 15 event arguments. </desc>
</methodsynopsis>
<methodsynopsis function="db2_autocommit">
  <type>mixed</type>
  <methodname>db2_autocommit</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets or gets the AUTOCOMMIT behavior of the specified connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="db2_bind_param">
  <type>bool</type>
  <methodname>db2_bind_param</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>long</type>
    <parameter>parameter-number</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>variable-name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>long</type>
    <parameter>parameter-type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>long</type>
    <parameter>data-type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>long</type>
    <parameter>precision</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>long</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Binds a PHP variable to an SQL statement parameter in a statement resource returned by db2_prepare. This function gives you more control over the parameter type, data type, precision, and scale for the parameter than simply passing the variable as part of the optional input array to db2_execute. </desc>
</methodsynopsis>
<methodsynopsis function="db2_close">
  <type>bool</type>
  <methodname>db2_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> This function closes a DB2 client connection created with db2_connect and returns the corresponding resources to the database server. </desc>
</methodsynopsis>
<methodsynopsis function="db2_column_privileges">
  <type>resource</type>
  <methodname>db2_column_privileges</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table-name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column-name</parameter>
  </methodparam>
  <desc> Returns a result set listing the columns and associated privileges for a table. </desc>
</methodsynopsis>
<methodsynopsis function="db2_columns">
  <type>resource</type>
  <methodname>db2_columns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table-name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column-name</parameter>
  </methodparam>
  <desc> Returns a result set listing the columns and associated metadata for a table. </desc>
</methodsynopsis>
<methodsynopsis function="db2_commit">
  <type>bool</type>
  <methodname>db2_commit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Commits an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_commit is not necessary unless AUTOCOMMIT has been turned off for the connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="db2_conn_error">
  <type>string</type>
  <methodname>db2_conn_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>db2_conn_error returns an SQLSTATE value representing the reason the last attempt to connect to a database failed. As db2_connect returns &amp;amp;false; in the event of a failed connection attempt, you do not pass any parameters to db2_conn_error to retrieve the SQLSTATE value. </desc>
</methodsynopsis>
<methodsynopsis function="db2_conn_errormsg">
  <type>string</type>
  <methodname>db2_conn_errormsg</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>db2_conn_errormsg returns an error message and SQLCODE value representing the reason the last database connection attempt failed. As db2_connect returns &amp;amp;false; in the event of a failed connection attempt, do not pass any parameters to db2_conn_errormsg to retrieve the associated error message and SQLCODE value. </desc>
</methodsynopsis>
<methodsynopsis function="db2_connect">
  <type>resource</type>
  <methodname>db2_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. </desc>
</methodsynopsis>
<methodsynopsis function="db2_cursor_type">
  <type>long</type>
  <methodname>db2_cursor_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor. </desc>
</methodsynopsis>
<methodsynopsis function="db2_exec">
  <type>resource</type>
  <methodname>db2_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Prepares and executes an SQL statement. </desc>
</methodsynopsis>
<methodsynopsis function="db2_execute">
  <type>bool</type>
  <methodname>db2_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>parameters</parameter>
  </methodparam>
  <desc>db2_execute executes an SQL statement that was prepared by db2_prepare. </desc>
</methodsynopsis>
<methodsynopsis function="db2_fetch_assoc">
  <type>array</type>
  <methodname>db2_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> Returns an array, indexed by column name, representing a row in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_fetch_both">
  <type>array</type>
  <methodname>db2_fetch_both</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> Returns an array, indexed by both column name and position, representing a row in a result set. Note that the row returned by db2_fetch_both requires more memory than the single-indexed arrays returned by db2_fetch_assoc or db2_fetch_into. </desc>
</methodsynopsis>
<methodsynopsis function="db2_fetch_into">
  <type>array</type>
  <methodname>db2_fetch_into</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed. </desc>
</methodsynopsis>
<methodsynopsis function="db2_fetch_row">
  <type>bool</type>
  <methodname>db2_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> Use db2_fetch_row to iterate through a result set, or to point to a specific row in a result set if you requested a scrollable cursor. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_display_size">
  <type>long</type>
  <methodname>db2_field_display_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the maximum number of bytes required to display a column in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_name">
  <type>string</type>
  <methodname>db2_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the name of the specified column in the result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_num">
  <type>long</type>
  <methodname>db2_field_num</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the position of the named column in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_precision">
  <type>long</type>
  <methodname>db2_field_precision</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the precision of the indicated column in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_scale">
  <type>long</type>
  <methodname>db2_field_scale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the scale of the indicated column in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_type">
  <type>string</type>
  <methodname>db2_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the data type of the indicated column in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="db2_field_width">
  <type>long</type>
  <methodname>db2_field_width</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type.  </desc>
</methodsynopsis>
<methodsynopsis function="db2_foreign_keys">
  <type>resource</type>
  <methodname>db2_foreign_keys</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table-name</parameter>
  </methodparam>
  <desc> Returns a result set listing the foreign keys for a table. </desc>
</methodsynopsis>
<methodsynopsis function="db2_free_result">
  <type>bool</type>
  <methodname>db2_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call db2_free_result to explicitly free the result set resources before the end of the script. </desc>
</methodsynopsis>
<methodsynopsis function="db2_free_stmt">
  <type>bool</type>
  <methodname>db2_free_stmt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call db2_free_stmt to explicitly free the statement resources before the end of the script. </desc>
</methodsynopsis>
<methodsynopsis function="db2_next_result">
  <type>resource</type>
  <methodname>db2_next_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> A stored procedure can return zero or more result sets. While you handle the first result set in exactly the same way you would handle the results returned by a simple SELECT statement, to fetch the second and subsequent result sets from a stored procedure you must call the db2_next_result function and return the result to a uniquely named PHP variable. </desc>
</methodsynopsis>
<methodsynopsis function="db2_num_fields">
  <type>int</type>
  <methodname>db2_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results. </desc>
</methodsynopsis>
<methodsynopsis function="db2_num_rows">
  <type>int</type>
  <methodname>db2_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns the number of rows deleted, inserted, or updated by an SQL statement. </desc>
</methodsynopsis>
<methodsynopsis function="db2_pconnect">
  <type>resource</type>
  <methodname>db2_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns a persistent connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. For more information on persistent connections, refer to . </desc>
</methodsynopsis>
<methodsynopsis function="db2_prepare">
  <type>resource</type>
  <methodname>db2_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>db2_prepare creates a prepared SQL statement which can include 0 or more parameter markers (? characters) representing parameters for input, output, or input/output. You can pass parameters to the prepared statement using db2_bind_param, or for input values only, as an array passed to db2_execute. </desc>
</methodsynopsis>
<methodsynopsis function="db2_primary_keys">
  <type>resource</type>
  <methodname>db2_primary_keys</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table-name</parameter>
  </methodparam>
  <desc> Returns a result set listing the primary keys for a table. </desc>
</methodsynopsis>
<methodsynopsis function="db2_procedure_columns">
  <type>resource</type>
  <methodname>db2_procedure_columns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description column_name Its description </desc>
</methodsynopsis>
<methodsynopsis function="db2_procedures">
  <type>resource</type>
  <methodname>db2_procedures</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description column_name Its description </desc>
</methodsynopsis>
<methodsynopsis function="db2_result">
  <type>mixed</type>
  <methodname>db2_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Use db2_result to return the value of a specified column in the current row of a result set. You must call db2_fetch_row before calling db2_result to set the location of the result set pointer. </desc>
</methodsynopsis>
<methodsynopsis function="db2_rollback">
  <type>bool</type>
  <methodname>db2_rollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_rollback normally has no effect unless AUTOCOMMIT has been turned off for the connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="db2_special_columns">
  <type>resource</type>
  <methodname>db2_special_columns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description column_name Its description </desc>
</methodsynopsis>
<methodsynopsis function="db2_statistics">
  <type>resource</type>
  <methodname>db2_statistics</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description column_name Its description </desc>
</methodsynopsis>
<methodsynopsis function="db2_stmt_error">
  <type>string</type>
  <methodname>db2_stmt_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns a string containing the SQLSTATE value returned by an SQL statement. </desc>
</methodsynopsis>
<methodsynopsis function="db2_stmt_errormsg">
  <type>string</type>
  <methodname>db2_stmt_errormsg</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns a string containing the last SQL statement error message. </desc>
</methodsynopsis>
<methodsynopsis function="db2_table_privileges">
  <type>resource</type>
  <methodname>db2_table_privileges</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description column_name Its description </desc>
</methodsynopsis>
<methodsynopsis function="db2_tables">
  <type>resource</type>
  <methodname>db2_tables</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_type</parameter>
  </methodparam>
  <desc> connection Its description qualifier Its description owner Its description table_name Its description table_type Its description </desc>
</methodsynopsis>
<methodsynopsis function="icap_close">
  <type>int</type>
  <methodname>icap_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>icap_stream</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>  Closes the given icap stream. </desc>
</methodsynopsis>
<methodsynopsis function="icap_create_calendar">
  <type>string</type>
  <methodname>icap_create_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="icap_delete_calendar">
  <type>string</type>
  <methodname>icap_delete_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="icap_delete_event">
  <type>string</type>
  <methodname>icap_delete_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc>icap_delete_event deletes the calendar event specified by the uid. </desc>
</methodsynopsis>
<methodsynopsis function="icap_fetch_event">
  <type>int</type>
  <methodname>icap_fetch_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>event_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>icap_fetch_event fetches an event from the  calendar stream specified by event_id. </desc>
</methodsynopsis>
<methodsynopsis function="icap_list_alarms">
  <type>int</type>
  <methodname>icap_list_alarms</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>date</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>time</parameter>
  </methodparam>
  <desc> Returns an array of event ID's that has an alarm going off at the given datetime. </desc>
</methodsynopsis>
<methodsynopsis function="icap_list_events">
  <type>array</type>
  <methodname>icap_list_events</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>begin_date</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>end_date</parameter>
  </methodparam>
  <desc> Returns an array of event ID's that are between the two given datetimes. </desc>
</methodsynopsis>
<methodsynopsis function="icap_open">
  <type>resource</type>
  <methodname>icap_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns an ICAP stream on success, &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="icap_rename_calendar">
  <type>string</type>
  <methodname>icap_rename_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>old_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="icap_reopen">
  <type>int</type>
  <methodname>icap_reopen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="icap_snooze">
  <type>string</type>
  <methodname>icap_snooze</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc>icap_snooze turns on an alarm for a calendar event specified by the uid. </desc>
</methodsynopsis>
<methodsynopsis function="icap_store_event">
  <type>string</type>
  <methodname>icap_store_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter>event</parameter>
  </methodparam>
  <desc>icap_store_event Stores an event into an ICAP calendar.  An event object consists of: int public - 1 if public, 0 if private; string category - Category string of the event. string title - Title string of the event. string description - Description string of the event. int alarm - Number of minutes before the event to send out an alarm. datetime start - datetime object of the start of the event. datetime end - datetime object of the end of the event. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_get_encoding">
  <type>mixed</type>
  <methodname>iconv_get_encoding</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>iconv_get_encoding returns the current value of the internal configuration variable if successful, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_mime_decode_headers">
  <type>array</type>
  <methodname>iconv_mime_decode_headers</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoded_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns an associative array that holds a whole set of MIME header fields specified by encoded_headers on success, or &amp;amp;false; if an error occurs during the decoding. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_mime_decode">
  <type>string</type>
  <methodname>iconv_mime_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoded_header</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns a decoded MIME field on success, or &amp;amp;false; if an error occurs during the decoding. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_mime_encode">
  <type>string</type>
  <methodname>iconv_mime_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>field_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field_value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>preferences</parameter>
  </methodparam>
  <desc> Composes and returns a string that represents a valid MIME header field, which looks like the following: In the above example, "Subject" is the field name and the portion that begins with "=?ISO-8859-1?..." is the field value. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_set_encoding">
  <type>bool</type>
  <methodname>iconv_set_encoding</methodname>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>iconv_set_encoding changes the value of the internal configuration variable specified by type to charset. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="iconv_strlen">
  <type>int</type>
  <methodname>iconv_strlen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns the character count of str. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_strpos">
  <type>int</type>
  <methodname>iconv_strpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the first occurrence of needle in haystack. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_strrpos">
  <type>string</type>
  <methodname>iconv_strrpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the last occurrence of needle in haystack. </desc>
</methodsynopsis>
<methodsynopsis function="iconv_substr">
  <type>string</type>
  <methodname>iconv_substr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns the portion of str specified by the start and length parameters. </desc>
</methodsynopsis>
<methodsynopsis function="iconv">
  <type>string</type>
  <methodname>iconv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>in_charset</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>out_charset</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Performs a character set conversion on the string str from in_charset to out_charset. Returns the converted string or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ob_iconv_handler">
  <type>array</type>
  <methodname>ob_iconv_handler</methodname>
  <methodparam>
    <type>string</type>
    <parameter>contents</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> It converts the string encoded in  internal_encoding to output_encoding. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_frame_long_name">
  <type>string</type>
  <methodname>id3_get_frame_long_name</methodname>
  <methodparam>
    <type>string</type>
    <parameter>frameId</parameter>
  </methodparam>
  <desc>id3_get_frame_long_name returns the long name for an ID3v2 frame. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_frame_short_name">
  <type>string</type>
  <methodname>id3_get_frame_short_name</methodname>
  <methodparam>
    <type>string</type>
    <parameter>frameId</parameter>
  </methodparam>
  <desc>id3_get_frame_short_name returns the short name for an ID3v2 frame. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_genre_id">
  <type>int</type>
  <methodname>id3_get_genre_id</methodname>
  <methodparam>
    <type>string</type>
    <parameter>genre</parameter>
  </methodparam>
  <desc>id3_get_genre_id returns the id for a genre. If the specified genre is not available in the genre list, id3_get_genre_id will return &amp;amp;false; </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_genre_list">
  <type>array</type>
  <methodname>id3_get_genre_list</methodname>
  <void/>
  <desc>id3_get_genre_list returns an array containing all possible genres that may be stored in an ID3 tag. This list has been created by Eric Kemp and later extended by WinAmp. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_genre_name">
  <type>string</type>
  <methodname>id3_get_genre_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>genre_id</parameter>
  </methodparam>
  <desc>id3_get_genre_name returns the name for a genre id. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_tag">
  <type>array</type>
  <methodname>id3_get_tag</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc>id3_get_tag is used to get all information stored in the id3 tag of the specified file. </desc>
</methodsynopsis>
<methodsynopsis function="id3_get_version">
  <type>int</type>
  <methodname>id3_get_version</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>id3_get_version retrieves the version(s) of the ID3 tag(s) in the MP3 file. As a tag can contain ID3 v1.x and v2.x tags, the return value of this function should be bitwise compared with the predefined constants ID3_V1_0, ID3_V1_1 and  ID3_V2. </desc>
</methodsynopsis>
<methodsynopsis function="id3_remove_tag">
  <type>bool</type>
  <methodname>id3_remove_tag</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc>id3_remove_tag is used to remove the information stored of an ID3 tag. If no tag has been present, it will return &amp;amp;false; and leave the file as it was. </desc>
</methodsynopsis>
<methodsynopsis function="id3_set_tag">
  <type>bool</type>
  <methodname>id3_set_tag</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>tag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc>id3_set_tag is used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_affected_rows">
  <type>int</type>
  <methodname>ifx_affected_rows</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>result_id is a valid result id returned by ifx_query or ifx_prepare.  </desc>
</methodsynopsis>
<methodsynopsis function="ifx_blobinfile_mode">
  <type>void</type>
  <methodname>ifx_blobinfile_mode</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Set the default blob mode for all select queries. Mode "0" means save Byte-Blobs in memory, and mode "1" means save Byte-Blobs in a file. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_byteasvarchar">
  <type>void</type>
  <methodname>ifx_byteasvarchar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Sets the default byte mode for all select-queries.  Mode "0" will return a blob id, and mode "1" will return a varchar with text content. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_close">
  <type>int</type>
  <methodname>ifx_close</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns: always &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_connect">
  <type>int</type>
  <methodname>ifx_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database
                       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>userid
                       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password
                       </parameter>
  </methodparam>
  <desc>  Returns a connection identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_copy_blob">
  <type>int</type>
  <methodname>ifx_copy_blob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Duplicates the given blob object. bid is the ID of the blob object. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_create_blob">
  <type>int</type>
  <methodname>ifx_create_blob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>param</parameter>
  </methodparam>
  <desc> Creates an blob object. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_create_char">
  <type>int</type>
  <methodname>ifx_create_char</methodname>
  <methodparam>
    <type>string</type>
    <parameter>param</parameter>
  </methodparam>
  <desc> Creates an char object. param should be the char content. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_do">
  <type>int</type>
  <methodname>ifx_do</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifx_error">
  <type>string</type>
  <methodname>ifx_error</methodname>
  <void/>
  <desc> The Informix error codes (SQLSTATE &amp;amp; SQLCODE) formatted as follows : </desc>
</methodsynopsis>
<methodsynopsis function="ifx_errormsg">
  <type>string</type>
  <methodname>ifx_errormsg</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>errorcode</parameter>
  </methodparam>
  <desc> Returns the Informix error message associated with the most recent Informix error, or, when the optional "errorcode" parameter is present, the error message corresponding to "errorcode". </desc>
</methodsynopsis>
<methodsynopsis function="ifx_fetch_row">
  <type>array</type>
  <methodname>ifx_fetch_row</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>position</parameter>
  </methodparam>
  <desc>  Returns an associative array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_fieldproperties">
  <type>array</type>
  <methodname>ifx_fieldproperties</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Returns an associative array with fieldnames as key and the SQL fieldproperties as data for a query with result_id.  Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_fieldtypes">
  <type>array</type>
  <methodname>ifx_fieldtypes</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Returns an associative array with fieldnames as key and the SQL fieldtypes as data for query with result_id.  Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_free_blob">
  <type>int</type>
  <methodname>ifx_free_blob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Deletes the blobobject for the given blob object-id bid. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifx_free_char">
  <type>int</type>
  <methodname>ifx_free_char</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Deletes the charobject for the given char object-id bid. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifx_free_result">
  <type>int</type>
  <methodname>ifx_free_result</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Releases resources for the query associated with result_id. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifx_get_blob">
  <type>int</type>
  <methodname>ifx_get_blob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Returns the content of the blob object for the given blob object-id bid. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_get_char">
  <type>int</type>
  <methodname>ifx_get_char</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Returns the content of the char object for the given char object-id bid. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_getsqlca">
  <type>array</type>
  <methodname>ifx_getsqlca</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>result_id is a valid result id returned by ifx_query or ifx_prepare.  </desc>
</methodsynopsis>
<methodsynopsis function="ifx_htmltbl_result">
  <type>int</type>
  <methodname>ifx_htmltbl_result</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>html_table_options</parameter>
  </methodparam>
  <desc> Returns the number of rows fetched or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_nullformat">
  <type>void</type>
  <methodname>ifx_nullformat</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Sets the default return value of a NULL-value on a fetch row. Mode "0" returns "", and mode "1" returns "&amp;amp;null;". </desc>
</methodsynopsis>
<methodsynopsis function="ifx_num_fields">
  <type>int</type>
  <methodname>ifx_num_fields</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Returns the number of columns in query for result_id or &amp;amp;false; on error </desc>
</methodsynopsis>
<methodsynopsis function="ifx_num_rows">
  <type>int</type>
  <methodname>ifx_num_rows</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Gives the number of rows fetched so far for a query with result_id after a ifx_query or ifx_do query. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_pconnect">
  <type>int</type>
  <methodname>ifx_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>userid</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Returns: A positive Informix persistent link identifier on success, or &amp;amp;false; on error </desc>
</methodsynopsis>
<methodsynopsis function="ifx_prepare">
  <type>int</type>
  <methodname>ifx_prepare</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>conn_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_def</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>blobidarray</parameter>
  </methodparam>
  <desc> Returns an integer result_id for use by ifx_do. Sets affected_rows for retrieval by the ifx_affected_rows function.   </desc>
</methodsynopsis>
<methodsynopsis function="ifx_query">
  <type>int</type>
  <methodname>ifx_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>
        blobidarray
       </parameter>
  </methodparam>
  <desc>  Returns a positive Informix result identifier on success, or &amp;amp;false; on error.   </desc>
</methodsynopsis>
<methodsynopsis function="ifx_textasvarchar">
  <type>void</type>
  <methodname>ifx_textasvarchar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Sets the default text mode for all select-queries.  Mode "0" will return a blob id, and mode "1" will return a varchar with text content. </desc>
</methodsynopsis>
<methodsynopsis function="ifx_update_blob">
  <type>bool</type>
  <methodname>ifx_update_blob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Updates the content of the blob object for the given blob object bid. content is a string with new data. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifx_update_char">
  <type>int</type>
  <methodname>ifx_update_char</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Updates the content of the char object for the given char object bid. content is a string with new data. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_close_slob">
  <type>int</type>
  <methodname>ifxus_close_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Deletes the slob object on the given slob object-id bid. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_create_slob">
  <type>int</type>
  <methodname>ifxus_create_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Creates an slob object and opens it.  Modes: 1 = LO_RDONLY, 2 = LO_WRONLY, 4 = LO_APPEND, 8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER -&amp;gt; or-mask. You can also use constants named IFX_LO_RDONLY, IFX_LO_WRONLY etc.  Return &amp;amp;false; on error otherwise the new slob object-id. </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_free_slob">
  <type>int</type>
  <methodname>ifxus_free_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Deletes the slob object. bid is the Id of the slob object. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_open_slob">
  <type>int</type>
  <methodname>ifxus_open_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Opens an slob object. bid should be an existing slob id.  Modes: 1 = LO_RDONLY, 2 = LO_WRONLY, 4 = LO_APPEND, 8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER -&amp;gt; or-mask.  Returns &amp;amp;false; on error otherwise the new slob object-id. </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_read_slob">
  <type>int</type>
  <methodname>ifxus_read_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>nbytes</parameter>
  </methodparam>
  <desc> Reads nbytes of the slob object.  bid is a existing slob id and nbytes is the number of bytes read.  Return &amp;amp;false; on error otherwise the string. </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_seek_slob">
  <type>int</type>
  <methodname>ifxus_seek_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Sets the current file or seek position of an open slob object. bid should be an existing slob id.  Modes: 0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END and offset is an byte offset.  Return &amp;amp;false; on error otherwise the seek position. </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_tell_slob">
  <type>int</type>
  <methodname>ifxus_tell_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <desc> Returns the current file or seek position of an open slob object bid should be an existing slob id.  Return &amp;amp;false; on error otherwise the seek position. </desc>
</methodsynopsis>
<methodsynopsis function="ifxus_write_slob">
  <type>int</type>
  <methodname>ifxus_write_slob</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Writes a string into the slob object.  bid is an existing slob id and content the content to write. Return &amp;amp;false; on error otherwise bytes written. </desc>
</methodsynopsis>
<methodsynopsis function="iis_add_server">
  <type>int</type>
  <methodname>iis_add_server</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comment</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>server_ip</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host_name</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rights</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start_server</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_get_dir_security">
  <type>int</type>
  <methodname>iis_get_dir_security</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_get_script_map">
  <type>int</type>
  <methodname>iis_get_script_map</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script_extension</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_get_server_by_comment">
  <type>int</type>
  <methodname>iis_get_server_by_comment</methodname>
  <methodparam>
    <type>string</type>
    <parameter>comment</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_get_server_by_path">
  <type>int</type>
  <methodname>iis_get_server_by_path</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc> Each virtual server in IIS is associated with an instance number. iis_get_server_by_path Finds the instance number  from the actual path to the root directory. </desc>
</methodsynopsis>
<methodsynopsis function="iis_get_server_rights">
  <type>int</type>
  <methodname>iis_get_server_rights</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_get_service_state">
  <type>int</type>
  <methodname>iis_get_service_state</methodname>
  <methodparam>
    <type>string</type>
    <parameter>service_id</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_remove_server">
  <type>int</type>
  <methodname>iis_remove_server</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_set_app_settings">
  <type>int</type>
  <methodname>iis_set_app_settings</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>application_scope</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_set_dir_security">
  <type>int</type>
  <methodname>iis_set_dir_security</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>directory_flags</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_set_script_map">
  <type>int</type>
  <methodname>iis_set_script_map</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>script_extension</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>engine_path</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>allow_scripting</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_set_server_rights">
  <type>int</type>
  <methodname>iis_set_server_rights</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>virtual_path</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>directory_flags</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_start_server">
  <type>int</type>
  <methodname>iis_start_server</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_start_service">
  <type>int</type>
  <methodname>iis_start_service</methodname>
  <methodparam>
    <type>string</type>
    <parameter>service_id</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_stop_server">
  <type>int</type>
  <methodname>iis_stop_server</methodname>
  <methodparam>
    <type>int</type>
    <parameter>server_instance</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="iis_stop_service">
  <type>int</type>
  <methodname>iis_stop_service</methodname>
  <methodparam>
    <type>string</type>
    <parameter>service_id</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="gd_info">
  <type>array</type>
  <methodname>gd_info</methodname>
  <void/>
  <desc> Elements of array returned by gd_info Attribute Meaning GD Version string value describing the installed libgd version. Freetype Support boolean value.  &amp;amp;true;  if Freetype Support is installed. Freetype Linkage string value describing the way in which Freetype was linked. Expected values are: 'with freetype',  'with TTF library', and 'with unknown library'.  This element will only be defined if Freetype Support evaluated to &amp;amp;true;. T1Lib Support boolean value.  &amp;amp;true; if T1Lib support is included. GIF Read Support boolean value.  &amp;amp;true; if support for readingGIF  images is included. GIF Create Support boolean value.  &amp;amp;true; if support for creatingGIF images is included. JPG Support boolean value.  &amp;amp;true; if JPG support is included. PNG Support boolean value.  &amp;amp;true; if PNG support is included. WBMP Support boolean value.  &amp;amp;true; if WBMP support is included. XBM Support boolean value.  &amp;amp;true; if XBM support is included. </desc>
</methodsynopsis>
<methodsynopsis function="getimagesize">
  <type>array</type>
  <methodname>getimagesize</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">imageinfo</parameter>
  </methodparam>
  <desc> The getimagesize function will determine the size of any GIF, JPG, PNG, SWF,  SWC, PSD,  TIFF, BMP,  IFF, JP2, JPX, JB2, JPC, XBM, or WBMP image file and return the dimensions along with the file type and a height/width text string to be used inside a normal  HTML IMG tag. </desc>
</methodsynopsis>
<methodsynopsis function="image_type_to_extension">
  <type>string</type>
  <methodname>image_type_to_extension</methodname>
  <methodparam>
    <type>int</type>
    <parameter>imagetype</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>include_dot</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="image_type_to_mime_type">
  <type>string</type>
  <methodname>image_type_to_mime_type</methodname>
  <methodparam>
    <type>int</type>
    <parameter>imagetype</parameter>
  </methodparam>
  <desc> The image_type_to_mime_type function will determine  the Mime-Type for an IMAGETYPE constant. image_type_to_mime_type (file)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="image2wbmp">
  <type>int</type>
  <methodname>image2wbmp</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>threshold</parameter>
  </methodparam>
  <desc>image2wbmp creates the WBMP file in filename from the image image. The image argument is the return from imagecreate. </desc>
</methodsynopsis>
<methodsynopsis function="imagealphablending">
  <type>bool</type>
  <methodname>imagealphablending</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>blendmode</parameter>
  </methodparam>
  <desc>imagealphablending allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel determines how much of the underlying color should be allowed to shine through.  As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image.  The resulting pixel is opaque.  In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel.  Blending mode is not available when drawing on palette images. If blendmode is &amp;amp;true;, then blending mode is enabled, otherwise disabled. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="imageantialias">
  <type>bool</type>
  <methodname>imageantialias</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>im</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>on</parameter>
  </methodparam>
  <desc> See also imagecreatetruecolor. </desc>
</methodsynopsis>
<methodsynopsis function="imagearc">
  <type>int</type>
  <methodname>imagearc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cy</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>e</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagearc draws a partial ellipse centered at cx, cy (top left is 0, 0) in the image represented by image. W and h specifies the ellipse's width and height respectively while the start and end points are specified in degrees indicated by the s and e arguments. 0&amp;#xB0; is located at the three-o'clock position, and the arc is drawn clockwise. </desc>
</methodsynopsis>
<methodsynopsis function="imagechar">
  <type>int</type>
  <methodname>imagechar</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>c</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagechar draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color. If font is 1, 2, 3, 4 or 5, a built-in font is used (with higher numbers corresponding to larger fonts). </desc>
</methodsynopsis>
<methodsynopsis function="imagecharup">
  <type>int</type>
  <methodname>imagecharup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>c</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagecharup draws the character c vertically in the image identified by image at coordinates x, y (top left is 0, 0) with the color color. If font is 1, 2, 3, 4 or 5, a built-in font is used. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorallocate">
  <type>int</type>
  <methodname>imagecolorallocate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc>imagecolorallocate returns a color identifier representing the color composed of the given RGB components.  The image argument is the return from the imagecreate function. red, green and blue are the values of the red, green and blue component of the requested color respectively.  These parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF. imagecolorallocate must be called to create each color that is to be used in the image represented by image. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorallocatealpha">
  <type>int</type>
  <methodname>imagecolorallocatealpha</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>alpha</parameter>
  </methodparam>
  <desc>imagecolorallocatealpha behaves identically to  imagecolorallocate with the addition of the transparency parameter alpha which may have a value between  0 and 127.  0 indicates completely opaque while 127 indicates completely transparent. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorat">
  <type>int</type>
  <methodname>imagecolorat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Returns the index of the color of the pixel at the specified location in the image specified by image. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorclosest">
  <type>int</type>
  <methodname>imagecolorclosest</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc> Returns the index of the color in the palette of the image which is "closest" to the specified RGB value. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorclosestalpha">
  <type>int</type>
  <methodname>imagecolorclosestalpha</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>alpha</parameter>
  </methodparam>
  <desc> Returns the index of the color in the palette of the image which is "closest" to the specified RGB value and alpha level. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorclosesthwb">
  <type>int</type>
  <methodname>imagecolorclosesthwb</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagecolordeallocate">
  <type>int</type>
  <methodname>imagecolordeallocate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc> The imagecolordeallocate function de-allocates a color previously allocated with  imagecolorallocate or imagecolorallocatealpha. ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorexact">
  <type>int</type>
  <methodname>imagecolorexact</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc> Returns the index of the specified color in the palette of the image. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorexactalpha">
  <type>int</type>
  <methodname>imagecolorexactalpha</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>alpha</parameter>
  </methodparam>
  <desc> Returns the index of the specified color+alpha in the palette of the image. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolormatch">
  <type>bool</type>
  <methodname>imagecolormatch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image1</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>image2</parameter>
  </methodparam>
  <desc>image1 must be Truecolor, image2 must be Palette, and  both image1 and image2 must be the same size.  </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorresolve">
  <type>int</type>
  <methodname>imagecolorresolve</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc> This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorresolvealpha">
  <type>int</type>
  <methodname>imagecolorresolvealpha</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>alpha</parameter>
  </methodparam>
  <desc> This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorset">
  <type>bool</type>
  <methodname>imagecolorset</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc> This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorsforindex">
  <type>array</type>
  <methodname>imagecolorsforindex</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> This returns an associative array with red, green, blue and alpha  keys that contain the appropriate values for the specified color index. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolorstotal">
  <type>int</type>
  <methodname>imagecolorstotal</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc> This returns the number of colors in the specified image's palette. </desc>
</methodsynopsis>
<methodsynopsis function="imagecolortransparent">
  <type>int</type>
  <methodname>imagecolortransparent</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagecolortransparent sets the transparent color in the image image to color.  image is the image identifier returned by imagecreate and color is a color identifier returned by imagecolorallocate. </desc>
</methodsynopsis>
<methodsynopsis function="imagecopy">
  <type>int</type>
  <methodname>imagecopy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dst_im</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>src_im</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_h</parameter>
  </methodparam>
  <desc> Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h.  The portion defined will be copied onto the x,y coordinates, dst_x and dst_y. </desc>
</methodsynopsis>
<methodsynopsis function="imagecopymerge">
  <type>int</type>
  <methodname>imagecopymerge</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dst_im</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>src_im</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pct</parameter>
  </methodparam>
  <desc> Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h.  The portion defined will be copied onto the x,y coordinates, dst_x and dst_y. The two images will be merged according to pct which can range from 0 to 100.  When pct = 0, no action is taken, when 100 this function behaves identically to imagecopy for pallete images, while it implements alpha transparency for true colour images. </desc>
</methodsynopsis>
<methodsynopsis function="imagecopymergegray">
  <type>int</type>
  <methodname>imagecopymergegray</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dst_im</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>src_im</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pct</parameter>
  </methodparam>
  <desc>imagecopymergegray copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h.  The portion defined will be copied onto the x,y coordinates, dst_x and dst_y. The two images will be merged according to pct which can range from 0 to 100.  When pct = 0, no action is taken, when 100 this function behaves identically to imagecopy. </desc>
</methodsynopsis>
<methodsynopsis function="imagecopyresampled">
  <type>bool</type>
  <methodname>imagecopyresampled</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dst_image</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>src_image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_h</parameter>
  </methodparam>
  <desc>imagecopyresampled copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="imagecopyresized">
  <type>int</type>
  <methodname>imagecopyresized</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dst_image</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>src_image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dst_h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>src_h</parameter>
  </methodparam>
  <desc>imagecopyresized copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier. If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreate">
  <type>resource</type>
  <methodname>imagecreate</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x_size</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y_size</parameter>
  </methodparam>
  <desc>imagecreate returns an image identifier representing a blank image of size x_size by y_size. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromgd">
  <type>resource</type>
  <methodname>imagecreatefromgd</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromgd2">
  <type>resource</type>
  <methodname>imagecreatefromgd2</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromgd2part">
  <type>resource</type>
  <methodname>imagecreatefromgd2part</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>srcX</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>srcY</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromgif">
  <type>resource</type>
  <methodname>imagecreatefromgif</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefromgif returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromjpeg">
  <type>resource</type>
  <methodname>imagecreatefromjpeg</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefromjpeg returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefrompng">
  <type>resource</type>
  <methodname>imagecreatefrompng</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefrompng returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromstring">
  <type>resource</type>
  <methodname>imagecreatefromstring</methodname>
  <methodparam>
    <type>string</type>
    <parameter>image</parameter>
  </methodparam>
  <desc>imagecreatefromstring returns an image identifier representing the image obtained from the given string. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromwbmp">
  <type>resource</type>
  <methodname>imagecreatefromwbmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefromwbmp returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromxbm">
  <type>resource</type>
  <methodname>imagecreatefromxbm</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefromxbm returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatefromxpm">
  <type>resource</type>
  <methodname>imagecreatefromxpm</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagecreatefromxpm returns an image identifier representing the image obtained from the given filename. </desc>
</methodsynopsis>
<methodsynopsis function="imagecreatetruecolor">
  <type>resource</type>
  <methodname>imagecreatetruecolor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x_size</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y_size</parameter>
  </methodparam>
  <desc>imagecreatetruecolor returns an image identifier representing a black image of size x_size by y_size. </desc>
</methodsynopsis>
<methodsynopsis function="imagedashedline">
  <type>int</type>
  <methodname>imagedashedline</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc> This function is deprecated. Use combination of imagesetstyle and imageline instead. </desc>
</methodsynopsis>
<methodsynopsis function="imagedestroy">
  <type>bool</type>
  <methodname>imagedestroy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc>imagedestroy frees any memory associated with image image. image is the image identifier returned by the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imageellipse">
  <type>int</type>
  <methodname>imageellipse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cy</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imageellipse draws an ellipse centered at cx, cy (top left is 0, 0) in the image represented by image. W and h specifies the ellipse's width and height respectively. The color of the ellipse is specified by color. </desc>
</methodsynopsis>
<methodsynopsis function="imagefill">
  <type>int</type>
  <methodname>imagefill</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagefill performs a flood fill starting at coordinate x, y (top left is 0, 0) with color color in the image image. </desc>
</methodsynopsis>
<methodsynopsis function="imagefilledarc">
  <type>bool</type>
  <methodname>imagefilledarc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cy</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>e</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>style</parameter>
  </methodparam>
  <desc>imagefilledarc draws a partial ellipse centered at cx, cy (top left is 0, 0) in the image represented by image. &amp;amp;return.success; W and h specifies the ellipse's width and height respectively while the start and end points are specified in degrees indicated by the s and e arguments. style is a bitwise OR of the following possibilities: IMG_ARC_PIEIMG_ARC_CHORDIMG_ARC_NOFILLIMG_ARC_EDGEDIMG_ARC_PIE and IMG_ARC_CHORD are  mutually exclusive; IMG_ARC_CHORD just connects the starting and ending angles with a straight line, while IMG_ARC_PIE produces a rounded edge.  IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled.  IMG_ARC_EDGED,  used together with IMG_ARC_NOFILL, indicates that the  beginning and ending angles should be connected to the center - this is a  good way to outline (rather than fill) a 'pie slice'. </desc>
</methodsynopsis>
<methodsynopsis function="imagefilledellipse">
  <type>bool</type>
  <methodname>imagefilledellipse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cy</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>w</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>h</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagefilledellipse draws an ellipse centered at cx, cy (top left is 0, 0) in the image represented by image. W and h specifies the ellipse's width and height respectively. The ellipse is filled using color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="imagefilledpolygon">
  <type>int</type>
  <methodname>imagefilledpolygon</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>points</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>num_points</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagefilledpolygon creates a filled polygon in image image. </desc>
</methodsynopsis>
<methodsynopsis function="imagefilledrectangle">
  <type>int</type>
  <methodname>imagefilledrectangle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagefilledrectangle creates a filled rectangle of color color in image image starting at upper left coordinates x1, y1 and ending at bottom right coordinates x2, y2.  0, 0 is the top left corner of the image. </desc>
</methodsynopsis>
<methodsynopsis function="imagefilltoborder">
  <type>int</type>
  <methodname>imagefilltoborder</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>border</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagefilltoborder performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color. </desc>
</methodsynopsis>
<methodsynopsis function="imagefilter">
  <type>bool</type>
  <methodname>imagefilter</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>src_im</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>filtertype</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>arg1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>arg2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>arg3</parameter>
  </methodparam>
  <desc>imagefilter applies the filter filtertype to the image, using arg1, arg2 and arg3 where necessary. </desc>
</methodsynopsis>
<methodsynopsis function="imagefontheight">
  <type>int</type>
  <methodname>imagefontheight</methodname>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <desc> Returns the pixel height of a character in the specified font. </desc>
</methodsynopsis>
<methodsynopsis function="imagefontwidth">
  <type>int</type>
  <methodname>imagefontwidth</methodname>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <desc> Returns the pixel width of a character in font. </desc>
</methodsynopsis>
<methodsynopsis function="imageftbbox">
  <type>array</type>
  <methodname>imageftbbox</methodname>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>font_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>extrainfo</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagefttext">
  <type>array</type>
  <methodname>imagefttext</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>font_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>extrainfo</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imagegammacorrect">
  <type>int</type>
  <methodname>imagegammacorrect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>inputgamma</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>outputgamma</parameter>
  </methodparam>
  <desc> The imagegammacorrect function applies gamma correction to a gd image stream (image) given an input gamma, the parameter inputgamma and an output gamma, the parameter outputgamma. </desc>
</methodsynopsis>
<methodsynopsis function="imagegd">
  <type>bool</type>
  <methodname>imagegd</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagegd outputs a GD image to filename. The image argument is the return from the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imagegd2">
  <type>bool</type>
  <methodname>imagegd2</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>chunk_size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>imagegd2 outputs a GD2 image to filename. The image parameter is the return from the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imagegif">
  <type>bool</type>
  <methodname>imagegif</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>imagegif creates the GIF file in filename from the image image. The image argument is the return from the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imageinterlace">
  <type>int</type>
  <methodname>imageinterlace</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>interlace</parameter>
  </methodparam>
  <desc>imageinterlace turns the interlace bit on or off. If interlace is 1 the image will be interlaced, and if interlace is 0 the interlace bit is turned off. </desc>
</methodsynopsis>
<methodsynopsis function="imageistruecolor">
  <type>bool</type>
  <methodname>imageistruecolor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc>imageistruecolor finds whether the image  image is a truecolor image. </desc>
</methodsynopsis>
<methodsynopsis function="imagejpeg">
  <type>bool</type>
  <methodname>imagejpeg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quality</parameter>
  </methodparam>
  <desc>imagejpeg creates the JPEG file in filename from the image image. The image argument is the return from the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imagelayereffect">
  <type>bool</type>
  <methodname>imagelayereffect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>effect</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="imageline">
  <type>int</type>
  <methodname>imageline</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imageline draws a line from x1, y1 to x2, y2 (top left is 0, 0) in image image of color color. </desc>
</methodsynopsis>
<methodsynopsis function="imageloadfont">
  <type>int</type>
  <methodname>imageloadfont</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <desc>imageloadfont loads a user-defined bitmap font and returns an identifier for the font (that is always greater than 5, so it will not conflict with the built-in fonts). It returns &amp;amp;false; in case of error. </desc>
</methodsynopsis>
<methodsynopsis function="imagepalettecopy">
  <type>int</type>
  <methodname>imagepalettecopy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>destination</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc>imagepalettecopy copies the palette from the source image to the destination image. </desc>
</methodsynopsis>
<methodsynopsis function="imagepng">
  <type>bool</type>
  <methodname>imagepng</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> The imagepng outputs a GD image stream (image) in PNG format to standard output (usually the browser) or, if a filename is given by the filename it outputs the image to the file. ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="imagepolygon">
  <type>int</type>
  <methodname>imagepolygon</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>points</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>num_points</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagepolygon creates a polygon in image id. points is a PHP array containing the polygon's vertices, i.e. points[0] = x0, points[1] = y0, points[2] = x1, points[3] = y1, etc.  num_points is the total number of points (vertices). </desc>
</methodsynopsis>
<methodsynopsis function="imagepsbbox">
  <type>array</type>
  <methodname>imagepsbbox</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>space</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tightness</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <desc>size is expressed in pixels. </desc>
</methodsynopsis>
<methodsynopsis function="imagepscopyfont">
  <type>int</type>
  <methodname>imagepscopyfont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fontindex</parameter>
  </methodparam>
  <desc> Use this function if you need make further modifications to the font, for example extending/condensing, slanting it or changing its character encoding vector, but need to keep the original along as well. Note that the font you want to copy must be one obtained using imagepsloadfont, not a font that is itself a copied one. You can although make modifications to it before copying. </desc>
</methodsynopsis>
<methodsynopsis function="imagepsencodefont">
  <type>int</type>
  <methodname>imagepsencodefont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>font_index</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encodingfile</parameter>
  </methodparam>
  <desc> Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English. The exact format of this file is described in T1libs documentation. T1lib comes with two ready-to-use files, IsoLatin1.enc and IsoLatin2.enc. </desc>
</methodsynopsis>
<methodsynopsis function="imagepsextendfont">
  <type>bool</type>
  <methodname>imagepsextendfont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>font_index</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>extend</parameter>
  </methodparam>
  <desc> Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font. </desc>
</methodsynopsis>
<methodsynopsis function="imagepsfreefont">
  <type>void</type>
  <methodname>imagepsfreefont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fontindex</parameter>
  </methodparam>
  <desc>imagepsfreefont frees memory used by a PostScript Type 1 font. </desc>
</methodsynopsis>
<methodsynopsis function="imagepsloadfont">
  <type>int</type>
  <methodname>imagepsloadfont</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> In the case everything went right, a valid font index will be returned and can be used for further purposes. Otherwise the function returns &amp;amp;false; and prints a message describing what went wrong, which you cannot read directly, while the output type is image. </desc>
</methodsynopsis>
<methodsynopsis function="imagepsslantfont">
  <type>bool</type>
  <methodname>imagepsslantfont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>font_index</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>slant</parameter>
  </methodparam>
  <desc> Slant a font given by the font_index parameter with a slant of the value of the slant parameter. </desc>
</methodsynopsis>
<methodsynopsis function="imagepstext">
  <type>array</type>
  <methodname>imagepstext</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>foreground</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>background</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>space</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tightness</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>antialias_steps</parameter>
  </methodparam>
  <desc>foreground is the color in which the text will be painted.  Background is the color to which the text will try to fade in with antialiasing. No pixels with the color background are actually painted, so the background image does not need to be of solid color. </desc>
</methodsynopsis>
<methodsynopsis function="imagerectangle">
  <type>int</type>
  <methodname>imagerectangle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>imagerectangle creates a rectangle of color col in image image starting at upper left coordinate x1, y1 and ending at bottom right coordinate x2, y2. 0, 0 is the top left corner of the image. </desc>
</methodsynopsis>
<methodsynopsis function="imagerotate">
  <type>resource</type>
  <methodname>imagerotate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>src_im</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bgd_color</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>ignore_transparent</parameter>
  </methodparam>
  <desc> Rotates the src_im image using a given angle in degrees. bgd_color specifies the color of the uncovered zone after the rotation. </desc>
</methodsynopsis>
<methodsynopsis function="imagesavealpha">
  <type>bool</type>
  <methodname>imagesavealpha</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>saveflag</parameter>
  </methodparam>
  <desc>imagesavealpha sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.  </desc>
</methodsynopsis>
<methodsynopsis function="imagesetbrush">
  <type>int</type>
  <methodname>imagesetbrush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>brush</parameter>
  </methodparam>
  <desc>imagesetbrush sets the brush image to be used by all line drawing functions (such as imageline and imagepolygon) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED. </desc>
</methodsynopsis>
<methodsynopsis function="imagesetpixel">
  <type>int</type>
  <methodname>imagesetpixel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <desc>imagesetpixel draws a pixel at x, y (top left is 0, 0) in image image of color color. </desc>
</methodsynopsis>
<methodsynopsis function="imagesetstyle">
  <type>bool</type>
  <methodname>imagesetstyle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>style</parameter>
  </methodparam>
  <desc>imagesetstyle sets the style to be used by all line drawing functions (such as imageline and imagepolygon) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="imagesetthickness">
  <type>bool</type>
  <methodname>imagesetthickness</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>thickness</parameter>
  </methodparam>
  <desc>imagesetthickness sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="imagesettile">
  <type>int</type>
  <methodname>imagesettile</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>tile</parameter>
  </methodparam>
  <desc>imagesettile sets the tile image to be used by all region filling functions (such as imagefill and imagefilledpolygon) when filling with the special color IMG_COLOR_TILED. </desc>
</methodsynopsis>
<methodsynopsis function="imagestring">
  <type>int</type>
  <methodname>imagestring</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>imagestring draws the string s in the image identified by image with the upper-left corner at coordinates x, y (top left is 0, 0) in color col.  If font is 1, 2, 3, 4 or 5, a built-in font is used. </desc>
</methodsynopsis>
<methodsynopsis function="imagestringup">
  <type>int</type>
  <methodname>imagestringup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>imagestringup draws the string s vertically in the image identified by image at coordinates x, y (top left is 0, 0) in color col.  If font is 1, 2, 3, 4 or 5, a built-in font is used. </desc>
</methodsynopsis>
<methodsynopsis function="imagesx">
  <type>int</type>
  <methodname>imagesx</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc>imagesx returns the width of the image identified by image. </desc>
</methodsynopsis>
<methodsynopsis function="imagesy">
  <type>int</type>
  <methodname>imagesy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc>imagesy returns the height of the image identified by image. </desc>
</methodsynopsis>
<methodsynopsis function="imagetruecolortopalette">
  <type>void</type>
  <methodname>imagetruecolortopalette</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>dither</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ncolors</parameter>
  </methodparam>
  <desc>imagetruecolortopalette converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality. </desc>
</methodsynopsis>
<methodsynopsis function="imagettfbbox">
  <type>array</type>
  <methodname>imagettfbbox</methodname>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fontfile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> This function calculates and returns the bounding box in pixels for a TrueType text. textThe string to be measured.sizeThe font size in pixels.fontfile The name of the TrueType font file (can be a URL). Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '/' by appending '.ttf' to the filename and searching along a library-defined font path. angle Angle in degrees in which text will be measured. imagettfbbox returns an array with 8 elements representing four points making the bounding box of the text: 0lower left corner, X position1lower left corner, Y position2lower right corner, X position3lower right corner, Y position4upper right corner, X position5upper right corner, Y position6upper left corner, X position7upper left corner, Y position The points are relative to the text regardless of the angle, so "upper left" means in the top left-hand corner seeing the text horizontally. </desc>
</methodsynopsis>
<methodsynopsis function="imagettftext">
  <type>array</type>
  <methodname>imagettftext</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fontfile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> image The image resource. See imagecreate. size The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2). angle The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text. x The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). This is different from the imagestring, where x and y define the upper-left corner of the first character. For example, "top left" is 0, 0. y The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character. color The color index. Using the negative of a color index has the effect of turning off antialiasing. See imagecolorallocate. fontfile The path to the TrueType font you wish to use. Depending on which version of the GD library PHP is using, when fontfile does not begin with a leading / then .ttf will be appended to the filename and the library will attempt to search for that filename along a library-defined font path. When using versions of the GD library lower than 2.0.18, a space character, rather than a semicolon, was used as the 'path separator' for different font files. Unintentional use of this feature will result in the warning message: Warning: Could not find/open font. For these affected versions, the only solution is moving the font to a path which does not contain spaces. In many cases where a font resides in the same directory as the script using it the following trick will alleviate any include problems. ]]&amp;gt; text The text string. May include decimal numeric character references (of the form: &amp;amp;#8364;) to access characters in a font beyond position 127. Strings in UTF-8 encoding can be passed directly. If a character is used in the string which is not supported by the font, a hollow rectangle will replace the character. </desc>
</methodsynopsis>
<methodsynopsis function="imagetypes">
  <type>int</type>
  <methodname>imagetypes</methodname>
  <void/>
  <desc> This function returns a bit-field corresponding to the image formats supported by the version of GD linked into PHP.  The following bits are returned, IMG_GIF | IMG_JPG  | IMG_PNG | IMG_WBMP | IMG_XPM. To check for PNG support, for example, do this: imagetypes example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="imagewbmp">
  <type>bool</type>
  <methodname>imagewbmp</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>foreground</parameter>
  </methodparam>
  <desc>imagewbmp creates the WBMP file in filename from the image image. The image argument is the return from the imagecreate function. </desc>
</methodsynopsis>
<methodsynopsis function="imagexbm">
  <type>bool</type>
  <methodname>imagexbm</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>foreground</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="iptcembed">
  <type>array</type>
  <methodname>iptcembed</methodname>
  <methodparam>
    <type>string</type>
    <parameter>iptcdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>jpeg_file_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>spool</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="iptcparse">
  <type>array</type>
  <methodname>iptcparse</methodname>
  <methodparam>
    <type>string</type>
    <parameter>iptcblock</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="jpeg2wbmp">
  <type>int</type>
  <methodname>jpeg2wbmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>jpegname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>wbmpname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>d_height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>d_width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>threshold</parameter>
  </methodparam>
  <desc> Converts the jpegname JPEG file to WBMP format, and saves it as wbmpname. With the d_height and d_width you specify the height and width of the destination image. </desc>
</methodsynopsis>
<methodsynopsis function="png2wbmp">
  <type>int</type>
  <methodname>png2wbmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pngname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>wbmpname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>d_height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>d_width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>threshold</parameter>
  </methodparam>
  <desc> Converts the pngname PNG file to WBMP format, and saves it as wbmpname. With the d_height and d_width you specify the height and width of the destination image. </desc>
</methodsynopsis>
<methodsynopsis function="imap_8bit">
  <type>string</type>
  <methodname>imap_8bit</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>   Convert an 8bit string to a quoted-printable string (according to RFC2045, section 6.7). </desc>
</methodsynopsis>
<methodsynopsis function="imap_alerts">
  <type>array</type>
  <methodname>imap_alerts</methodname>
  <void/>
  <desc> This function returns an array of all of the IMAP alert messages generated since the last imap_alerts call, or the beginning of the page. When imap_alerts is called, the alert stack is subsequently cleared. The IMAP specification requires that these messages be passed to the user. </desc>
</methodsynopsis>
<methodsynopsis function="imap_append">
  <type>bool</type>
  <methodname>imap_append</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>imap_append appends a string message to the specified mailbox mbox. If the optional options is specified, writes the options to that mailbox also. </desc>
</methodsynopsis>
<methodsynopsis function="imap_base64">
  <type>string</type>
  <methodname>imap_base64</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>imap_base64 function decodes BASE-64 encoded text (see RFC2045,  Section 6.8). The decoded message is returned as a string. </desc>
</methodsynopsis>
<methodsynopsis function="imap_binary">
  <type>string</type>
  <methodname>imap_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>   Convert an 8bit string to a base64 string (according to RFC2045, Section 6.8). </desc>
</methodsynopsis>
<methodsynopsis function="imap_body">
  <type>string</type>
  <methodname>imap_body</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>imap_body returns the body of the message, numbered msg_number in the current mailbox.  </desc>
</methodsynopsis>
<methodsynopsis function="imap_bodystruct">
  <type>object</type>
  <methodname>imap_bodystruct</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_no</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>section</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imap_check">
  <type>object</type>
  <methodname>imap_check</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc> Returns information about the current mailbox. Returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="imap_clearflag_full">
  <type>bool</type>
  <methodname>imap_clearflag_full</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sequence</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>flag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function causes a store to delete the specified  flag to the flags set for the messages in the specified sequence. The flags which you can unset are "\\Seen", "\\Answered", "\\Flagged", "\\Deleted", and "\\Draft" (as defined by RFC2060). &amp;amp;return.success;. </desc>
</methodsynopsis>
<methodsynopsis function="imap_close">
  <type>bool</type>
  <methodname>imap_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>  Closes the imap stream. Takes an optional flagCL_EXPUNGE,  which will silently expunge the mailbox before closing,  removing all messages marked for deletion. </desc>
</methodsynopsis>
<methodsynopsis function="imap_createmailbox">
  <type>bool</type>
  <methodname>imap_createmailbox</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <desc>imap_createmailbox creates a new mailbox specified by mbox. Names containing  international characters should be encoded by imap_utf7_encode</desc>
</methodsynopsis>
<methodsynopsis function="imap_delete">
  <type>bool</type>
  <methodname>imap_delete</methodname>
  <methodparam>
    <type>int</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="imap_deletemailbox">
  <type>bool</type>
  <methodname>imap_deletemailbox</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <desc>imap_deletemailbox deletes the specified mailbox (see imap_open for the format  of mbox names). </desc>
</methodsynopsis>
<methodsynopsis function="imap_errors">
  <type>array</type>
  <methodname>imap_errors</methodname>
  <void/>
  <desc> This function returns an array of all of the IMAP error messages generated since the last imap_errors call, or the beginning of the page. When imap_errors is called, the error stack is subsequently cleared.   </desc>
</methodsynopsis>
<methodsynopsis function="imap_expunge">
  <type>bool</type>
  <methodname>imap_expunge</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc>imap_expunge deletes all the messages marked for deletion by imap_delete,  imap_mail_move, or  imap_setflag_full. </desc>
</methodsynopsis>
<methodsynopsis function="imap_fetch_overview">
  <type>array</type>
  <methodname>imap_fetch_overview</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sequence</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function fetches mail headers for the given sequence and returns an overview of their contents. sequence will contain a sequence of message indices or UIDs, if flags contains FT_UID. The returned value is an array of objects describing one message header each: subject - the messages subject from - who sent it date - when was it sent message_id - Message-ID  references - is a reference to this message id size - size in bytes uid - UID the message has in the mailbox msgno - message sequence number in the mailbox recent - this message is flagged as recent flagged -  this message is flagged answered -  this message is flagged as answered deleted -  this message is flagged for deletion seen -  this message is flagged as already read draft -  this message is flagged as being a draft </desc>
</methodsynopsis>
<methodsynopsis function="imap_fetchbody">
  <type>string</type>
  <methodname>imap_fetchbody</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>part_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function causes a fetch of a particular section of the body of the specified messages as a text string and returns that text string. The section specification is a string of integers delimited by period which index into a body part list as per the IMAP4 specification. Body parts are not decoded by this function. </desc>
</methodsynopsis>
<methodsynopsis function="imap_fetchheader">
  <type>string</type>
  <methodname>imap_fetchheader</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msgno</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function causes a fetch of the complete, unfiltered  RFC2822 format header of the specified message as a text string and returns that text string. </desc>
</methodsynopsis>
<methodsynopsis function="imap_fetchstructure">
  <type>object</type>
  <methodname>imap_fetchstructure</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function fetches all the structured information for a given message. The optional options parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID. The returned object includes the envelope, internal date, size, flags and body structure along with a similar object for each mime attachment. The structure of the returned objects is as follows: </desc>
</methodsynopsis>
<methodsynopsis function="imap_get_quota">
  <type>array</type>
  <methodname>imap_get_quota</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>quota_root</parameter>
  </methodparam>
  <desc> Returns an array with integer values limit and usage for the given  mailbox.  The value of limit represents the total amount of space allowed for this mailbox.  The usage value represents the mailboxes current level of capacity.  Will return &amp;amp;false; in the case of failure. </desc>
</methodsynopsis>
<methodsynopsis function="imap_get_quotaroot">
  <type>array</type>
  <methodname>imap_get_quotaroot</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>quota_root</parameter>
  </methodparam>
  <desc> Returns an array of integer values pertaining to the specified user  mailbox.  All values contain a key based upon the resource name, and a corresponding array with the usage and limit values within.   </desc>
</methodsynopsis>
<methodsynopsis function="imap_getacl">
  <type>array</type>
  <methodname>imap_getacl</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <desc> This function is currently only available to users of the c-client2000 or greater library. </desc>
</methodsynopsis>
<methodsynopsis function="imap_getmailboxes">
  <type>array</type>
  <methodname>imap_getmailboxes</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ref</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <desc> Returns an array of objects containing mailbox information. Each object has the attributes name, specifying the full name of the mailbox; delimiter, which is the hierarchy delimiter for the part of the hierarchy this mailbox is in; and attributes. Attributes is a bitmask that can be tested against: LATT_NOINFERIORS - This mailbox has no  "children" (there are no mailboxes below this one). LATT_NOSELECT - This is only a container,  not a mailbox - you cannot open it. LATT_MARKED - This mailbox is marked.  Only used by UW-IMAPD. LATT_UNMARKED - This mailbox is not marked.  Only used by UW-IMAPD. </desc>
</methodsynopsis>
<methodsynopsis function="imap_getsubscribed">
  <type>array</type>
  <methodname>imap_getsubscribed</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ref</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <desc> This function is identical to imap_getmailboxes, except that it only returns mailboxes that the user is subscribed to. </desc>
</methodsynopsis>
<methodsynopsis function="imap_headerinfo">
  <type>object</type>
  <methodname>imap_headerinfo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fromlength</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>subjectlength</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>defaulthost</parameter>
  </methodparam>
  <desc> This function returns an object of various header elements. </desc>
</methodsynopsis>
<methodsynopsis function="imap_headers">
  <type>array</type>
  <methodname>imap_headers</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc> Returns an array of string formatted with header info. One element per mail message. </desc>
</methodsynopsis>
<methodsynopsis function="imap_last_error">
  <type>string</type>
  <methodname>imap_last_error</methodname>
  <void/>
  <desc> This function returns the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error subsequently, with no intervening errors, will return the same error. </desc>
</methodsynopsis>
<methodsynopsis function="imap_list">
  <type>array</type>
  <methodname>imap_list</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ref</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <desc> Returns an array containing the names of the mailboxes. See imap_getmailboxes for a description of ref and pattern. </desc>
</methodsynopsis>
<methodsynopsis function="imap_listscan">
  <type>array</type>
  <methodname>imap_listscan</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ref</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Returns an array containing the names of the mailboxes that have content in the text of the mailbox. </desc>
</methodsynopsis>
<methodsynopsis function="imap_lsub">
  <type>array</type>
  <methodname>imap_lsub</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ref</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <desc> Returns an array of all the mailboxes that you have subscribed. </desc>
</methodsynopsis>
<methodsynopsis function="imap_mail_compose">
  <type>string</type>
  <methodname>imap_mail_compose</methodname>
  <methodparam>
    <type>array</type>
    <parameter>envelope</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>body</parameter>
  </methodparam>
  <desc></desc>
</methodsynopsis>
<methodsynopsis function="imap_mail_copy">
  <type>bool</type>
  <methodname>imap_mail_copy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msglist</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>  Copies mail messages specified by msglist to specified mailbox. &amp;amp;return.success;. </desc>
</methodsynopsis>
<methodsynopsis function="imap_mail_move">
  <type>bool</type>
  <methodname>imap_mail_move</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msglist</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>  Moves mail messages specified by msglist to specified mailbox mbox. &amp;amp;return.success;. </desc>
</methodsynopsis>
<methodsynopsis function="imap_mail">
  <type>bool</type>
  <methodname>imap_mail</methodname>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>additional_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>cc</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>bcc</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>rpath</parameter>
  </methodparam>
  <desc> This function allows sending of emails with correct handling of  Cc and Bcc receivers. &amp;amp;return.success;. </desc>
</methodsynopsis>
<methodsynopsis function="imap_mailboxmsginfo">
  <type>object</type>
  <methodname>imap_mailboxmsginfo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc> Returns information about the current mailbox. Returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="imap_mime_header_decode">
  <type>array</type>
  <methodname>imap_mime_header_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>imap_mime_header_decode function decodes  MIME message header extensions that are non ASCII text  (see RFC2047)  The decoded elements are returned in an array of objects,  where each object has two properties, "charset" and "text". If the element hasn't been encoded, and in other words is in  plain US-ASCII,the "charset" property of that element is set to  "default". </desc>
</methodsynopsis>
<methodsynopsis function="imap_msgno">
  <type>int</type>
  <methodname>imap_msgno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc> This function returns the message sequence number for the given uid. It is the inverse of  imap_uid. </desc>
</methodsynopsis>
<methodsynopsis function="imap_num_msg">
  <type>int</type>
  <methodname>imap_num_msg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc> Return the number of messages in the current mailbox. </desc>
</methodsynopsis>
<methodsynopsis function="imap_num_recent">
  <type>int</type>
  <methodname>imap_num_recent</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc> Returns the number of recent messages in the current mailbox. </desc>
</methodsynopsis>
<methodsynopsis function="imap_open">
  <type>resource</type>
  <methodname>imap_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns an IMAP stream on success and &amp;amp;false; on error.  This function can also be used to open streams to POP3 and NNTP servers, but some functions and features are only available on IMAP servers.   </desc>
</methodsynopsis>
<methodsynopsis function="imap_ping">
  <type>bool</type>
  <methodname>imap_ping</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <desc>   Returns &amp;amp;true; if the stream is still alive, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="imap_qprint">
  <type>string</type>
  <methodname>imap_qprint</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>   Convert a quoted-printable string to an 8 bit string (according to RFC2045, section 6.7). </desc>
</methodsynopsis>
<methodsynopsis function="imap_renamemailbox">
  <type>bool</type>
  <methodname>imap_renamemailbox</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>old_mbox</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_mbox</parameter>
  </methodparam>
  <desc>  This function renames on old mailbox to new mailbox (see imap_open for the format of mbox names). </desc>
</methodsynopsis>
<methodsynopsis function="imap_reopen">
  <type>bool</type>
  <methodname>imap_reopen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>   This function reopens the specified stream to a new  mailbox on an IMAP or NNTP server. </desc>
</methodsynopsis>
<methodsynopsis function="imap_rfc822_parse_adrlist">
  <type>array</type>
  <methodname>imap_rfc822_parse_adrlist</methodname>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>default_host</parameter>
  </methodparam>
  <desc> This function parses the address string as defined in  RFC2822 and  for each address, returns an array of objects.   The objects properties are: </desc>
</methodsynopsis>
<methodsynopsis function="imap_rfc822_parse_headers">
  <type>object</type>
  <methodname>imap_rfc822_parse_headers</methodname>
  <methodparam>
    <type>string</type>
    <parameter>headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>defaulthost</parameter>
  </methodparam>
  <desc> This function returns an object of various header elements, similar to imap_header, except without the flags and other elements that come from the IMAP server. </desc>
</methodsynopsis>
<methodsynopsis function="imap_rfc822_write_address">
  <type>string</type>
  <methodname>imap_rfc822_write_address</methodname>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>personal</parameter>
  </methodparam>
  <desc> Returns a properly formatted email address as defined in  RFC2822 given the mailbox, host, and personal info. </desc>
</methodsynopsis>
<methodsynopsis function="imap_search">
  <type>array</type>
  <methodname>imap_search</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>criteria</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> This function performs a search on the mailbox currently opened in the given imap stream. criteria is a string, delimited by spaces, in which the following keywords are allowed. Any multi-word arguments (e.g. FROM "joey smith") must be quoted. ALL - return all messages matching the rest of the criteria ANSWERED - match messages with the \\ANSWERED flag set BCC "string" - match messages with "string" in the Bcc: field BEFORE "date" - match messages with Date: before "date" BODY "string" - match messages with "string" in the body of the message CC "string" - match messages with "string" in the Cc: field DELETED - match deleted messages FLAGGED - match messages with the \\FLAGGED (sometimes referred to as Important or Urgent) flag set FROM "string" - match messages with "string" in the From: field KEYWORD "string" - match messages with "string" as a keyword NEW - match new messages OLD - match old messages ON "date" - match messages with Date: matching "date" RECENT - match messages with the \\RECENT flag set SEEN - match messages that have been read (the \\SEEN flag is set) SINCE "date" - match messages with Date: after "date" SUBJECT "string" - match messages with "string" in the Subject: TEXT "string" - match messages with text "string" TO "string" - match messages with "string" in the To: UNANSWERED - match messages that have not been answered UNDELETED - match messages that are not deleted UNFLAGGED - match messages that are not flagged UNKEYWORD "string" - match messages that do not have the keyword "string" UNSEEN - match messages which have not been read yet </desc>
</methodsynopsis>
<methodsynopsis function="imap_set_quota">
  <type>bool</type>
  <methodname>imap_set_quota</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>quota_root</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>quota_limit</parameter>
  </methodparam>
  <desc>   Sets an upper limit quota on a per mailbox basis.  This function requires the imap_stream to have been opened as the mail administrator account.  It will not work if opened as any other user.  </desc>
</methodsynopsis>
<methodsynopsis function="imap_setacl">
  <type>bool</type>
  <methodname>imap_setacl</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>rights</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="imap_setflag_full">
  <type>bool</type>
  <methodname>imap_setflag_full</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sequence</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>flag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function causes a store to add the specified  flag to the flags set for the messages in the specified sequence. </desc>
</methodsynopsis>
<methodsynopsis function="imap_sort">
  <type>array</type>
  <methodname>imap_sort</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>criteria</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>reverse</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>search_criteria</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Returns an array of message numbers sorted by the given parameters. </desc>
</methodsynopsis>
<methodsynopsis function="imap_status">
  <type>object</type>
  <methodname>imap_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function returns an object containing status information. Valid flags are: SA_MESSAGES - set status-&amp;gt;messages to the number of messages in the mailbox SA_RECENT - set status-&amp;gt;recent to the number of recent messages in the mailbox SA_UNSEEN - set status-&amp;gt;unseen to the number of unseen (new) messages in the mailbox SA_UIDNEXT - set status-&amp;gt;uidnext to the next uid to be used in the mailbox SA_UIDVALIDITY - set status-&amp;gt;uidvalidity to a constant that changes when uids for the mailbox may no longer be valid SA_ALL - set all of the above </desc>
</methodsynopsis>
<methodsynopsis function="imap_subscribe">
  <type>bool</type>
  <methodname>imap_subscribe</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <desc>   Subscribe to a new mailbox. </desc>
</methodsynopsis>
<methodsynopsis function="imap_thread">
  <type>array</type>
  <methodname>imap_thread</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>imap_thread returns an associative array containing a tree of messages threaded by REFERENCES, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="imap_timeout">
  <type>mixed</type>
  <methodname>imap_timeout</methodname>
  <methodparam>
    <type>int</type>
    <parameter>timeout_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="imap_uid">
  <type>int</type>
  <methodname>imap_uid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msgno</parameter>
  </methodparam>
  <desc> This function returns the UID for the given message sequence number. An UID is an unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.  This function is the inverse of imap_msgno. </desc>
</methodsynopsis>
<methodsynopsis function="imap_undelete">
  <type>bool</type>
  <methodname>imap_undelete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>  This function removes the deletion flag for a specified message, which is set by imap_delete or imap_mail_move. </desc>
</methodsynopsis>
<methodsynopsis function="imap_unsubscribe">
  <type>bool</type>
  <methodname>imap_unsubscribe</methodname>
  <methodparam>
    <type>string</type>
    <parameter>imap_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mbox</parameter>
  </methodparam>
  <desc>   Unsubscribe from a specified mailbox. </desc>
</methodsynopsis>
<methodsynopsis function="imap_utf7_decode">
  <type>string</type>
  <methodname>imap_utf7_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>   Decodes modified UTF-7 text into ISO-8859-1 string. </desc>
</methodsynopsis>
<methodsynopsis function="imap_utf7_encode">
  <type>string</type>
  <methodname>imap_utf7_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> Converts data to modified UTF-7 text. Note that data is expected to be encoded in ISO-8859-1. </desc>
</methodsynopsis>
<methodsynopsis function="imap_utf8">
  <type>string</type>
  <methodname>imap_utf8</methodname>
  <methodparam>
    <type>string</type>
    <parameter>mime_encoded_text</parameter>
  </methodparam>
  <desc> Converts the given mime_encoded_text to  UTF-8. MIME encoding method and the UTF-8 specification are described in RFC2047 and  RFC2044 respectively. </desc>
</methodsynopsis>
<methodsynopsis function="assert_options">
  <type>mixed</type>
  <methodname>assert_options</methodname>
  <methodparam>
    <type>int</type>
    <parameter>what</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Using assert_options you may set the various assert control options or just query their current settings. </desc>
</methodsynopsis>
<methodsynopsis function="assert">
  <type>int</type>
  <methodname>assert</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>assertion</parameter>
  </methodparam>
  <desc>assert will check the given assertion and take appropriate action if its result is &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="dl">
  <type>int</type>
  <methodname>dl</methodname>
  <methodparam>
    <type>string</type>
    <parameter>library</parameter>
  </methodparam>
  <desc> Loads the PHP extension given by the parameter library. The library parameter is only the filename of the extension to load which also depends on your platform. For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on Unix platforms whereas it is called php_sockets.dll on the Windows platform. </desc>
</methodsynopsis>
<methodsynopsis function="extension_loaded">
  <type>bool</type>
  <methodname>extension_loaded</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the extension identified by name is loaded, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="get_cfg_var">
  <type>string</type>
  <methodname>get_cfg_var</methodname>
  <methodparam>
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="get_current_user">
  <type>string</type>
  <methodname>get_current_user</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="get_defined_constants">
  <type>array</type>
  <methodname>get_defined_constants</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>categorize</parameter>
  </methodparam>
  <desc> This function returns the names and values of all the constants currently defined.  This includes those created by extensions as well as those created with the define function. </desc>
</methodsynopsis>
<methodsynopsis function="get_extension_funcs">
  <type>array</type>
  <methodname>get_extension_funcs</methodname>
  <methodparam>
    <type>string</type>
    <parameter>module_name</parameter>
  </methodparam>
  <desc> This function returns the names of all the functions defined in the module indicated by module_name. </desc>
</methodsynopsis>
<methodsynopsis function="get_include_path">
  <type>string</type>
  <methodname>get_include_path</methodname>
  <void/>
  <desc> get_include_path example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="get_included_files">
  <type>array</type>
  <methodname>get_included_files</methodname>
  <void/>
  <desc> Returns an array of the names of all files that have been included using include, include_once, require or require_once. </desc>
</methodsynopsis>
<methodsynopsis function="get_loaded_extensions">
  <type>array</type>
  <methodname>get_loaded_extensions</methodname>
  <void/>
  <desc> This function returns the names of all the modules compiled and loaded in the PHP interpreter. </desc>
</methodsynopsis>
<methodsynopsis function="get_magic_quotes_gpc">
  <type>int</type>
  <methodname>get_magic_quotes_gpc</methodname>
  <void/>
  <desc> If the directive  magic_quotes_sybase is ON it will completely override  magic_quotes_gpc.  So even when get_magic_quotes_gpc returns &amp;amp;true; neither double quotes, backslashes or NUL's will be escaped.  Only single quotes will be escaped. In this case they'll look like: ''</desc>
</methodsynopsis>
<methodsynopsis function="get_magic_quotes_runtime">
  <type>int</type>
  <methodname>get_magic_quotes_runtime</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="getenv">
  <type>string</type>
  <methodname>getenv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
  <desc> Returns the value of the environment variable varname, or &amp;amp;false; on an error. ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="getlastmod">
  <type>int</type>
  <methodname>getlastmod</methodname>
  <void/>
  <desc> Returns the time of the last modification of the current page. The value returned is a Unix timestamp, suitable for feeding to date. Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="getmygid">
  <type>int</type>
  <methodname>getmygid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="getmyinode">
  <type>int</type>
  <methodname>getmyinode</methodname>
  <void/>
  <desc> Returns the current script's inode, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="getmypid">
  <type>int</type>
  <methodname>getmypid</methodname>
  <void/>
  <desc> Returns the current PHP process ID, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="getmyuid">
  <type>int</type>
  <methodname>getmyuid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="getopt">
  <type>array</type>
  <methodname>getopt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>longopts</parameter>
  </methodparam>
  <desc> Returns an associative array of option / argument pairs based on the options format specified in options, or &amp;amp;false; on an error. </desc>
</methodsynopsis>
<methodsynopsis function="getrusage">
  <type>array</type>
  <methodname>getrusage</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>who</parameter>
  </methodparam>
  <desc> This is an interface to getrusage(2). It returns an associative array containing the data returned from the system call. If who is 1, getrusage will be called with RUSAGE_CHILDREN. </desc>
</methodsynopsis>
<methodsynopsis function="ini_get_all">
  <type>array</type>
  <methodname>ini_get_all</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extension</parameter>
  </methodparam>
  <desc> Returns all the registered configuration options as an associative array.  If the optional extension parameter is set, returns only options specific for that extension. </desc>
</methodsynopsis>
<methodsynopsis function="ini_get">
  <type>string</type>
  <methodname>ini_get</methodname>
  <methodparam>
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
  <desc> Returns the value of the configuration option on success.  Failure, such as querying for a non-existent value, will return an empty string. </desc>
</methodsynopsis>
<methodsynopsis function="ini_restore">
  <type>void</type>
  <methodname>ini_restore</methodname>
  <methodparam>
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
  <desc> Restores a given configuration option to its original value. </desc>
</methodsynopsis>
<methodsynopsis function="ini_set">
  <type>string</type>
  <methodname>ini_set</methodname>
  <methodparam>
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newvalue</parameter>
  </methodparam>
  <desc> Sets the value of the given configuration option. Returns the old value on success, &amp;amp;false; on failure. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending. </desc>
</methodsynopsis>
<methodsynopsis function="memory_get_usage">
  <type>int</type>
  <methodname>memory_get_usage</methodname>
  <void/>
  <desc> Returns the amount of memory, in bytes, that's currently being allocated to your PHP script. </desc>
</methodsynopsis>
<methodsynopsis function="php_ini_scanned_files">
  <type>string</type>
  <methodname>php_ini_scanned_files</methodname>
  <void/>
  <desc> A simple example to list the returned ini files 0) { $files = explode(',', $filelist); foreach ($files as $file) { echo "" . trim($file) . "\n"; } }
}
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="php_logo_guid">
  <type>string</type>
  <methodname>php_logo_guid</methodname>
  <void/>
  <desc> This function returns the ID which can be used to display the PHP logo using the built-in image. </desc>
</methodsynopsis>
<methodsynopsis function="php_sapi_name">
  <type>string</type>
  <methodname>php_sapi_name</methodname>
  <void/>
  <desc> php_sapi_name example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="php_uname">
  <type>string</type>
  <methodname>php_uname</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>php_uname returns a description of the operating system PHP is running on. For the name of just the operating system, consider using the PHP_OS constant, but be reminded this constant will contain the operating system PHP was built on. </desc>
</methodsynopsis>
<methodsynopsis function="phpcredits">
  <type>void</type>
  <methodname>phpcredits</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc> This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page. flag is optional, and it defaults to CREDITS_ALL. To generate a custom credits page, you may want to use the flag parameter.  For example to print the general credits, you will use somewhere in your code: </desc>
</methodsynopsis>
<methodsynopsis function="phpinfo">
  <type>int</type>
  <methodname>phpinfo</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>what</parameter>
  </methodparam>
  <desc> Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License. </desc>
</methodsynopsis>
<methodsynopsis function="phpversion">
  <type>string</type>
  <methodname>phpversion</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extension</parameter>
  </methodparam>
  <desc> Returns a string containing the version of the currently running PHP parser. If the optional extension parameter is specified, phpversion returns the version of that extension, or &amp;amp;false; if there is no version information associated or the extension isn't enabled. </desc>
</methodsynopsis>
<methodsynopsis function="putenv">
  <type>void</type>
  <methodname>putenv</methodname>
  <methodparam>
    <type>string</type>
    <parameter>setting</parameter>
  </methodparam>
  <desc> Adds setting to the server environment.  The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state. </desc>
</methodsynopsis>
<methodsynopsis function="restore_include_path">
  <type>void</type>
  <methodname>restore_include_path</methodname>
  <void/>
  <desc> restore_include_path example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="set_include_path">
  <type>string</type>
  <methodname>set_include_path</methodname>
  <methodparam>
    <type>string</type>
    <parameter>new_include_path</parameter>
  </methodparam>
  <desc> set_include_path example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="set_magic_quotes_runtime">
  <type>bool</type>
  <methodname>set_magic_quotes_runtime</methodname>
  <methodparam>
    <type>int</type>
    <parameter>new_setting</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="set_time_limit">
  <type>void</type>
  <methodname>set_time_limit</methodname>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <desc>set_time_limit has no effect when PHP is running in &amp;amp;safemode;. There is no workaround other than turning off safe mode or changing the time limit in the &amp;amp;php.ini;. </desc>
</methodsynopsis>
<methodsynopsis function="version_compare">
  <type>int</type>
  <methodname>version_compare</methodname>
  <methodparam>
    <type>string</type>
    <parameter>version1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>version2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        operator
       </parameter>
  </methodparam>
  <desc>version_compare compares two "PHP-standardized" version number strings. This is useful if you would like to write programs working only on some versions of PHP. </desc>
</methodsynopsis>
<methodsynopsis function="zend_logo_guid">
  <type>string</type>
  <methodname>zend_logo_guid</methodname>
  <void/>
  <desc> This function returns the ID which can be used to display the Zend logo using the built-in image. </desc>
</methodsynopsis>
<methodsynopsis function="zend_version">
  <type>string</type>
  <methodname>zend_version</methodname>
  <void/>
  <desc> Returns a string containing the version of the currently running Zend Engine. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_autocommit">
  <type>bool</type>
  <methodname>ingres_autocommit</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_autocommit is called before opening a transaction (before the first call to ingres_query or just after a call to ingres_rollback or ingres_commit) to switch the "autocommit" mode of the server on or off (when the script begins the autocommit mode is off). </desc>
</methodsynopsis>
<methodsynopsis function="ingres_close">
  <type>bool</type>
  <methodname>ingres_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_commit">
  <type>bool</type>
  <methodname>ingres_commit</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_commit commits the currently open transaction, making all changes made to the database permanent. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_connect">
  <type>resource</type>
  <methodname>ingres_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Returns a Ingres II link resource on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_fetch_array">
  <type>array</type>
  <methodname>ingres_fetch_array</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_fetch_array Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_fetch_object">
  <type>object</type>
  <methodname>ingres_fetch_object</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_fetch_object Returns an object that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_fetch_row">
  <type>array</type>
  <methodname>ingres_fetch_row</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_fetch_row returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. Each result column is stored in an array offset, starting at offset 1. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_length">
  <type>int</type>
  <methodname>ingres_field_length</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_length returns the length of a field.  This is the number of bytes used by the server to store the field.  For detailed information, see the Ingres/OpenAPI User Guide - Appendix C. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_name">
  <type>string</type>
  <methodname>ingres_field_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_name returns the name of a field in a query result, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_nullable">
  <type>bool</type>
  <methodname>ingres_field_nullable</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_nullable returns &amp;amp;true; if the field can be set to the &amp;amp;null; value and &amp;amp;false; if it can't. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_precision">
  <type>int</type>
  <methodname>ingres_field_precision</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_precision returns the precision of a field. This value is used only for decimal, float and money SQL data types. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_scale">
  <type>int</type>
  <methodname>ingres_field_scale</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_scale returns the scale of a field.  This value is used only for the decimal SQL data type. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_field_type">
  <type>string</type>
  <methodname>ingres_field_type</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_field_type returns the type of a field in a query result, or &amp;amp;false; on failure.  Examples of types returned are "IIAPI_BYTE_TYPE", "IIAPI_CHA_TYPE", "IIAPI_DTE_TYPE", "IIAPI_FLT_TYPE", "IIAPI_INT_TYPE", "IIAPI_VCH_TYPE". Some of these types can map to more than one SQL type depending on the length of the field (see ingres_field_length). For example "IIAPI_FLT_TYPE" can be a float4 or a float8. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_num_fields">
  <type>int</type>
  <methodname>ingres_num_fields</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_num_fields returns the number of fields in the results returned by the Ingres server after a call to ingres_query</desc>
</methodsynopsis>
<methodsynopsis function="ingres_num_rows">
  <type>int</type>
  <methodname>ingres_num_rows</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> For delete, insert or update queries, ingres_num_rows returns the number of rows affected by the query. For other queries, ingres_num_rows returns the number of rows in the query's result. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_pconnect">
  <type>resource</type>
  <methodname>ingres_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Returns a Ingres II link resource on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_query">
  <type>bool</type>
  <methodname>ingres_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ingres_rollback">
  <type>bool</type>
  <methodname>ingres_rollback</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>ingres_rollback rolls back the currently open transaction, actually canceling all changes made to the database during the transaction. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_channel_mode">
  <type>bool</type>
  <methodname>ircg_channel_mode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode_spec</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> Set channel mode flags for channel on server connected to by connection. Mode flags are passed in mode_spec and are applied to the user specified by nick. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_disconnect">
  <type>bool</type>
  <methodname>ircg_disconnect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>reason</parameter>
  </methodparam>
  <desc>ircg_disconnect will close a connection to a server previously established with ircg_pconnect. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_eval_ecmascript_params">
  <type>array</type>
  <methodname>ircg_eval_ecmascript_params</methodname>
  <methodparam>
    <type>string</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> See also  ircg_lookup_format_messages. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_fetch_error_msg">
  <type>array</type>
  <methodname>ircg_fetch_error_msg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ircg_fetch_error_msg returns the error from a failed connection. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_get_username">
  <type>string</type>
  <methodname>ircg_get_username</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Function ircg_get_username returns the username for the specified connection connection. Returns &amp;amp;false; if connection died or is not valid. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_html_encode">
  <type>bool</type>
  <methodname>ircg_html_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>html_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>auto_links</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>conv_br</parameter>
  </methodparam>
  <desc> Encodes a HTML string html_string for output. This exposes the interface which the IRCG extension uses internally to reformat data coming from an IRC link. The function causes IRC color/font codes to be encoded in HTML and escapes certain entities. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_ignore_add">
  <type>bool</type>
  <methodname>ircg_ignore_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> This function adds user nick to the ignore list of connection connection. Afterwards, IRCG will suppress all messages from this user through the associated connection. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_ignore_del">
  <type>bool</type>
  <methodname>ircg_ignore_del</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> This function removes user nick from the IRCG ignore list associated with connection. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_invite">
  <type>bool</type>
  <methodname>ircg_invite</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nickname</parameter>
  </methodparam>
  <desc>ircg_invite will send an invitation to the user nickname, prompting him to join channel. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ircg_is_conn_alive">
  <type>bool</type>
  <methodname>ircg_is_conn_alive</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ircg_is_conn_alive returns &amp;amp;true; if connection is still alive and working or &amp;amp;false;, if the connection has died for some reason. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_join">
  <type>bool</type>
  <methodname>ircg_join</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc> Join the channel channel on the server connected to by connection. IRCG will optionally pass the room key key. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_kick">
  <type>bool</type>
  <methodname>ircg_kick</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>reason</parameter>
  </methodparam>
  <desc> Kick user nick from channel on server connected to by connection. reason should give a short message describing why this action was performed. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_list">
  <type>bool</type>
  <methodname>ircg_list</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <desc> ircg_list example ";
} // send list command
ircg_list($id, $channel); // wait for output to arrive
sleep(5); // disconnect
ircg_disconnect($id,'Bye World'); // output everything
readfile('irc_output.html'); ?&amp;gt;
]]&amp;gt; This example will output something similar to: </desc>
</methodsynopsis>
<methodsynopsis function="ircg_lookup_format_messages">
  <type>bool</type>
  <methodname>ircg_lookup_format_messages</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Check for the existence of the format message set name.  Sets may be registered with ircg_register_format_messages, a default set named ircg is always available. Returns &amp;amp;true;, if the set exists and &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_lusers">
  <type>bool</type>
  <methodname>ircg_lusers</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ircg_lusers will request a statistical breakdown of users on the network connected to on connection. The answer is sent to the output defined by ircg_set_file or ircg_set_current. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ircg_msg">
  <type>bool</type>
  <methodname>ircg_msg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>recipient</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>suppress</parameter>
  </methodparam>
  <desc>ircg_msg will send the message to a channel or user on the server connected to by connection. A recipient starting with # or &amp;amp; will send the message to a channel, anything else will be interpreted as a username. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_names">
  <type>bool</type>
  <methodname>ircg_names</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ircg_nick">
  <type>bool</type>
  <methodname>ircg_nick</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> Change your nickname on the given connection to the one given in nick, if possible. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_nickname_escape">
  <type>string</type>
  <methodname>ircg_nickname_escape</methodname>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> Function ircg_nickname_escape returns an encoded  nickname specified by nick which is IRC-compliant. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_nickname_unescape">
  <type>string</type>
  <methodname>ircg_nickname_unescape</methodname>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> Function ircg_nickname_unescape returns a decoded nickname, which is specified in nick. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_notice">
  <type>bool</type>
  <methodname>ircg_notice</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>recipient</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <desc> This function will send the message text to the user nick on the server connected to by connection. IRC servers and other software will not automatically generate replies to NOTICEs in contrast to other message types. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_oper">
  <type>bool</type>
  <methodname>ircg_oper</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>ircg_oper will authenticate the logged in user on connection as an IRC operator. name and password must match a registered IRC operator account. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ircg_part">
  <type>bool</type>
  <methodname>ircg_part</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <desc> Leave the channel channel on the server connected to by connection. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_pconnect">
  <type>resource</type>
  <methodname>ircg_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>server_ip</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>server_port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>msg_format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>ctcp_messages</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>user_settings</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>bailout_on_trivial</parameter>
  </methodparam>
  <desc>ircg_pconnect will try to establish a connection to an IRC server and return a connection resource handle for further use. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_register_format_messages">
  <type>bool</type>
  <methodname>ircg_register_format_messages</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>messages</parameter>
  </methodparam>
  <desc> With ircg_register_format_messages you can customize the way your IRC output looks like or which script functions are invoked on the client side. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_set_current">
  <type>bool</type>
  <methodname>ircg_set_current</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Select the current HTTP connection for output in this execution context. Every output sent from the server connected to by connection will be copied to standard output while using default formatting or a format message set specified by ircg_register_format_messages. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_set_file">
  <type>bool</type>
  <methodname>ircg_set_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc> Function ircg_set_file specifies a logfile path in which all output from connection connection will be logged.  Returns &amp;amp;true; on success, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_set_on_die">
  <type>bool</type>
  <methodname>ircg_set_on_die</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> In case of the termination of connection connection IRCG will connect to host at port (Note: host must be an IPv4 address, IRCG does not resolve host-names due to blocking issues), send data to the new host connection and will wait until the remote part closes connection. This can be used to trigger a PHP script for example.  </desc>
</methodsynopsis>
<methodsynopsis function="ircg_topic">
  <type>bool</type>
  <methodname>ircg_topic</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_topic</parameter>
  </methodparam>
  <desc> Change the topic for channel channel on the server connected to by connection to new_topic. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_who">
  <type>bool</type>
  <methodname>ircg_who</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mask</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>ops_only</parameter>
  </methodparam>
  <desc>ircg_who will request a list of users whose nickname is matching mask on connected network connection. The optional parameter ops_only will shrink the list to server operators only. </desc>
</methodsynopsis>
<methodsynopsis function="ircg_whois">
  <type>bool</type>
  <methodname>ircg_whois</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>nick</parameter>
  </methodparam>
  <desc> Sends a query to the connected server connection to ask for information about the specified user nick. </desc>
</methodsynopsis>
<methodsynopsis function="java_last_exception_clear">
  <type>void</type>
  <methodname>java_last_exception_clear</methodname>
  <void/>
  <desc> See java_last_exception_get for an example. </desc>
</methodsynopsis>
<methodsynopsis function="java_last_exception_get">
  <type>object</type>
  <methodname>java_last_exception_get</methodname>
  <void/>
  <desc> The following example demonstrates the usage of Java's exception  handler from within PHP: Java exception handlerpush(1); // This should succeed
$result = $stack-&amp;gt;pop();
$ex = java_last_exception_get();
if (!$ex) { echo "$result\n";
} // This should fail (error suppressed by @)
$result = @$stack-&amp;gt;pop();
$ex = java_last_exception_get();
if ($ex) { echo $ex-&amp;gt;toString();
} // Clear last exception
java_last_exception_clear();
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ldap_8859_to_t61">
  <type>string</type>
  <methodname>ldap_8859_to_t61</methodname>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_add">
  <type>bool</type>
  <methodname>ldap_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ldap_bind">
  <type>bool</type>
  <methodname>ldap_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>bind_rdn</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>bind_password</parameter>
  </methodparam>
  <desc> Binds to the LDAP directory with specified RDN and password. &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_close">
  <type>bool</type>
  <methodname>ldap_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ldap_compare">
  <type>bool</type>
  <methodname>ldap_compare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>attribute</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>ldap_compare is used to compare value of attribute to value of same attribute in LDAP directory  entry specified with dn.  </desc>
</methodsynopsis>
<methodsynopsis function="ldap_connect">
  <type>resource</type>
  <methodname>ldap_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc> Returns a positive LDAP link identifier on success, or &amp;amp;false; on error.  When OpenLDAP 2.x.x is used, ldap_connect  will always return a resource as it does not actually  connect but just initializes the connecting parameters.  The actual  connect happens with the next calls to ldap_* funcs, usually with  ldap_bind. </desc>
</methodsynopsis>
<methodsynopsis function="ldap_count_entries">
  <type>int</type>
  <methodname>ldap_count_entries</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <desc> Returns number of entries in the result or &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_delete">
  <type>bool</type>
  <methodname>ldap_delete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_dn2ufn">
  <type>string</type>
  <methodname>ldap_dn2ufn</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <desc>ldap_dn2ufn function is used to turn a DN, specified by dn, into a more user-friendly form, stripping off type names. </desc>
</methodsynopsis>
<methodsynopsis function="ldap_err2str">
  <type>string</type>
  <methodname>ldap_err2str</methodname>
  <methodparam>
    <type>int</type>
    <parameter>errno</parameter>
  </methodparam>
  <desc> Returns string error message.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_errno">
  <type>int</type>
  <methodname>ldap_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Return the LDAP error number of the last LDAP command for this link.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_error">
  <type>string</type>
  <methodname>ldap_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns string error message.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_explode_dn">
  <type>array</type>
  <methodname>ldap_explode_dn</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>with_attrib</parameter>
  </methodparam>
  <desc>ldap_explode_dn function is used to split the DN returned by ldap_get_dn and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN. ldap_explode_dn returns an array of all those components. with_attrib is used to request if the RDNs are returned with only values or their attributes as well.  To get RDNs with the attributes (i.e. in attribute=value format) set with_attrib to 0 and to get only values set it to 1.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_first_attribute">
  <type>string</type>
  <methodname>ldap_first_attribute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">ber_identifier</parameter>
  </methodparam>
  <desc> Returns the first attribute in the entry on success and &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="ldap_first_entry">
  <type>resource</type>
  <methodname>ldap_first_entry</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <desc> Returns the result entry identifier for the first entry on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_first_reference">
  <type>resource</type>
  <methodname>ldap_first_reference</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_free_result">
  <type>bool</type>
  <methodname>ldap_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_attributes">
  <type>array</type>
  <methodname>ldap_get_attributes</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <desc> Returns a complete entry information in a multi-dimensional array on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_dn">
  <type>string</type>
  <methodname>ldap_get_dn</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <desc> Returns the DN of the result entry and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_entries">
  <type>array</type>
  <methodname>ldap_get_entries</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <desc> Returns a complete result information in a multi-dimensional array on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_option">
  <type>bool</type>
  <methodname>ldap_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">retval</parameter>
  </methodparam>
  <desc> Sets retval to the value of the specified option. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_values_len">
  <type>array</type>
  <methodname>ldap_get_values_len</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>attribute</parameter>
  </methodparam>
  <desc> Returns an array of values for the attribute on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_get_values">
  <type>array</type>
  <methodname>ldap_get_values</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>attribute</parameter>
  </methodparam>
  <desc> Returns an array of values for the attribute on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_list">
  <type>resource</type>
  <methodname>ldap_list</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>base_dn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>attributes</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>attrsonly</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sizelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>deref</parameter>
  </methodparam>
  <desc> Returns a search result identifier or &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_mod_add">
  <type>bool</type>
  <methodname>ldap_mod_add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_mod_del">
  <type>bool</type>
  <methodname>ldap_mod_del</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_mod_replace">
  <type>bool</type>
  <methodname>ldap_mod_replace</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_modify">
  <type>bool</type>
  <methodname>ldap_modify</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="ldap_next_attribute">
  <type>string</type>
  <methodname>ldap_next_attribute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter role="reference">ber_identifier</parameter>
  </methodparam>
  <desc> Returns the next attribute in an entry on success and &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_next_entry">
  <type>resource</type>
  <methodname>ldap_next_entry</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result_entry_identifier</parameter>
  </methodparam>
  <desc> Returns entry identifier for the next entry in the result whose entries are being read starting with ldap_first_entry. If there are no more entries in the result then it returns &amp;amp;false;.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_next_reference">
  <type>resource</type>
  <methodname>ldap_next_reference</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>entry</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_parse_reference">
  <type>bool</type>
  <methodname>ldap_parse_reference</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>entry</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">referrals</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_parse_result">
  <type>bool</type>
  <methodname>ldap_parse_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">errcode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">matcheddn</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">errmsg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">referrals</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_read">
  <type>resource</type>
  <methodname>ldap_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>base_dn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>attributes</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>attrsonly</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sizelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>deref</parameter>
  </methodparam>
  <desc> Returns a search result identifier or &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_rename">
  <type>bool</type>
  <methodname>ldap_rename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newrdn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newparent</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>deleteoldrdn</parameter>
  </methodparam>
  <desc> The entry specified by dn is renamed/moved. The new RDN is specified by newrdn and the new parent/superior entry is specified by newparent. If the parameter deleteoldrdn is &amp;amp;true; the old RDN value(s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ldap_sasl_bind">
  <type>bool</type>
  <methodname>ldap_sasl_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ldap_search">
  <type>resource</type>
  <methodname>ldap_search</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>base_dn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>attributes</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>attrsonly</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sizelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timelimit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>deref</parameter>
  </methodparam>
  <desc> Returns a search result identifier or &amp;amp;false; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_set_option">
  <type>bool</type>
  <methodname>ldap_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>newval</parameter>
  </methodparam>
  <desc> Sets the value of the specified option to be newval. &amp;amp;return.success; on error.</desc>
</methodsynopsis>
<methodsynopsis function="ldap_set_rebind_proc">
  <type>bool</type>
  <methodname>ldap_set_rebind_proc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_sort">
  <type>bool</type>
  <methodname>ldap_sort</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sortfilter</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_start_tls">
  <type>bool</type>
  <methodname>ldap_start_tls</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_t61_to_8859">
  <type>string</type>
  <methodname>ldap_t61_to_8859</methodname>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ldap_unbind">
  <type>bool</type>
  <methodname>ldap_unbind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> &amp;amp;return.success;</desc>
</methodsynopsis>
<methodsynopsis function="libxml_clear_errors">
  <type>void</type>
  <methodname>libxml_clear_errors</methodname>
  <void/>
  <desc>libxml_clear_errors clears the libxml error buffer. </desc>
</methodsynopsis>
<methodsynopsis function="libxml_get_errors">
  <type>array</type>
  <methodname>libxml_get_errors</methodname>
  <void/>
  <desc> Retrieve array of errors. </desc>
</methodsynopsis>
<methodsynopsis function="libxml_get_last_error">
  <type>LibXMLError</type>
  <methodname>libxml_get_last_error</methodname>
  <void/>
  <desc> Retrieve last error from libxml. </desc>
</methodsynopsis>
<methodsynopsis function="libxml_set_streams_context">
  <type>void</type>
  <methodname>libxml_set_streams_context</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>streams_context</parameter>
  </methodparam>
  <desc> Sets the streams context for the next libxml document load or write. </desc>
</methodsynopsis>
<methodsynopsis function="libxml_use_internal_errors">
  <type>bool</type>
  <methodname>libxml_use_internal_errors</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_errors</parameter>
  </methodparam>
  <desc>libxml_use_internal_errors allows you to disable standard libxml errors and enable user error handling. </desc>
</methodsynopsis>
<methodsynopsis function="lzf_compress">
  <type>string</type>
  <methodname>lzf_compress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>lzf_compress compresses the given  data. </desc>
</methodsynopsis>
<methodsynopsis function="lzf_decompress">
  <type>string</type>
  <methodname>lzf_decompress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>lzf_compress decompresses the given  data. </desc>
</methodsynopsis>
<methodsynopsis function="lzf_optimized_for">
  <type>int</type>
  <methodname>lzf_optimized_for</methodname>
  <void/>
  <desc> Determines for what the LZF extension was optimised. </desc>
</methodsynopsis>
<methodsynopsis function="ezmlm_hash">
  <type>int</type>
  <methodname>ezmlm_hash</methodname>
  <methodparam>
    <type>string</type>
    <parameter>addr</parameter>
  </methodparam>
  <desc> addr The email address that's being hashed. </desc>
</methodsynopsis>
<methodsynopsis function="mail">
  <type>bool</type>
  <methodname>mail</methodname>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>additional_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>additional_parameters</parameter>
  </methodparam>
  <desc> Sends an email. </desc>
</methodsynopsis>
<methodsynopsis function="mailparse_determine_best_xfer_encoding">
  <type>int</type>
  <methodname>mailparse_determine_best_xfer_encoding</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fp</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_create">
  <type>int</type>
  <methodname>mailparse_msg_create</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_extract_part_file">
  <type>string</type>
  <methodname>mailparse_msg_extract_part_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>callback</type>
    <parameter>callbackfunc</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_extract_part">
  <type>void</type>
  <methodname>mailparse_msg_extract_part</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>msgbody</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>callback</type>
    <parameter>callbackfunc</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_free">
  <type>void</type>
  <methodname>mailparse_msg_free</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045buf</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_get_part_data">
  <type>array</type>
  <methodname>mailparse_msg_get_part_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_get_part">
  <type>int</type>
  <methodname>mailparse_msg_get_part</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mimesection</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_get_structure">
  <type>array</type>
  <methodname>mailparse_msg_get_structure</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_parse_file">
  <type>resource</type>
  <methodname>mailparse_msg_parse_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_msg_parse">
  <type>void</type>
  <methodname>mailparse_msg_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rfc2045buf</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_rfc822_parse_addresses">
  <type>array</type>
  <methodname>mailparse_rfc822_parse_addresses</methodname>
  <methodparam>
    <type>string</type>
    <parameter>addresses</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_stream_encode">
  <type>bool</type>
  <methodname>mailparse_stream_encode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sourcefp</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>destfp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mailparse_uudecode_all">
  <type>array</type>
  <methodname>mailparse_uudecode_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>fp</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="abs">
  <type>number</type>
  <methodname>abs</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> Returns the absolute value of number. If the argument number is of type float, the return type is also float,  otherwise it is integer (as float usually has a bigger value range than integer). </desc>
</methodsynopsis>
<methodsynopsis function="acos">
  <type>float</type>
  <methodname>acos</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the arc cosine of arg in radians. acos is the complementary function of cos, which means that a==cos(acos(a)) for every value of a that is within acos' range. </desc>
</methodsynopsis>
<methodsynopsis function="acosh">
  <type>float</type>
  <methodname>acosh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg. </desc>
</methodsynopsis>
<methodsynopsis function="asin">
  <type>float</type>
  <methodname>asin</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the arc sine of arg in radians. asin is the complementary function of sin, which means that a==sin(asin(a)) for every value of a that is within asin's range. </desc>
</methodsynopsis>
<methodsynopsis function="asinh">
  <type>float</type>
  <methodname>asinh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg. </desc>
</methodsynopsis>
<methodsynopsis function="atan">
  <type>float</type>
  <methodname>atan</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the arc tangent of arg in radians. atan is the complementary function of tan, which means that a==tan(atan(a)) for every value of a that is within atan's range. </desc>
</methodsynopsis>
<methodsynopsis function="atan2">
  <type>float</type>
  <methodname>atan2</methodname>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <desc> See also acos and atan. </desc>
</methodsynopsis>
<methodsynopsis function="atanh">
  <type>float</type>
  <methodname>atanh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg. </desc>
</methodsynopsis>
<methodsynopsis function="base_convert">
  <type>string</type>
  <methodname>base_convert</methodname>
  <methodparam>
    <type>string</type>
    <parameter>number</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>frombase</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tobase</parameter>
  </methodparam>
  <desc> Returns a string containing number represented in base tobase.  The base in which number is given is specified in frombase.  Both frombase and tobase have to be between 2 and 36, inclusive.  Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35. base_convert example
]]&amp;gt; Outputs: </desc>
</methodsynopsis>
<methodsynopsis function="bindec">
  <type>number</type>
  <methodname>bindec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>binary_string</parameter>
  </methodparam>
  <desc> Returns the decimal equivalent of the binary number represented by the binary_string argument. </desc>
</methodsynopsis>
<methodsynopsis function="ceil">
  <type>float</type>
  <methodname>ceil</methodname>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> ceil example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="cos">
  <type>float</type>
  <methodname>cos</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>cos returns the cosine of the arg parameter.  The arg parameter is in radians. </desc>
</methodsynopsis>
<methodsynopsis function="cosh">
  <type>float</type>
  <methodname>cosh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2. </desc>
</methodsynopsis>
<methodsynopsis function="decbin">
  <type>string</type>
  <methodname>decbin</methodname>
  <methodparam>
    <type>int</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> Returns a string containing a binary representation of the given number argument.  The largest number that can be converted is 4294967295 in decimal resulting to a string of 32 1's. </desc>
</methodsynopsis>
<methodsynopsis function="dechex">
  <type>string</type>
  <methodname>dechex</methodname>
  <methodparam>
    <type>int</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> Returns a string containing a hexadecimal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to "ffffffff". </desc>
</methodsynopsis>
<methodsynopsis function="decoct">
  <type>string</type>
  <methodname>decoct</methodname>
  <methodparam>
    <type>int</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> Returns a string containing an octal representation of the given number argument.  The largest number that can be converted is 4294967295 in decimal resulting to "37777777777".  </desc>
</methodsynopsis>
<methodsynopsis function="deg2rad">
  <type>float</type>
  <methodname>deg2rad</methodname>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> This function converts number from degrees to the radian equivalent. </desc>
</methodsynopsis>
<methodsynopsis function="exp">
  <type>float</type>
  <methodname>exp</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns e raised to the power of arg. </desc>
</methodsynopsis>
<methodsynopsis function="expm1">
  <type>float</type>
  <methodname>expm1</methodname>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <desc>expm1 returns the equivalent to 'exp(number) -  1' computed in a way that is accurate even if the value of number is near zero, a case where 'exp (number) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal. </desc>
</methodsynopsis>
<methodsynopsis function="floor">
  <type>float</type>
  <methodname>floor</methodname>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> floor example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="fmod">
  <type>float</type>
  <methodname>fmod</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for  some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y. </desc>
</methodsynopsis>
<methodsynopsis function="getrandmax">
  <type>int</type>
  <methodname>getrandmax</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="hexdec">
  <type>number</type>
  <methodname>hexdec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hex_string</parameter>
  </methodparam>
  <desc> Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec converts a hexadecimal string to a decimal number. The largest number that can be converted is 7fffffff or 2147483647 in decimal. As of PHP 4.1.0, this function can also convert larger numbers. It returns float in that case. </desc>
</methodsynopsis>
<methodsynopsis function="hypot">
  <type>float</type>
  <methodname>hypot</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>hypot returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y). </desc>
</methodsynopsis>
<methodsynopsis function="is_finite">
  <type>bool</type>
  <methodname>is_finite</methodname>
  <methodparam>
    <type>float</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if val is a legal finite  number within the allowed range for a PHP float on this platform. </desc>
</methodsynopsis>
<methodsynopsis function="is_infinite">
  <type>bool</type>
  <methodname>is_infinite</methodname>
  <methodparam>
    <type>float</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if val is infinite (positive or  negative), like the result of log(0) or any value too  big to fit into a float on this platform. </desc>
</methodsynopsis>
<methodsynopsis function="is_nan">
  <type>bool</type>
  <methodname>is_nan</methodname>
  <methodparam>
    <type>float</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if val is 'not a number',  like the result of acos(1.01). </desc>
</methodsynopsis>
<methodsynopsis function="lcg_value">
  <type>float</type>
  <methodname>lcg_value</methodname>
  <void/>
  <desc>lcg_value returns a pseudo random number in the range of (0, 1).  The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes. </desc>
</methodsynopsis>
<methodsynopsis function="log">
  <type>float</type>
  <methodname>log</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>base</parameter>
  </methodparam>
  <desc> If the optional base parameter is specified,  log returns logbasearg, otherwise log  returns the natural logarithm of arg. </desc>
</methodsynopsis>
<methodsynopsis function="log10">
  <type>float</type>
  <methodname>log10</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the base-10 logarithm of arg. </desc>
</methodsynopsis>
<methodsynopsis function="log1p">
  <type>float</type>
  <methodname>log1p</methodname>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <desc>log1p returns log(1 + number) computed in a way that is accurante even when the value of number is close to zero. </desc>
</methodsynopsis>
<methodsynopsis function="max">
  <type>mixed</type>
  <methodname>max</methodname>
  <methodparam>
    <type>number</type>
    <parameter>arg1</parameter>
  </methodparam>
  <methodparam>
    <type>number</type>
    <parameter>arg2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>number</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>max returns the numerically highest of the parameter values. </desc>
</methodsynopsis>
<methodsynopsis function="min">
  <type>mixed</type>
  <methodname>min</methodname>
  <methodparam>
    <type>number</type>
    <parameter>arg1</parameter>
  </methodparam>
  <methodparam>
    <type>number</type>
    <parameter>arg2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>number</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>min returns the numerically lowest of the parameter values. </desc>
</methodsynopsis>
<methodsynopsis function="mt_getrandmax">
  <type>int</type>
  <methodname>mt_getrandmax</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="mt_rand">
  <type>int</type>
  <methodname>mt_rand</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>min</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max</parameter>
  </methodparam>
  <desc> mt_rand example
]]&amp;gt; &amp;amp;example.outputs.similar; </desc>
</methodsynopsis>
<methodsynopsis function="mt_srand">
  <type>void</type>
  <methodname>mt_srand</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>seed</parameter>
  </methodparam>
  <desc> Seeds the random number generator with seed. Since PHP 4.2.0, the seed becomes optional and defaults to a random value if omitted. </desc>
</methodsynopsis>
<methodsynopsis function="octdec">
  <type>number</type>
  <methodname>octdec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>octal_string</parameter>
  </methodparam>
  <desc> Returns the decimal equivalent of the octal number represented by the octal_string argument. The largest number that can be converted is 17777777777 or 2147483647 in decimal. As of PHP 4.1.0, this function can also convert larger numbers. It returns float in that case. </desc>
</methodsynopsis>
<methodsynopsis function="pi">
  <type>float</type>
  <methodname>pi</methodname>
  <void/>
  <desc> pi example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pow">
  <type>number</type>
  <methodname>pow</methodname>
  <methodparam>
    <type>number</type>
    <parameter>base</parameter>
  </methodparam>
  <methodparam>
    <type>number</type>
    <parameter>exp</parameter>
  </methodparam>
  <desc> Returns base raised to the power of exp. If possible, this function will return an integer. </desc>
</methodsynopsis>
<methodsynopsis function="rad2deg">
  <type>float</type>
  <methodname>rad2deg</methodname>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> This function converts number from radian to degrees. </desc>
</methodsynopsis>
<methodsynopsis function="rand">
  <type>int</type>
  <methodname>rand</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>min</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>max</parameter>
  </methodparam>
  <desc> rand example
]]&amp;gt; &amp;amp;example.outputs.similar; </desc>
</methodsynopsis>
<methodsynopsis function="round">
  <type>float</type>
  <methodname>round</methodname>
  <methodparam>
    <type>float</type>
    <parameter>val</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>precision</parameter>
  </methodparam>
  <desc> Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default). </desc>
</methodsynopsis>
<methodsynopsis function="sin">
  <type>float</type>
  <methodname>sin</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>sin returns the sine of the arg parameter.  The arg parameter is in radians. </desc>
</methodsynopsis>
<methodsynopsis function="sinh">
  <type>float</type>
  <methodname>sinh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2. </desc>
</methodsynopsis>
<methodsynopsis function="sqrt">
  <type>float</type>
  <methodname>sqrt</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the square root of arg. </desc>
</methodsynopsis>
<methodsynopsis function="srand">
  <type>void</type>
  <methodname>srand</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>seed</parameter>
  </methodparam>
  <desc> Seeds the random number generator with seed. Since PHP 4.2.0, the seed becomes optional and defaults to a random value if omitted. </desc>
</methodsynopsis>
<methodsynopsis function="tan">
  <type>float</type>
  <methodname>tan</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>tan returns the tangent of the arg parameter.  The arg parameter is in radians. </desc>
</methodsynopsis>
<methodsynopsis function="tanh">
  <type>float</type>
  <methodname>tanh</methodname>
  <methodparam>
    <type>float</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc> Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg). </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_affected_rows">
  <type>mixed</type>
  <methodname>maxdb_affected_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_autocommit">
  <type>bool</type>
  <methodname>maxdb_autocommit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_change_user">
  <type>bool</type>
  <methodname>maxdb_change_user</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_character_set_name">
  <type>string</type>
  <methodname>maxdb_character_set_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_close">
  <type>bool</type>
  <methodname>maxdb_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_commit">
  <type>bool</type>
  <methodname>maxdb_commit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_connect_errno">
  <type>int</type>
  <methodname>maxdb_connect_errno</methodname>
  <void/>
  <desc> The maxdb_connect_errno function will return the last error code number for last call to maxdb_connect. If no errors have occured, this function will return zero. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_connect_error">
  <type>string</type>
  <methodname>maxdb_connect_error</methodname>
  <void/>
  <desc> The maxdb_connect_error function is identical to the corresponding maxdb_connect_errno function in every way, except instead of returning an integer error code the maxdb_connect_error function will return a string representation of the last error to occur for the last  maxdb_connect call. If no error has occured, this function will return an empty string. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_connect">
  <type>resource</type>
  <methodname>maxdb_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_data_seek">
  <type>bool</type>
  <methodname>maxdb_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_dump_debug_info">
  <type>bool</type>
  <methodname>maxdb_dump_debug_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_debug">
  <type>void</type>
  <methodname>maxdb_debug</methodname>
  <methodparam>
    <type>string</type>
    <parameter>debug</parameter>
  </methodparam>
  <desc> The maxdb_debug can be used to trace the SQLDBC communication. The following strings can be used as a parameter to maxdb_debug: </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_disable_reads_from_master">
  <type>void</type>
  <methodname>maxdb_disable_reads_from_master</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_disable_rpl_parse">
  <type>void</type>
  <methodname>maxdb_disable_rpl_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_embedded_connect">
  <type>resource</type>
  <methodname>maxdb_embedded_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_enable_reads_from_master">
  <type>void</type>
  <methodname>maxdb_enable_reads_from_master</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_enable_rpl_parse">
  <type>void</type>
  <methodname>maxdb_enable_rpl_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_errno">
  <type>int</type>
  <methodname>maxdb_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_error">
  <type>string</type>
  <methodname>maxdb_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_array">
  <type>mixed</type>
  <methodname>maxdb_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resulttype</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_assoc">
  <type>array</type>
  <methodname>maxdb_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_field_direct">
  <type>mixed</type>
  <methodname>maxdb_fetch_field_direct</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fieldnr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_field">
  <type>mixed</type>
  <methodname>maxdb_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_fields">
  <type>mixed</type>
  <methodname>maxdb_fetch_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural Style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_lengths">
  <type>mixed</type>
  <methodname>maxdb_fetch_lengths</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_object">
  <type>mixed</type>
  <methodname>maxdb_fetch_object</methodname>
  <methodparam>
    <type>object</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_fetch_row">
  <type>mixed</type>
  <methodname>maxdb_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_field_count">
  <type>int</type>
  <methodname>maxdb_field_count</methodname>
  <methodparam>
    <type>object</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_field_seek">
  <type>int</type>
  <methodname>maxdb_field_seek</methodname>
  <methodparam>
    <type>object</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fieldnr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_field_tell">
  <type>int</type>
  <methodname>maxdb_field_tell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_free_result">
  <type>void</type>
  <methodname>maxdb_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_client_info">
  <type>string</type>
  <methodname>maxdb_get_client_info</methodname>
  <void/>
  <desc> The maxdb_get_client_info function is used to  return a string representing the client version being used in the  MaxDB extension. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_client_version">
  <type>int</type>
  <methodname>maxdb_get_client_version</methodname>
  <void/>
  <desc> Returns client version number as an integer. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_host_info">
  <type>string</type>
  <methodname>maxdb_get_host_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procdural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_proto_info">
  <type>int</type>
  <methodname>maxdb_get_proto_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_server_info">
  <type>string</type>
  <methodname>maxdb_get_server_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_get_server_version">
  <type>int</type>
  <methodname>maxdb_get_server_version</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_info">
  <type>string</type>
  <methodname>maxdb_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_init">
  <type>resource</type>
  <methodname>maxdb_init</methodname>
  <void/>
  <desc> Allocates or initializes a MaxDB resource suitable for  maxdb_options and maxdb_real_connect. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_insert_id">
  <type>mixed</type>
  <methodname>maxdb_insert_id</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_kill">
  <type>bool</type>
  <methodname>maxdb_kill</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>processid</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_master_query">
  <type>bool</type>
  <methodname>maxdb_master_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_more_results">
  <type>bool</type>
  <methodname>maxdb_more_results</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>maxdb_more_results indicates if one or more result sets are available from a previous call to maxdb_multi_query. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_multi_query">
  <type>bool</type>
  <methodname>maxdb_multi_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_next_result">
  <type>bool</type>
  <methodname>maxdb_next_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> Since multiple queries are not yet supported, maxdb_next_result  returns always &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_num_fields">
  <type>int</type>
  <methodname>maxdb_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_num_rows">
  <type>mixed</type>
  <methodname>maxdb_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_options">
  <type>bool</type>
  <methodname>maxdb_options</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_ping">
  <type>bool</type>
  <methodname>maxdb_ping</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_prepare">
  <type>mixed</type>
  <methodname>maxdb_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedure style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_query">
  <type>mixed</type>
  <methodname>maxdb_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resultmode</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_real_connect">
  <type>bool</type>
  <methodname>maxdb_real_connect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_real_escape_string">
  <type>string</type>
  <methodname>maxdb_real_escape_string</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>escapestr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_real_query">
  <type>bool</type>
  <methodname>maxdb_real_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_report">
  <type>bool</type>
  <methodname>maxdb_report</methodname>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The above examples would produce the following output: </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_rollback">
  <type>bool</type>
  <methodname>maxdb_rollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> Rollbacks the current transaction for the database specified by the link parameter. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_rpl_parse_enabled">
  <type>int</type>
  <methodname>maxdb_rpl_parse_enabled</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_rpl_probe">
  <type>bool</type>
  <methodname>maxdb_rpl_probe</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_rpl_query_type">
  <type>int</type>
  <methodname>maxdb_rpl_query_type</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Object oriented style (method)</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_select_db">
  <type>bool</type>
  <methodname>maxdb_select_db</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <desc> The maxdb_select_db function selects the default database (specified by the dbname parameter) to be  used when performing queries against the database connection  represented by the link parameter. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_send_query">
  <type>bool</type>
  <methodname>maxdb_send_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Object oriented style (method)</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_server_end">
  <type>void</type>
  <methodname>maxdb_server_end</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="maxdb_server_init">
  <type>bool</type>
  <methodname>maxdb_server_init</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>groups</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="maxdb_sqlstate">
  <type>string</type>
  <methodname>maxdb_sqlstate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_ssl_set">
  <type>bool</type>
  <methodname>maxdb_ssl_set</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>cert</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>ca</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>capath</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>cipher</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stat">
  <type>mixed</type>
  <methodname>maxdb_stat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_affected_rows">
  <type>mixed</type>
  <methodname>maxdb_stmt_affected_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_bind_param">
  <type>bool</type>
  <methodname>maxdb_stmt_bind_param</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>types</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>&amp;var1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>&amp;...</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_bind_result">
  <type>bool</type>
  <methodname>maxdb_stmt_bind_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>&amp;var1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>&amp;...</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_send_long_data">
  <type>bool</type>
  <methodname>maxdb_stmt_send_long_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param_nr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_close">
  <type>bool</type>
  <methodname>maxdb_stmt_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_data_seek">
  <type>bool</type>
  <methodname>maxdb_stmt_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_errno">
  <type>int</type>
  <methodname>maxdb_stmt_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_error">
  <type>string</type>
  <methodname>maxdb_stmt_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_execute">
  <type>bool</type>
  <methodname>maxdb_stmt_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_fetch">
  <type>mixed</type>
  <methodname>maxdb_stmt_fetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_free_result">
  <type>void</type>
  <methodname>maxdb_stmt_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_init">
  <type>resource</type>
  <methodname>maxdb_stmt_init</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_num_rows">
  <type>mixed</type>
  <methodname>maxdb_stmt_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_param_count">
  <type>int</type>
  <methodname>maxdb_stmt_param_count</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_prepare">
  <type>bool</type>
  <methodname>maxdb_stmt_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedure style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_reset">
  <type>bool</type>
  <methodname>maxdb_stmt_reset</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_result_metadata">
  <type>mixed</type>
  <methodname>maxdb_stmt_result_metadata</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_send_long_data">
  <type>bool</type>
  <methodname>maxdb_stmt_send_long_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param_nr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_sqlstate">
  <type>string</type>
  <methodname>maxdb_stmt_sqlstate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail.  The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. </desc>
</methodsynopsis>
<methodsynopsis function="maxdb_stmt_store_result">
  <type>bool</type>
  <methodname>maxdb_stmt_store_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_store_result">
  <type>resource</type>
  <methodname>maxdb_store_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_thread_id">
  <type>int</type>
  <methodname>maxdb_thread_id</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_thread_safe">
  <type>bool</type>
  <methodname>maxdb_thread_safe</methodname>
  <void/>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_use_result">
  <type>mixed</type>
  <methodname>maxdb_use_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="maxdb_warning_count">
  <type>int</type>
  <methodname>maxdb_warning_count</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mb_convert_case">
  <type>string</type>
  <methodname>mb_convert_case</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_convert_case returns case folded version of string converted in the way specified by mode. </desc>
</methodsynopsis>
<methodsynopsis function="mb_convert_encoding">
  <type>string</type>
  <methodname>mb_convert_encoding</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>to_encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>from_encoding</parameter>
  </methodparam>
  <desc>mb_convert_encoding converts  character encoding of string str from from_encoding to to_encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_convert_kana">
  <type>string</type>
  <methodname>mb_convert_kana</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_convert_kana performs "han-kaku" - "zen-kaku" conversion for string str. It returns converted string. This function is only useful for Japanese. </desc>
</methodsynopsis>
<methodsynopsis function="mb_convert_variables">
  <type>string</type>
  <methodname>mb_convert_variables</methodname>
  <methodparam>
    <type>string</type>
    <parameter>to_encoding</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>from_encoding</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">vars</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter role="reference">...</parameter>
  </methodparam>
  <desc>mb_convert_variables convert  character encoding of variables vars in encoding from_encoding to encoding  to_encoding. It returns character encoding before conversion for success, &amp;amp;false; for failure. </desc>
</methodsynopsis>
<methodsynopsis function="mb_decode_mimeheader">
  <type>string</type>
  <methodname>mb_decode_mimeheader</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc>mb_decode_mimeheader decodes encoded-word string str in MIME header.  </desc>
</methodsynopsis>
<methodsynopsis function="mb_decode_numericentity">
  <type>string</type>
  <methodname>mb_decode_numericentity</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>convmap</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> Convert numeric string reference of string str in specified block to character. It returns converted string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_detect_encoding">
  <type>string</type>
  <methodname>mb_detect_encoding</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>encoding_list</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>strict</parameter>
  </methodparam>
  <desc>mb_detect_encoding detects character encoding in string str. It returns detected character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_detect_order">
  <type>array</type>
  <methodname>mb_detect_order</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>encoding_list</parameter>
  </methodparam>
  <desc>mb_detect_order sets automatic character encoding detection order to encoding_list. It returns &amp;amp;true; for success, &amp;amp;false; for failure. </desc>
</methodsynopsis>
<methodsynopsis function="mb_encode_mimeheader">
  <type>string</type>
  <methodname>mb_encode_mimeheader</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>transfer_encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>linefeed</parameter>
  </methodparam>
  <desc>mb_encode_mimeheader encodes a given string str by the MIME header encoding scheme. Returns a converted version of the string represented in ASCII. </desc>
</methodsynopsis>
<methodsynopsis function="mb_encode_numericentity">
  <type>string</type>
  <methodname>mb_encode_numericentity</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>convmap</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_encode_numericentity converts specified character codes in string str from HTML numeric character reference to character code. It returns converted string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_match">
  <type>bool</type>
  <methodname>mb_ereg_match</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_replace">
  <type>string</type>
  <methodname>mb_ereg_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>replacement</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_getpos">
  <type>array</type>
  <methodname>mb_ereg_search_getpos</methodname>
  <void/>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_getregs">
  <type>array</type>
  <methodname>mb_ereg_search_getregs</methodname>
  <void/>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_init">
  <type>array</type>
  <methodname>mb_ereg_search_init</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_pos">
  <type>array</type>
  <methodname>mb_ereg_search_pos</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The string for match is specified by mb_ereg_search_init. It it is not specified, the previous one will be used. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_regs">
  <type>array</type>
  <methodname>mb_ereg_search_regs</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search_setpos">
  <type>array</type>
  <methodname>mb_ereg_search_setpos</methodname>
  <methodparam>
    <type>int</type>
    <parameter>position</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg_search">
  <type>bool</type>
  <methodname>mb_ereg_search</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_ereg">
  <type>int</type>
  <methodname>mb_ereg</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>regs</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_eregi_replace">
  <type>string</type>
  <methodname>mb_eregi_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>replace</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_eregi">
  <type>int</type>
  <methodname>mb_eregi</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>regs</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_get_info">
  <type>string</type>
  <methodname>mb_get_info</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> If type isn't specified or is specified to "all", an array having the elements "internal_encoding", "http_output", "http_input", "func_overload" will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="mb_http_input">
  <type>string</type>
  <methodname>mb_http_input</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>type: Input string specifies input type. "G" for GET, "P" for POST, "C" for COOKIE. If type is omitted, it returns last input type processed.  </desc>
</methodsynopsis>
<methodsynopsis function="mb_http_output">
  <type>string</type>
  <methodname>mb_http_output</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> If encoding is set, mb_http_output sets HTTP output character encoding to encoding. Output after this function is converted to encoding. mb_http_output returns &amp;amp;true; for success and &amp;amp;false; for failure. </desc>
</methodsynopsis>
<methodsynopsis function="mb_internal_encoding">
  <type>mixed</type>
  <methodname>mb_internal_encoding</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_internal_encoding sets internal character encoding to encoding If parameter is omitted, it returns current internal encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_language">
  <type>string</type>
  <methodname>mb_language</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>language</parameter>
  </methodparam>
  <desc>mb_language sets language. If language is omitted, it returns current language as string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_list_encodings">
  <type>array</type>
  <methodname>mb_list_encodings</methodname>
  <void/>
  <desc>mb_list_encodings returns an array with all supported encodings. </desc>
</methodsynopsis>
<methodsynopsis function="mb_output_handler">
  <type>string</type>
  <methodname>mb_output_handler</methodname>
  <methodparam>
    <type>string</type>
    <parameter>contents</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc>mb_output_handler is ob_start callback function. mb_output_handler converts characters in output buffer from internal character encoding to HTTP output character encoding.  </desc>
</methodsynopsis>
<methodsynopsis function="mb_parse_str">
  <type>bool</type>
  <methodname>mb_parse_str</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoded_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <desc>mb_parse_str parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only used for GET data for now. It preses URL encoded data, detects encoding, converts coding to internal encoding and set values to result array or global variables. </desc>
</methodsynopsis>
<methodsynopsis function="mb_preferred_mime_name">
  <type>string</type>
  <methodname>mb_preferred_mime_name</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_preferred_mime_name returns MIME charset string for character encoding encoding. It returns charset string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_regex_encoding">
  <type>string</type>
  <methodname>mb_regex_encoding</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> If the optional parameter encoding is specified, it is set to the character encoding for multibyte regex. The default value is the internal character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_regex_set_options">
  <type>string</type>
  <methodname>mb_regex_set_options</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns the previous options. If options is omitted, it returns the string that describes the current options. </desc>
</methodsynopsis>
<methodsynopsis function="mb_send_mail">
  <type>bool</type>
  <methodname>mb_send_mail</methodname>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>additional_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>additional_parameter</parameter>
  </methodparam>
  <desc>mb_send_mail sends email. Headers and message are converted and encoded according to mb_language setting.  mb_send_mail is wrapper function of mail. See mail for details. </desc>
</methodsynopsis>
<methodsynopsis function="mb_split">
  <type>array</type>
  <methodname>mb_split</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <desc> The internal encoding or the character encoding specified in mb_regex_encoding will be used as character encoding. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strcut">
  <type>string</type>
  <methodname>mb_strcut</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strcut returns the portion of str specified by the start and length parameters. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strimwidth">
  <type>string</type>
  <methodname>mb_strimwidth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>trimmarker</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strimwidth truncates string str to specified width. It returns truncated string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strlen">
  <type>string</type>
  <methodname>mb_strlen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strlen returns number of characters in string str having character encoding encoding. A multi-byte character is counted as 1. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strpos">
  <type>int</type>
  <methodname>mb_strpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strpos returns the numeric position of the first occurrence of needle in the haystack string. If needle is not found, it returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strrpos">
  <type>int</type>
  <methodname>mb_strrpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strrpos returns the numeric position of the last occurrence of needle in the haystack string. If needle is not found, it returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strtolower">
  <type>string</type>
  <methodname>mb_strtolower</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strtolower returns str with all alphabetic characters converted to lowercase. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strtoupper">
  <type>string</type>
  <methodname>mb_strtoupper</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strtoupper returns str with all alphabetic characters converted to uppercase. </desc>
</methodsynopsis>
<methodsynopsis function="mb_strwidth">
  <type>int</type>
  <methodname>mb_strwidth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_strwidth returns width of string str. </desc>
</methodsynopsis>
<methodsynopsis function="mb_substitute_character">
  <type>mixed</type>
  <methodname>mb_substitute_character</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>substrchar</parameter>
  </methodparam>
  <desc>mb_substitute_character specifies substitution character when input character encoding is invalid or character code is not exist in output character encoding. Invalid characters may be substituted &amp;amp;null;(no output), string or integer value (Unicode character code value). </desc>
</methodsynopsis>
<methodsynopsis function="mb_substr_count">
  <type>int</type>
  <methodname>mb_substr_count</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_substr_count returns the number of times the needle substring occurs in the haystack string. </desc>
</methodsynopsis>
<methodsynopsis function="mb_substr">
  <type>string</type>
  <methodname>mb_substr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>mb_substr returns the portion of str specified by the start and length parameters. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_append_event">
  <type>int</type>
  <methodname>mcal_append_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <desc>mcal_append_event stores the global event into an MCAL calendar for the stream mcal_stream. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_close">
  <type>int</type>
  <methodname>mcal_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>  Closes the given mcal stream. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_create_calendar">
  <type>bool</type>
  <methodname>mcal_create_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>  Creates a new calendar named calendar. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_date_compare">
  <type>int</type>
  <methodname>mcal_date_compare</methodname>
  <methodparam>
    <type>int</type>
    <parameter>a_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>a_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>a_day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>b_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>b_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>b_day</parameter>
  </methodparam>
  <desc>mcal_date_compare Compares the two given dates, returns &amp;lt;0, 0, &amp;gt;0 if a&amp;lt;b, a==b, a&amp;gt;b respectively. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_date_valid">
  <type>int</type>
  <methodname>mcal_date_valid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <desc>mcal_date_valid Returns &amp;amp;true; if the given year, month and day is a valid date, &amp;amp;false; if not. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_day_of_week">
  <type>int</type>
  <methodname>mcal_day_of_week</methodname>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <desc>mcal_day_of_week returns the day of the week of the given date. Possible return values range from 0 for Sunday through 6 for Saturday.  </desc>
</methodsynopsis>
<methodsynopsis function="mcal_day_of_year">
  <type>int</type>
  <methodname>mcal_day_of_year</methodname>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <desc>mcal_day_of_year returns the day of the year of the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_days_in_month">
  <type>int</type>
  <methodname>mcal_days_in_month</methodname>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>leap_year</parameter>
  </methodparam>
  <desc>mcal_days_in_month returns the number of days in the month month, taking into account if the  considered year is a leap year or not. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_delete_calendar">
  <type>string</type>
  <methodname>mcal_delete_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <desc>  Deletes the calendar named calendar. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_delete_event">
  <type>int</type>
  <methodname>mcal_delete_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>event_id</parameter>
  </methodparam>
  <desc>mcal_delete_event deletes the calendar event specified by the event_id.</desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_add_attribute">
  <type>void</type>
  <methodname>mcal_event_add_attribute</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>attribute</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>mcal_event_add_attribute adds an attribute to the stream's global event structure with the value given by "value". </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_init">
  <type>int</type>
  <methodname>mcal_event_init</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <desc>mcal_event_init initializes a streams global event structure. this effectively sets all elements of the structure to 0, or the default settings. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_alarm">
  <type>int</type>
  <methodname>mcal_event_set_alarm</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>alarm</parameter>
  </methodparam>
  <desc>mcal_event_set_alarm sets the streams global event structure's alarm to the given minutes before the event. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_category">
  <type>int</type>
  <methodname>mcal_event_set_category</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>category</parameter>
  </methodparam>
  <desc>mcal_event_set_category sets the streams global event structure's category to the given string. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_class">
  <type>int</type>
  <methodname>mcal_event_set_class</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>class</parameter>
  </methodparam>
  <desc>mcal_event_set_class sets the streams global event structure's class to the given value. The class is either 1 for public, or 0 for private. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_description">
  <type>int</type>
  <methodname>mcal_event_set_description</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>description</parameter>
  </methodparam>
  <desc>mcal_event_set_description sets the streams global event structure's description to the given string. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_end">
  <type>int</type>
  <methodname>mcal_event_set_end</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>hour</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>min</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sec</parameter>
  </methodparam>
  <desc>mcal_event_set_end sets the streams global event structure's end date and time to the given values. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_daily">
  <type>int</type>
  <methodname>mcal_event_set_recur_daily</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>interval</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_daily sets the streams global event structure's recurrence to the given value to be reoccurring on a daily basis, ending at the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_monthly_mday">
  <type>int</type>
  <methodname>mcal_event_set_recur_monthly_mday</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>interval</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_monthly_mday sets the streams global event structure's recurrence to the given value to be reoccurring on a monthly by month day basis, ending at the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_monthly_wday">
  <type>int</type>
  <methodname>mcal_event_set_recur_monthly_wday</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>interval</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_monthly_wday sets the streams global event structure's recurrence to the given value to be reoccurring on a monthly by week basis, ending at the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_none">
  <type>int</type>
  <methodname>mcal_event_set_recur_none</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_none sets the streams global event structure to not recur (event-&amp;gt;recur_type is set to MCAL_RECUR_NONE). </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_weekly">
  <type>int</type>
  <methodname>mcal_event_set_recur_weekly</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>interval</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>weekdays</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_weekly sets the streams global event structure's recurrence to the given value to be reoccurring on a weekly basis, ending at the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_recur_yearly">
  <type>int</type>
  <methodname>mcal_event_set_recur_yearly</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>interval</parameter>
  </methodparam>
  <desc>mcal_event_set_recur_yearly sets the streams global event structure's recurrence to the given value to be reoccurring on a yearly basis,ending at the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_start">
  <type>int</type>
  <methodname>mcal_event_set_start</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>hour</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>min</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>sec</parameter>
  </methodparam>
  <desc>mcal_event_set_start sets the streams global event structure's start date and time to the given values. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_event_set_title">
  <type>int</type>
  <methodname>mcal_event_set_title</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>title</parameter>
  </methodparam>
  <desc>mcal_event_set_title sets the streams global event structure's title to the given string. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_expunge">
  <type>int</type>
  <methodname>mcal_expunge</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <desc>mcal_expunge deletes all events which have been previously marked for deletion. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_fetch_current_stream_event">
  <type>object</type>
  <methodname>mcal_fetch_current_stream_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <desc>mcal_fetch_current_stream_event returns the current stream's event structure as an object containing: int id - ID of that event. int public - &amp;amp;true; if the event if public, &amp;amp;false; if it is private. string category - Category string of the event. string title - Title string of the event. string description - Description string of the event. int alarm - number of minutes before the event to send an alarm/reminder. object start - Object containing a datetime entry. object end - Object containing a datetime entry. int recur_type   - recurrence type int recur_interval   - recurrence interval datetime recur_enddate   - recurrence end date int recur_data   - recurrence data All datetime entries consist of an object that contains: int year - year int month - month int mday  - day of month int hour  - hour int min   - minutes int sec   - seconds int alarm   - minutes before event to send an alarm</desc>
</methodsynopsis>
<methodsynopsis function="mcal_fetch_event">
  <type>object</type>
  <methodname>mcal_fetch_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>event_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>mcal_fetch_event fetches an event from the  calendar stream specified by id. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_is_leap_year">
  <type>int</type>
  <methodname>mcal_is_leap_year</methodname>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc>mcal_is_leap_year returns 1 if the given year is a leap year, 0 if not. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_list_alarms">
  <type>array</type>
  <methodname>mcal_list_alarms</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>begin_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>begin_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>begin_day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_day</parameter>
  </methodparam>
  <desc> Returns an array of event ID's that has an alarm going off between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_list_events">
  <type>array</type>
  <methodname>mcal_list_events</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>begin_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>begin_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>begin_day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_year</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>end_day</parameter>
  </methodparam>
  <desc> Returns an array of ID's that are between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_next_recurrence">
  <type>int</type>
  <methodname>mcal_next_recurrence</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>weekstart</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>next</parameter>
  </methodparam>
  <desc>mcal_next_recurrence returns an object filled with the next date the event occurs, on or after the supplied date.  Returns empty date field if event does not occur or something is invalid. Uses weekstart to determine what day is considered the beginning of the week. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_open">
  <type>int</type>
  <methodname>mcal_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns an MCAL stream on success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_popen">
  <type>int</type>
  <methodname>mcal_popen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Returns an MCAL stream on success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_rename_calendar">
  <type>string</type>
  <methodname>mcal_rename_calendar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>old_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_name</parameter>
  </methodparam>
  <desc>  Renames the calendar old_name to new_name. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_reopen">
  <type>int</type>
  <methodname>mcal_reopen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>calendar</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> Reopens an MCAL stream to a new calendar. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_snooze">
  <type>bool</type>
  <methodname>mcal_snooze</methodname>
  <methodparam>
    <type>int</type>
    <parameter>stream_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>event_id</parameter>
  </methodparam>
  <desc>mcal_snooze turns off an alarm for a calendar event specified by the stream_id and event_id. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_store_event">
  <type>int</type>
  <methodname>mcal_store_event</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mcal_stream</parameter>
  </methodparam>
  <desc>mcal_store_event stores the modifications to the current global event for the given stream. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_time_valid">
  <type>int</type>
  <methodname>mcal_time_valid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hour</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>minutes</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <desc>mcal_time_valid Returns &amp;amp;true; if the given hour, minutes and seconds is a valid time, &amp;amp;false; if not. </desc>
</methodsynopsis>
<methodsynopsis function="mcal_week_of_year">
  <type>int</type>
  <methodname>mcal_week_of_year</methodname>
  <methodparam>
    <type>int</type>
    <parameter>day</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>month</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>year</parameter>
  </methodparam>
  <desc>mcal_week_of_year returns the week number of the given date. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_cbc">
  <type>string</type>
  <methodname>mcrypt_cbc</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_cfb">
  <type>string</type>
  <methodname>mcrypt_cfb</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_create_iv">
  <type>string</type>
  <methodname>mcrypt_create_iv</methodname>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>source</parameter>
  </methodparam>
  <desc>mcrypt_create_iv is used to create an IV. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_decrypt">
  <type>string</type>
  <methodname>mcrypt_decrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc>mcrypt_decrypt decrypts the data and returns the unencrypted data. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_ecb">
  <type>string</type>
  <methodname>mcrypt_ecb</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_algorithms_name">
  <type>string</type>
  <methodname>mcrypt_enc_get_algorithms_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns the name of the algorithm. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_block_size">
  <type>int</type>
  <methodname>mcrypt_enc_get_block_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns the block size of the algorithm specified by the encryption descriptor td in bytes. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_iv_size">
  <type>int</type>
  <methodname>mcrypt_enc_get_iv_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns the size of the iv of the algorithm specified by the encryption descriptor in bytes. If it returns '0' then the IV is ignored in the algorithm. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_key_size">
  <type>int</type>
  <methodname>mcrypt_enc_get_key_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns the maximum supported key size of the algorithm specified by the encryption descriptor td in bytes. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_modes_name">
  <type>string</type>
  <methodname>mcrypt_enc_get_modes_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns the name of the mode. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_get_supported_key_sizes">
  <type>array</type>
  <methodname>mcrypt_enc_get_supported_key_sizes</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> Returns an array with the key sizes supported by the algorithm specified by the encryption descriptor. If it returns an empty array then all key sizes between 1 and mcrypt_enc_get_key_size are supported by the algorithm. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_is_block_algorithm_mode">
  <type>bool</type>
  <methodname>mcrypt_enc_is_block_algorithm_mode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the mode is for use with block algorithms, otherwise it returns &amp;amp;false;. (e.g. &amp;amp;false; for stream, and &amp;amp;true; for cbc, cfb, ofb). </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_is_block_algorithm">
  <type>bool</type>
  <methodname>mcrypt_enc_is_block_algorithm</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the algorithm is a block algorithm, or &amp;amp;false; if it is a stream algorithm. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_is_block_mode">
  <type>bool</type>
  <methodname>mcrypt_enc_is_block_mode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the mode outputs blocks of bytes or &amp;amp;false; if it outputs bytes. (e.g. &amp;amp;true; for cbc and ecb, and &amp;amp;false; for cfb and stream). </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_enc_self_test">
  <type>bool</type>
  <methodname>mcrypt_enc_self_test</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function runs the self test on the algorithm specified by the descriptor td. If the self test succeeds it returns &amp;amp;false;. In case of an error, it returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_encrypt">
  <type>string</type>
  <methodname>mcrypt_encrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc>mcrypt_encrypt encrypts the data and returns the encrypted data. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_generic_deinit">
  <type>bool</type>
  <methodname>mcrypt_generic_deinit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module.  You need to call mcrypt_module_close yourself. (But PHP does this for you at the end of the script.)  Returns &amp;amp;false; on error, or &amp;amp;true; on success. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_generic_end">
  <type>bool</type>
  <methodname>mcrypt_generic_end</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function is deprecated, use mcrypt_generic_deinit instead. It can cause crashes when used with mcrypt_module_close due to multiple buffer frees. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_generic_init">
  <type>int</type>
  <methodname>mcrypt_generic_init</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc> The maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size and every value smaller than this is legal. The IV should normally have the size of the algorithms block size, but you must obtain the size by calling mcrypt_enc_get_iv_size. IV is ignored in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be random and unique (but not secret). The same IV must be used for encryption/decryption. If you do not want to use it you should set it to zeros, but this is not recommended. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_generic">
  <type>string</type>
  <methodname>mcrypt_generic</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function encrypts data. The data is padded with "\0" to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer then the input, due to the padding of the data. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_get_block_size">
  <type>int</type>
  <methodname>mcrypt_get_block_size</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_get_cipher_name">
  <type>string</type>
  <methodname>mcrypt_get_cipher_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <desc>mcrypt_get_cipher_name is used to get the name of the specified cipher. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_get_iv_size">
  <type>int</type>
  <methodname>mcrypt_get_iv_size</methodname>
  <methodparam>
    <type>string</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>mcrypt_get_iv_size returns the size of the Initialisation Vector (IV) in bytes. On error the function returns &amp;amp;false;. If the IV is ignored in the specified cipher/mode combination zero is returned. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_get_key_size">
  <type>int</type>
  <methodname>mcrypt_get_key_size</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_list_algorithms">
  <type>array</type>
  <methodname>mcrypt_list_algorithms</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc>mcrypt_list_algorithms is used to get an array of all supported algorithms in the lib_dir parameter. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_list_modes">
  <type>array</type>
  <methodname>mcrypt_list_modes</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc>mcrypt_list_modes is used to get an array of all supported modes in the lib_dir. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_close">
  <type>bool</type>
  <methodname>mcrypt_module_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <desc> This function closes the specified encryption handle. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_get_algo_block_size">
  <type>int</type>
  <methodname>mcrypt_module_get_algo_block_size</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function returns the block size of the algorithm specified in bytes. The optional lib_dir parameter can contain the location where the mode module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_get_algo_key_size">
  <type>int</type>
  <methodname>mcrypt_module_get_algo_key_size</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function returns the maximum supported key size of the algorithm specified in bytes. The optional lib_dir parameter can contain the location where the mode module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_get_supported_key_sizes">
  <type>array</type>
  <methodname>mcrypt_module_get_supported_key_sizes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size are supported by the algorithm. The optional lib_dir parameter can contain the location where the mode module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_is_block_algorithm_mode">
  <type>bool</type>
  <methodname>mcrypt_module_is_block_algorithm_mode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the mode is for use with block algorithms, otherwise it returns &amp;amp;false;. (e.g. &amp;amp;false; for stream, and &amp;amp;true; for cbc, cfb, ofb).  The optional lib_dir parameter can contain the location where the mode module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_is_block_algorithm">
  <type>bool</type>
  <methodname>mcrypt_module_is_block_algorithm</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the specified algorithm is a block algorithm, or &amp;amp;false; is it is a stream algorithm.  The optional lib_dir parameter can contain the location where the algorithm module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_is_block_mode">
  <type>bool</type>
  <methodname>mcrypt_module_is_block_mode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function returns &amp;amp;true; if the mode outputs blocks of bytes or &amp;amp;false; if it outputs just bytes. (e.g. &amp;amp;true; for cbc and ecb, and &amp;amp;false; for cfb and stream). The optional lib_dir parameter can contain the location where the mode module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_open">
  <type>resource</type>
  <methodname>mcrypt_module_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>algorithm_directory</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode_directory</parameter>
  </methodparam>
  <desc> This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. "twofish" or is one of the MCRYPT_ciphername constants.  The module is closed by calling mcrypt_module_close. Normally it returns an encryption descriptor, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_module_self_test">
  <type>bool</type>
  <methodname>mcrypt_module_self_test</methodname>
  <methodparam>
    <type>string</type>
    <parameter>algorithm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>lib_dir</parameter>
  </methodparam>
  <desc> This function runs the self test on the algorithm specified.  The optional lib_dir parameter can contain the location of where the algorithm module is on the system. </desc>
</methodsynopsis>
<methodsynopsis function="mcrypt_ofb">
  <type>string</type>
  <methodname>mcrypt_ofb</methodname>
  <methodparam>
    <type>int</type>
    <parameter>cipher</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>iv</parameter>
  </methodparam>
  <desc> The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. </desc>
</methodsynopsis>
<methodsynopsis function="mdecrypt_generic">
  <type>string</type>
  <methodname>mdecrypt_generic</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>td</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function decrypts data. Note that the length of the returned string can in fact be longer then the unencrypted string, due to the padding of the data. </desc>
</methodsynopsis>
<methodsynopsis function="mcve_adduser">
  <type>int</type>
  <methodname>mcve_adduser</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>usersetup</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_adduserarg">
  <type>int</type>
  <methodname>mcve_adduserarg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>usersetup</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>argtype</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>argval</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_bt">
  <type>int</type>
  <methodname>mcve_bt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_checkstatus">
  <type>int</type>
  <methodname>mcve_checkstatus</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_chkpwd">
  <type>int</type>
  <methodname>mcve_chkpwd</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_chngpwd">
  <type>int</type>
  <methodname>mcve_chngpwd</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_completeauthorizations">
  <type>int</type>
  <methodname>mcve_completeauthorizations</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">array</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_connect">
  <type>int</type>
  <methodname>mcve_connect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_connectionerror">
  <type>string</type>
  <methodname>mcve_connectionerror</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_deleteresponse">
  <type>bool</type>
  <methodname>mcve_deleteresponse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_deletetrans">
  <type>bool</type>
  <methodname>mcve_deletetrans</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_deleteusersetup">
  <type>void</type>
  <methodname>mcve_deleteusersetup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>usersetup</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_deluser">
  <type>int</type>
  <methodname>mcve_deluser</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_destroyconn">
  <type>void</type>
  <methodname>mcve_destroyconn</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_destroyengine">
  <type>void</type>
  <methodname>mcve_destroyengine</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_disableuser">
  <type>int</type>
  <methodname>mcve_disableuser</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_edituser">
  <type>int</type>
  <methodname>mcve_edituser</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>usersetup</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_enableuser">
  <type>int</type>
  <methodname>mcve_enableuser</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_force">
  <type>int</type>
  <methodname>mcve_force</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trackdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expdate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>amount</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>authcode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getcell">
  <type>string</type>
  <methodname>mcve_getcell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getcellbynum">
  <type>string</type>
  <methodname>mcve_getcellbynum</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getcommadelimited">
  <type>string</type>
  <methodname>mcve_getcommadelimited</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getheader">
  <type>string</type>
  <methodname>mcve_getheader</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column_num</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getuserarg">
  <type>string</type>
  <methodname>mcve_getuserarg</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>usersetup</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>argtype</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_getuserparam">
  <type>string</type>
  <methodname>mcve_getuserparam</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_gft">
  <type>int</type>
  <methodname>mcve_gft</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>startdate</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>enddate</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_gl">
  <type>int</type>
  <methodname>mcve_gl</methodname>
  <methodparam>
    <type>int</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>batch</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>startdate</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>enddate</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_gut">
  <type>int</type>
  <methodname>mcve_gut</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>startdate</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>enddate</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_initconn">
  <type>resource</type>
  <methodname>mcve_initconn</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_initengine">
  <type>int</type>
  <methodname>mcve_initengine</methodname>
  <methodparam>
    <type>string</type>
    <parameter>location</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_initusersetup">
  <type>resource</type>
  <methodname>mcve_initusersetup</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_iscommadelimited">
  <type>int</type>
  <methodname>mcve_iscommadelimited</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_liststats">
  <type>int</type>
  <methodname>mcve_liststats</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_listusers">
  <type>int</type>
  <methodname>mcve_listusers</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>admin_password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_maxconntimeout">
  <type>bool</type>
  <methodname>mcve_maxconntimeout</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>secs</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_monitor">
  <type>int</type>
  <methodname>mcve_monitor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_numcolumns">
  <type>int</type>
  <methodname>mcve_numcolumns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_numrows">
  <type>int</type>
  <methodname>mcve_numrows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_override">
  <type>int</type>
  <methodname>mcve_override</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trackdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expdate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>amount</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>street</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>zip</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>cv</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_parsecommadelimited">
  <type>int</type>
  <methodname>mcve_parsecommadelimited</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_ping">
  <type>int</type>
  <methodname>mcve_ping</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_preauth">
  <type>int</type>
  <methodname>mcve_preauth</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trackdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expdate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>amount</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>street</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>zip</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>cv</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_preauthcompletion">
  <type>int</type>
  <methodname>mcve_preauthcompletion</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>finalamount</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_qc">
  <type>int</type>
  <methodname>mcve_qc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_responseparam">
  <type>string</type>
  <methodname>mcve_responseparam</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_return">
  <type>int</type>
  <methodname>mcve_return</methodname>
  <methodparam>
    <type>int</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trackdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expdate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>amount</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_returncode">
  <type>int</type>
  <methodname>mcve_returncode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_returnstatus">
  <type>int</type>
  <methodname>mcve_returnstatus</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_sale">
  <type>int</type>
  <methodname>mcve_sale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>trackdata</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>account</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>expdate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>amount</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>street</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>zip</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>cv</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>comments</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>clerkid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stationid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_setblocking">
  <type>int</type>
  <methodname>mcve_setblocking</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tf</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_setdropfile">
  <type>int</type>
  <methodname>mcve_setdropfile</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_setip">
  <type>int</type>
  <methodname>mcve_setip</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_setssl_files">
  <type>int</type>
  <methodname>mcve_setssl_files</methodname>
  <methodparam>
    <type>string</type>
    <parameter>sslkeyfile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sslcertfile</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_setssl">
  <type>int</type>
  <methodname>mcve_setssl</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_settimeout">
  <type>int</type>
  <methodname>mcve_settimeout</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_settle">
  <type>int</type>
  <methodname>mcve_settle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>batch</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_text_avs">
  <type>string</type>
  <methodname>mcve_text_avs</methodname>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_text_code">
  <type>string</type>
  <methodname>mcve_text_code</methodname>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_text_cv">
  <type>string</type>
  <methodname>mcve_text_cv</methodname>
  <methodparam>
    <type>int</type>
    <parameter>code</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionauth">
  <type>string</type>
  <methodname>mcve_transactionauth</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionavs">
  <type>int</type>
  <methodname>mcve_transactionavs</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionbatch">
  <type>int</type>
  <methodname>mcve_transactionbatch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactioncv">
  <type>int</type>
  <methodname>mcve_transactioncv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionid">
  <type>int</type>
  <methodname>mcve_transactionid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionitem">
  <type>int</type>
  <methodname>mcve_transactionitem</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactionssent">
  <type>int</type>
  <methodname>mcve_transactionssent</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transactiontext">
  <type>string</type>
  <methodname>mcve_transactiontext</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transinqueue">
  <type>int</type>
  <methodname>mcve_transinqueue</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transnew">
  <type>int</type>
  <methodname>mcve_transnew</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transparam">
  <type>int</type>
  <methodname>mcve_transparam</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_transsend">
  <type>int</type>
  <methodname>mcve_transsend</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>identifier</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_ub">
  <type>int</type>
  <methodname>mcve_ub</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_uwait">
  <type>int</type>
  <methodname>mcve_uwait</methodname>
  <methodparam>
    <type>int</type>
    <parameter>microsecs</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_verifyconnection">
  <type>bool</type>
  <methodname>mcve_verifyconnection</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tf</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_verifysslcert">
  <type>bool</type>
  <methodname>mcve_verifysslcert</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tf</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mcve_void">
  <type>int</type>
  <methodname>mcve_void</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ptrannum</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="Memcache::add">
  <type>bool</type>
  <methodname>Memcache::add</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>expire</parameter>
  </methodparam>
  <desc>Memcache::add stores variable var with key only if such  key doesn't exist at the server yet. Memcache::add returns &amp;amp;false; if such key already exist. For the rest Memcache::add behaves similarly to Memcache::set. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::close">
  <type>bool</type>
  <methodname>Memcache::close</methodname>
  <void/>
  <desc>Memcache::close closes connection to memcached server. This function doesn't close persistent connections, which are closed only during web-server shutdown/restart. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::connect">
  <type>bool</type>
  <methodname>Memcache::connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc>Memcache::connect establishes a connection to the memcached server. Parameters host and port point to the host and port, where memcached is listening for connections. Parameter port is optional, it's default value is 11211. Also you can define a timeout (in seconds), which will be used when connecting to the daemon. Think twice before changing the default value - you can loose all the advantages of caching if your connection is too slow. </desc>
</methodsynopsis>
<methodsynopsis function="memcache_debug">
  <type>bool</type>
  <methodname>memcache_debug</methodname>
  <methodparam>
    <type>int</type>
    <parameter>on_off</parameter>
  </methodparam>
  <desc>memcache_debug turns on debug output if parameter on_off is equal to 1 and turns off if it's 0. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::decrement">
  <type>int</type>
  <methodname>Memcache::decrement</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Memcache::decrement decrements value of the  item by value. Similarly to  Memcache::increment, current value of the item is being converted to numerical and after that value is substracted.  </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::delete">
  <type>bool</type>
  <methodname>Memcache::delete</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc>Memcache::delete deletes item with the  key. If parameter timeout is specified, the item will expire after timeout seconds. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::flush">
  <type>bool</type>
  <methodname>Memcache::flush</methodname>
  <void/>
  <desc>Memcache::flush immediately invalidates all  existing items. Memcache::flush doesn't actually free any resources, it only marks all the items as expired, so occupied memory will be overwritten by new items. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::get">
  <type>mixed</type>
  <methodname>Memcache::get</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>Memcache::get returns previously stored data if an item with such key exists on the server at this moment. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::getStats">
  <type>array</type>
  <methodname>Memcache::getStats</methodname>
  <void/>
  <desc>Memcache::getStats returns an associative array  with server's statistics. Array keys correspond to stats parameters and  values to parameter's values. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::getVersion">
  <type>string</type>
  <methodname>Memcache::getVersion</methodname>
  <void/>
  <desc>Memcache::getVersion returns a string with server's version number. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::increment">
  <type>int</type>
  <methodname>Memcache::increment</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Memcache::increment increments value of the item on the specified value. If item with key  key was not numeric and cannot be converted to number, it will change it's value to value. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::pconnect">
  <type>bool</type>
  <methodname>Memcache::pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc>Memcache::pconnect is similar to Memcache::connect with the difference, that  the connection it establishes is persistent. This connection is not closed after the end of script execution and  by Memcache::close function. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::replace">
  <type>bool</type>
  <methodname>Memcache::replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>expire</parameter>
  </methodparam>
  <desc>Memcache::replace should be used to replace value of existing item with key. In case if item with such key doesn't exists, Memcache::replace returns &amp;amp;false;. For the rest Memcache::replace behaves similarly to Memcache::set. </desc>
</methodsynopsis>
<methodsynopsis function="Memcache::set">
  <type>bool</type>
  <methodname>Memcache::set</methodname>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>expire</parameter>
  </methodparam>
  <desc>Memcache::set stores an item  var with key on the  memcached server. Parameter expire is expiration  time in seconds. If it's 0, the item never expires (but memcached server  doesn't guarantee this item to be stored all the time, it could be deleted  from the cache to make place for other items). </desc>
</methodsynopsis>
<methodsynopsis function="mhash_count">
  <type>int</type>
  <methodname>mhash_count</methodname>
  <void/>
  <desc>mhash_count returns the highest available hash id. Hashes are numbered from 0 to this hash id. </desc>
</methodsynopsis>
<methodsynopsis function="mhash_get_block_size">
  <type>int</type>
  <methodname>mhash_get_block_size</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hash</parameter>
  </methodparam>
  <desc>mhash_get_block_size is used to get the size of a block of the specified hash. </desc>
</methodsynopsis>
<methodsynopsis function="mhash_get_hash_name">
  <type>string</type>
  <methodname>mhash_get_hash_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hash</parameter>
  </methodparam>
  <desc>mhash_get_hash_name is used to get the name of the specified hash. </desc>
</methodsynopsis>
<methodsynopsis function="mhash_keygen_s2k">
  <type>string</type>
  <methodname>mhash_keygen_s2k</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hash</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>salt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bytes</parameter>
  </methodparam>
  <desc>mhash_keygen_s2k generates a key that is bytes long, from a user given password. This is the Salted S2K algorithm as specified in the OpenPGP document (RFC 2440). That algorithm will use the specified hash algorithm to create the key. The salt must be different and random enough for every key you generate in order to create different keys. That salt must be known when you check the keys, thus it is a good idea to append the key to it. Salt has a fixed length of 8 bytes and will be padded with zeros if you supply less bytes. </desc>
</methodsynopsis>
<methodsynopsis function="mhash">
  <type>string</type>
  <methodname>mhash</methodname>
  <methodparam>
    <type>int</type>
    <parameter>hash</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>mhash applies a hash function specified by hash to the data and returns the resulting hash (also called digest). If the  key is specified it will return the resulting HMAC. HMAC is keyed hashing for message authentication, or simply a message digest that depends on  the specified key. Not all algorithms supported in mhash can be used in  HMAC mode. In case of an error returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="mime_content_type">
  <type>string</type>
  <methodname>mime_content_type</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns the MIME content type for a file as determined by using information from the magic.mime file.  Content types are returned in MIME format, like text/plain  or application/octet-stream. </desc>
</methodsynopsis>
<methodsynopsis function="ming_setcubicthreshold">
  <type>void</type>
  <methodname>ming_setcubicthreshold</methodname>
  <methodparam>
    <type>int</type>
    <parameter>threshold</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ming_setscale">
  <type>void</type>
  <methodname>ming_setscale</methodname>
  <methodparam>
    <type>int</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ming_useswfversion">
  <type>void</type>
  <methodname>ming_useswfversion</methodname>
  <methodparam>
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="swfaction">
  <type>SWFAction</type>
  <methodname>swfaction</methodname>
  <methodparam>
    <type>string</type>
    <parameter>script</parameter>
  </methodparam>
  <desc>swfaction creates a new Action, and compiles the given script into an SWFAction object.  </desc>
</methodsynopsis>
<methodsynopsis function="swfbitmap-&gt;getheight">
  <type>int</type>
  <methodname>swfbitmap-&gt;getheight</methodname>
  <void/>
  <desc>swfbitmap-&amp;gt;getheight returns the bitmap's height in pixels.  </desc>
</methodsynopsis>
<methodsynopsis function="swfbitmap-&gt;getwidth">
  <type>int</type>
  <methodname>swfbitmap-&gt;getwidth</methodname>
  <void/>
  <desc>swfbitmap-&amp;gt;getwidth returns the bitmap's width in pixels. </desc>
</methodsynopsis>
<methodsynopsis function="swfbitmap">
  <type>SWFBitmap</type>
  <methodname>swfbitmap</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>file</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>alphafile</parameter>
  </methodparam>
  <desc>swfbitmap creates a new SWFBitmap object from  the Jpeg or DBL file in file.  alphafile is a MSK file to be used as an alpha mask for a Jpeg image.  Both parameters can be fopen resources or binary strings. </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton_keypress">
  <type>int</type>
  <methodname>swfbutton_keypress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;addaction">
  <type>void</type>
  <methodname>swfbutton-&gt;addaction</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>action</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;addaction adds the action  action to this button for the given conditions.  The following flags are valid:  SWFBUTTON_MOUSEOVER, SWFBUTTON_MOUSEOUT, SWFBUTTON_MOUSEUP, SWFBUTTON_MOUSEUPOUTSIDE, SWFBUTTON_MOUSEDOWN, SWFBUTTON_DRAGOUT and SWFBUTTON_DRAGOVER. </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;addshape">
  <type>void</type>
  <methodname>swfbutton-&gt;addshape</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>shape</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;addshape adds the shape  shape to this button. The following  flags' values are valid:  SWFBUTTON_UP, SWFBUTTON_OVER, SWFBUTTON_DOWN or SWFBUTTON_HIT. SWFBUTTON_HIT isn't ever displayed, it defines the hit region for the button. That is, everywhere the hit shape would be drawn is considered a "touchable"  part of the button.  </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;setaction">
  <type>void</type>
  <methodname>swfbutton-&gt;setaction</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>action</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;setaction sets the action to be performed when the button is clicked. Alias for addAction(shape, SWFBUTTON_MOUSEUP). action is a swfaction. </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;setdown">
  <type>void</type>
  <methodname>swfbutton-&gt;setdown</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>shape</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;setdown alias for addShape(shape, SWFBUTTON_DOWN). </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;sethit">
  <type>void</type>
  <methodname>swfbutton-&gt;sethit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>shape</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;sethit alias for addShape(shape, SWFBUTTON_HIT). </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;setover">
  <type>void</type>
  <methodname>swfbutton-&gt;setover</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>shape</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;setover alias for addShape(shape, SWFBUTTON_OVER). </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton-&gt;setup">
  <type>void</type>
  <methodname>swfbutton-&gt;setup</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>shape</parameter>
  </methodparam>
  <desc>swfbutton-&amp;gt;setup alias for addShape(shape, SWFBUTTON_UP). </desc>
</methodsynopsis>
<methodsynopsis function="swfbutton">
  <type>SWFButton</type>
  <methodname>swfbutton</methodname>
  <void/>
  <desc>swfbutton creates a new Button.  Roll over it, click it, see it call action code. Swank.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;addcolor">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;addcolor</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;addcolor adds the color to  this item's color transform. The color is given in its RGB form. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;move">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;move</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dy</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;move moves the current object by  (dx,dy) from its current position. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;moveto">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;moveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;moveto moves the current object to  (x,y) in global coordinates. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;multcolor">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;multcolor</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;multcolor multiplies the item's  color transform by the given values.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;remove">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;remove</methodname>
  <void/>
  <desc>swfdisplayitem-&amp;gt;remove removes this object from the movie's display list.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;rotate">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;rotate</methodname>
  <methodparam>
    <type>float</type>
    <parameter>ddegrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;rotate rotates the current object by ddegrees degrees from its current rotation. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;rotateto">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;rotateto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>degrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;rotateto set the current object rotation to degrees degrees in global coordinates. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;scale">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;scale</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dy</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;scale scales the current object by  (dx,dy) from its current size. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;scaleto">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;scaleto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;scaleto scales the current object to  (x,y) in global coordinates. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;setdepth">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;setdepth</methodname>
  <methodparam>
    <type>float</type>
    <parameter>depth</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;setdepth sets the object's z-order to depth. Depth defaults to the  order in which instances are created (by adding a shape/text to  a movie)- newer ones are on top of older ones. If two objects are  given the same depth, only the later-defined one can be moved.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;setname">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;setname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;setname sets the object's name to  name, for targetting with action script.  Only useful on sprites.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;setratio">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;setratio</methodname>
  <methodparam>
    <type>float</type>
    <parameter>ratio</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;setratio sets the object's ratio to ratio. Obviously only useful for morphs.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;skewx">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;skewx</methodname>
  <methodparam>
    <type>float</type>
    <parameter>ddegrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;skewx adds ddegrees to current x-skew.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;skewxto">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;skewxto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>degrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;skewxto sets the x-skew to degrees. For degrees is  1.0, it means a 45-degree forward slant. More is more forward,  less is more backward. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;skewy">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;skewy</methodname>
  <methodparam>
    <type>float</type>
    <parameter>ddegrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;skewy adds ddegrees to current y-skew.  </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem-&gt;skewyto">
  <type>void</type>
  <methodname>swfdisplayitem-&gt;skewyto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>degrees</parameter>
  </methodparam>
  <desc>swfdisplayitem-&amp;gt;skewyto sets the y-skew to degrees. For degrees is 1.0, it means a 45-degree forward slant. More is more upward,  less is more downward. </desc>
</methodsynopsis>
<methodsynopsis function="swfdisplayitem">
  <type>SWFDisplayItem</type>
  <methodname>swfdisplayitem</methodname>
  <void/>
  <desc>swfdisplayitem creates a new swfdisplayitem object. </desc>
</methodsynopsis>
<methodsynopsis function="swffill-&gt;moveto">
  <type>void</type>
  <methodname>swffill-&gt;moveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swffill-&amp;gt;moveto moves fill's origin to  (x,y) in global coordinates.  </desc>
</methodsynopsis>
<methodsynopsis function="swffill-&gt;rotateto">
  <type>void</type>
  <methodname>swffill-&gt;rotateto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>degrees</parameter>
  </methodparam>
  <desc>swffill-&amp;gt;rotateto sets fill's rotation to  degrees degrees.  </desc>
</methodsynopsis>
<methodsynopsis function="swffill-&gt;scaleto">
  <type>void</type>
  <methodname>swffill-&gt;scaleto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swffill-&amp;gt;scaleto sets fill's scale to  x in the x-direction,  y in the y-direction.  </desc>
</methodsynopsis>
<methodsynopsis function="swffill-&gt;skewxto">
  <type>void</type>
  <methodname>swffill-&gt;skewxto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>swffill-&amp;gt;skewxto sets fill x-skew to x. For x is 1.0, it is a 45-degree  forward slant. More is more forward, less is more backward.  </desc>
</methodsynopsis>
<methodsynopsis function="swffill-&gt;skewyto">
  <type>void</type>
  <methodname>swffill-&gt;skewyto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swffill-&amp;gt;skewyto sets fill y-skew to y. For y is 1.0, it is a 45-degree  upward slant. More is more upward, less is more downward.  </desc>
</methodsynopsis>
<methodsynopsis function="swffill">
  <type>SWFFill</type>
  <methodname>swffill</methodname>
  <void/>
  <desc> The swffill object allows you to transform  (scale, skew, rotate) bitmap and gradient fills. swffill objects are created by the swfshape-&amp;gt;addfill methods.  </desc>
</methodsynopsis>
<methodsynopsis function="swffont-&gt;getwidth">
  <type>int</type>
  <methodname>swffont-&gt;getwidth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>swffont-&amp;gt;getwidth returns the string  string's width, using font's default scaling.  You'll probably want to use the swftext version of this method which uses the text object's scale.  </desc>
</methodsynopsis>
<methodsynopsis function="swffont">
  <type>SWFFont</type>
  <methodname>swffont</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> If filename is the name of an FDB file  (i.e., it ends in ".fdb"), load the font definition found in said  file. Otherwise, create a browser-defined font reference.  </desc>
</methodsynopsis>
<methodsynopsis function="swfgradient-&gt;addentry">
  <type>void</type>
  <methodname>swfgradient-&gt;addentry</methodname>
  <methodparam>
    <type>float</type>
    <parameter>ratio</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swfgradient-&amp;gt;addentry adds an entry to the gradient list.  ratio is a number between 0 and 1 indicating where in  the gradient this color appears. Thou shalt add entries in order of increasing ratio.  </desc>
</methodsynopsis>
<methodsynopsis function="swfgradient">
  <type>SWFGradient</type>
  <methodname>swfgradient</methodname>
  <void/>
  <desc>swfgradient creates a new SWFGradient object. </desc>
</methodsynopsis>
<methodsynopsis function="swfmorph-&gt;getshape1">
  <type>mixed</type>
  <methodname>swfmorph-&gt;getshape1</methodname>
  <void/>
  <desc>swfmorph-&amp;gt;getshape1 gets a handle to the morph's starting shape. swfmorph-&amp;gt;getshape1 returns an  swfshape object.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmorph-&gt;getshape2">
  <type>mixed</type>
  <methodname>swfmorph-&gt;getshape2</methodname>
  <void/>
  <desc>swfmorph-&amp;gt;getshape2 gets a handle to the morph's ending shape. swfmorph-&amp;gt;getshape2 returns an  swfshape object.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmorph">
  <type>SWFMorph</type>
  <methodname>swfmorph</methodname>
  <void/>
  <desc>swfmorph creates a new SWFMorph object.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;add">
  <type>void</type>
  <methodname>swfmovie-&gt;add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>instance</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;add adds instance to the current movie. instance is any type of data :  Shapes, text, fonts, etc. must all be added to the movie to make this work. </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;nextframe">
  <type>void</type>
  <methodname>swfmovie-&gt;nextframe</methodname>
  <void/>
  <desc>swfmovie-&amp;gt;nextframe moves to the next frame of  the animation. </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;output">
  <type>int</type>
  <methodname>swfmovie-&gt;output</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>compression</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;output dumps your lovingly prepared movie out.  In PHP, preceding this with the command  ]]&amp;gt; convinces the browser to display this as a flash movie.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;remove">
  <type>void</type>
  <methodname>swfmovie-&gt;remove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>instance</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;remove removes the object instance  instance from the display list.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;save">
  <type>int</type>
  <methodname>swfmovie-&gt;save</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>compression</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;save saves your movie to the file named filename.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;setbackground">
  <type>void</type>
  <methodname>swfmovie-&gt;setbackground</methodname>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;setbackground sets the background color. Why is  there no rgba version? Think about it. (Actually, that's not such a dumb  question after all- you might want to let the HTML background show through. There's a way to do that, but it only works on IE4. Search the  &amp;amp;url.macromedia; site for details.)  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;setdimension">
  <type>void</type>
  <methodname>swfmovie-&gt;setdimension</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;setdimension sets the movie's width  to width and height to height.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;setframes">
  <type>void</type>
  <methodname>swfmovie-&gt;setframes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>numberofframes</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;setframes sets the total number of frames  in the animation to numberofframes. </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;setrate">
  <type>void</type>
  <methodname>swfmovie-&gt;setrate</methodname>
  <methodparam>
    <type>int</type>
    <parameter>rate</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;setrate sets the frame rate to  rate, in frame per seconds.  Animation will slow down if the player can't render frames fast enough- unless  there's a streaming sound, in which case display frames are sacrificed to  keep sound from skipping.  </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie-&gt;streammp3">
  <type>void</type>
  <methodname>swfmovie-&gt;streammp3</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>mp3File</parameter>
  </methodparam>
  <desc>swfmovie-&amp;gt;streammp3 streams the mp3 file  mp3File. Not very robust in dealing with  oddities (can skip over an initial ID3 tag, but that's about it).  Like swfshape-&amp;gt;addjpegfill, this isn't a stable function- we'll  probably need to make a separate SWFSound object to contain sound types.  Parameter mp3File can be a fopen resource or a binary string. </desc>
</methodsynopsis>
<methodsynopsis function="swfmovie">
  <type>SWFMovie</type>
  <methodname>swfmovie</methodname>
  <void/>
  <desc>swfmovie creates a new movie object,  representing an SWF version 4 movie. </desc>
</methodsynopsis>
<methodsynopsis function="SWFShape-&gt;addFill">
  <type>SWFFill</type>
  <methodname>SWFShape-&gt;addFill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>SWFShape-&amp;gt;addFill adds a solid fill to the shape's list  of fill styles. SWFShape-&amp;gt;addFill accepts three different types of arguments. </desc>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;drawcurve">
  <type>void</type>
  <methodname>swfshape-&gt;drawcurve</methodname>
  <methodparam>
    <type>int</type>
    <parameter>controldx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>controldy</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchordx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchordy</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;drawcurveto">
  <type>void</type>
  <methodname>swfshape-&gt;drawcurveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>controlx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>controly</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchorx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>anchory</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;drawline">
  <type>void</type>
  <methodname>swfshape-&gt;drawline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dy</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;drawlineto">
  <type>void</type>
  <methodname>swfshape-&gt;drawlineto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;movepen">
  <type>void</type>
  <methodname>swfshape-&gt;movepen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dy</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;movepento">
  <type>void</type>
  <methodname>swfshape-&gt;movepento</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;setleftfill">
  <type>void</type>
  <methodname>swfshape-&gt;setleftfill</methodname>
  <methodparam>
    <type>swfgradient</type>
    <parameter>fill</parameter>
  </methodparam>
  <desc> What this nonsense is about is, every edge segment borders at most two fills.  When rasterizing the object, it's pretty handy to know what those fills are  ahead of time, so the swf format requires these to be specified.  </desc>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;setline">
  <type>void</type>
  <methodname>swfshape-&gt;setline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swfshape-&amp;gt;setline sets the shape's line style.  width is the line's width. If width is 0, the line's style is removed (then, all other arguments are ignored). If width &amp;gt; 0, then line's color is set to red, green, blue. Last parameter a is optional. </desc>
</methodsynopsis>
<methodsynopsis function="swfshape-&gt;setrightfill">
  <type>void</type>
  <methodname>swfshape-&gt;setrightfill</methodname>
  <methodparam>
    <type>swfgradient</type>
    <parameter>fill</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="swfshape">
  <type>SWFShape</type>
  <methodname>swfshape</methodname>
  <void/>
  <desc>swfshape creates a new shape object. </desc>
</methodsynopsis>
<methodsynopsis function="swfsprite-&gt;add">
  <type>void</type>
  <methodname>swfsprite-&gt;add</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>swfsprite-&amp;gt;add adds a swfshape, a  swfbutton, a swftext,  a swfaction or a swfsprite object.  </desc>
</methodsynopsis>
<methodsynopsis function="swfsprite-&gt;nextframe">
  <type>void</type>
  <methodname>swfsprite-&gt;nextframe</methodname>
  <void/>
  <desc>swfsprite-&amp;gt;setframes moves to the next frame of  the animation. </desc>
</methodsynopsis>
<methodsynopsis function="swfsprite-&gt;remove">
  <type>void</type>
  <methodname>swfsprite-&gt;remove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>swfsprite-&amp;gt;remove remove a swfshape, a  swfbutton, a swftext,  a swfaction or a swfsprite object from the sprite.  </desc>
</methodsynopsis>
<methodsynopsis function="swfsprite-&gt;setframes">
  <type>void</type>
  <methodname>swfsprite-&gt;setframes</methodname>
  <methodparam>
    <type>int</type>
    <parameter>numberofframes</parameter>
  </methodparam>
  <desc>swfsprite-&amp;gt;setframes sets the total number of frames  in the animation to numberofframes. </desc>
</methodsynopsis>
<methodsynopsis function="swfsprite">
  <type>SWFSprite</type>
  <methodname>swfsprite</methodname>
  <void/>
  <desc>swfsprite are also known as a "movie clip", this allows one to create objects which are animated in their own timelines. Hence, the sprite has most of the same methods as the movie.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;addstring">
  <type>void</type>
  <methodname>swftext-&gt;addstring</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;addstring draws the string string at the current pen (cursor) location. Pen is at the baseline of the text;  i.e., ascending text is in the -y direction.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;getwidth">
  <type>void</type>
  <methodname>swftext-&gt;getwidth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;addstring returns the rendered width of the string string at the text object's current font,  scale, and spacing settings.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;moveto">
  <type>void</type>
  <methodname>swftext-&gt;moveto</methodname>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;moveto moves the pen (or cursor, if  that makes more sense) to (x,y) in text object's coordinate space. If either is zero, though, value  in that dimension stays the same. Annoying, should be fixed.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;setcolor">
  <type>void</type>
  <methodname>swftext-&gt;setcolor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;setspacing changes the current text color.  Default is black. I think. Color is represented using the RGB system. </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;setfont">
  <type>void</type>
  <methodname>swftext-&gt;setfont</methodname>
  <methodparam>
    <type>string</type>
    <parameter>font</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;setfont sets the current font to  font.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;setheight">
  <type>void</type>
  <methodname>swftext-&gt;setheight</methodname>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;setheight sets the current font height to  height. Default is 240.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext-&gt;setspacing">
  <type>void</type>
  <methodname>swftext-&gt;setspacing</methodname>
  <methodparam>
    <type>float</type>
    <parameter>spacing</parameter>
  </methodparam>
  <desc>swftext-&amp;gt;setspacing sets the current font spacing to  spacingspacing. Default is 1.0.  0 is all of the letters written at the same point. This doesn't really work  that well because it inflates the advance across the letter, doesn't add  the same amount of spacing between the letters. I should try and explain  that better, prolly. Or just fix the damn thing to do constant spacing.  This was really just a way to figure out how letter advances work,  anyway.. So nyah.  </desc>
</methodsynopsis>
<methodsynopsis function="swftext">
  <type>SWFText</type>
  <methodname>swftext</methodname>
  <void/>
  <desc>swftext creates a new SWFText object, fresh for manipulating.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;addstring">
  <type>void</type>
  <methodname>swftextfield-&gt;addstring</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setname concatenates the string string to the text field.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;align">
  <type>void</type>
  <methodname>swftextfield-&gt;align</methodname>
  <methodparam>
    <type>int</type>
    <parameter>alignement</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;align sets the text field alignment to alignement. Valid values for  alignement are : SWFTEXTFIELD_ALIGN_LEFT,  SWFTEXTFIELD_ALIGN_RIGHT, SWFTEXTFIELD_ALIGN_CENTER and  SWFTEXTFIELD_ALIGN_JUSTIFY. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setbounds">
  <type>void</type>
  <methodname>swftextfield-&gt;setbounds</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setbounds sets the text field width  to width and height to height. If you don't set the bounds yourself, Ming makes a poor guess at what  the bounds are.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setcolor">
  <type>void</type>
  <methodname>swftextfield-&gt;setcolor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>blue</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>a</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setcolor sets the color of the text field.  Default is fully opaque black. Color is represented using RGB system. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setfont">
  <type>void</type>
  <methodname>swftextfield-&gt;setfont</methodname>
  <methodparam>
    <type>string</type>
    <parameter>font</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setfont sets the text field font to  the [browser-defined?] font font.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setheight">
  <type>void</type>
  <methodname>swftextfield-&gt;setheight</methodname>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setheight sets the font height of this text field font to the given height height. Default is 240. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setindentation">
  <type>void</type>
  <methodname>swftextfield-&gt;setindentation</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setindentation sets the indentation of  the first line in the text field, to width. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setleftmargin">
  <type>void</type>
  <methodname>swftextfield-&gt;setleftmargin</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setleftmargin sets the left margin width of the text field to width. Default is 0. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setlinespacing">
  <type>void</type>
  <methodname>swftextfield-&gt;setlinespacing</methodname>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setlinespacing sets the line spacing of the text field to the height of height. Default is 40.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setmargins">
  <type>void</type>
  <methodname>swftextfield-&gt;setmargins</methodname>
  <methodparam>
    <type>int</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>right</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setmargins set both margins at once,  for the man on the go.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setname">
  <type>void</type>
  <methodname>swftextfield-&gt;setname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setname sets the variable name of this text field to name, for form posting and action  scripting purposes.  </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield-&gt;setrightmargin">
  <type>void</type>
  <methodname>swftextfield-&gt;setrightmargin</methodname>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <desc>swftextfield-&amp;gt;setrightmargin sets the right margin width of the text field to width. Default is 0. </desc>
</methodsynopsis>
<methodsynopsis function="swftextfield">
  <type>SWFTextField</type>
  <methodname>swftextfield</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>swftextfield creates a new text field object.  Text Fields are less flexible than swftext objects-  they can't be rotated, scaled non-proportionally, or skewed, but they can be used as form entries, and they can use browser-defined fonts. </desc>
</methodsynopsis>
<methodsynopsis function="connection_aborted">
  <type>int</type>
  <methodname>connection_aborted</methodname>
  <void/>
  <desc> See also connection_status, and ignore_user_abort. </desc>
</methodsynopsis>
<methodsynopsis function="connection_status">
  <type>int</type>
  <methodname>connection_status</methodname>
  <void/>
  <desc> See also connection_aborted, and ignore_user_abort. </desc>
</methodsynopsis>
<methodsynopsis function="connection_timeout">
  <type>bool</type>
  <methodname>connection_timeout</methodname>
  <void/>
  <desc> See also connection_status. </desc>
</methodsynopsis>
<methodsynopsis function="constant">
  <type>mixed</type>
  <methodname>constant</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> constant example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="define">
  <type>bool</type>
  <methodname>define</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>case_insensitive</parameter>
  </methodparam>
  <desc> Defines a named constant. See the  section on constants for more details. </desc>
</methodsynopsis>
<methodsynopsis function="defined">
  <type>bool</type>
  <methodname>defined</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the named constant given by name has been defined,  &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="eval">
  <type>mixed</type>
  <methodname>eval</methodname>
  <methodparam>
    <type>string</type>
    <parameter>code_str</parameter>
  </methodparam>
  <desc> eval example - simple text merge ]]&amp;gt; &amp;amp;example.outputs; </desc>
</methodsynopsis>
<methodsynopsis function="exit">
  <type>void</type>
  <methodname>exit</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> exit example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="get_browser">
  <type>object</type>
  <methodname>get_browser</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>user_agent</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return_array</parameter>
  </methodparam>
  <desc>get_browser attempts to determine the capabilities of the user's browser. This is done by looking up the browser's information in the browscap.ini file. </desc>
</methodsynopsis>
<methodsynopsis function="highlight_file">
  <type>mixed</type>
  <methodname>highlight_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return</parameter>
  </methodparam>
  <desc> Many servers are configured to automatically highlight files with a phps extension. For example, example.phps when viewed will show the syntax highlighted source of the file. To enable this, add this line to the &amp;amp;httpd.conf;: </desc>
</methodsynopsis>
<methodsynopsis function="highlight_string">
  <type>mixed</type>
  <methodname>highlight_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return</parameter>
  </methodparam>
  <desc> highlight_string example ');
?&amp;gt;
]]&amp;gt; The above example will output (in PHP 4):  &amp;lt;?php phpinfo(); ?&amp;gt; ]]&amp;gt; The above example will output (in PHP 5):  &amp;lt;?php phpinfo(); ?&amp;gt; ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ignore_user_abort">
  <type>int</type>
  <methodname>ignore_user_abort</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>setting</parameter>
  </methodparam>
  <desc> See also connection_aborted, and connection_status. </desc>
</methodsynopsis>
<methodsynopsis function="pack">
  <type>string</type>
  <methodname>pack</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Pack given arguments into binary string according to format. Returns binary string containing data. </desc>
</methodsynopsis>
<methodsynopsis function="php_check_syntax">
  <type>bool</type>
  <methodname>php_check_syntax</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error_message</parameter>
  </methodparam>
  <desc> file_name The name of the file being checked. error_message If the error_message parameter is used, it will contain the error message generated by the syntax check.  error_message is passed by  reference. </desc>
</methodsynopsis>
<methodsynopsis function="php_strip_whitespace">
  <type>string</type>
  <methodname>php_strip_whitespace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline. </desc>
</methodsynopsis>
<methodsynopsis function="sleep">
  <type>void</type>
  <methodname>sleep</methodname>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <desc> sleep example ]]&amp;gt; This example will output (after 10 seconds) </desc>
</methodsynopsis>
<methodsynopsis function="time_nanosleep">
  <type>mixed</type>
  <methodname>time_nanosleep</methodname>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>nanoseconds</parameter>
  </methodparam>
  <desc> Delays program execution for the given number of seconds and nanoseconds. </desc>
</methodsynopsis>
<methodsynopsis function="uniqid">
  <type>string</type>
  <methodname>uniqid</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>more_entropy</parameter>
  </methodparam>
  <desc> If you need a unique identifier or token and you intend to give out that token to the user via the network (i.e. session cookies), it is recommended that you use something along these lines: </desc>
</methodsynopsis>
<methodsynopsis function="unpack">
  <type>array</type>
  <methodname>unpack</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>unpack from binary string into array according to format. Returns array containing unpacked elements of binary string. </desc>
</methodsynopsis>
<methodsynopsis function="usleep">
  <type>void</type>
  <methodname>usleep</methodname>
  <methodparam>
    <type>int</type>
    <parameter>micro_seconds</parameter>
  </methodparam>
  <desc> usleep example ]]&amp;gt; This script will output :  </desc>
</methodsynopsis>
<methodsynopsis function="udm_add_search_limit">
  <type>bool</type>
  <methodname>udm_add_search_limit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val</parameter>
  </methodparam>
  <desc>udm_add_search_limit adds search restrictions. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="udm_alloc_agent_array">
  <type>resource</type>
  <methodname>udm_alloc_agent_array</methodname>
  <methodparam>
    <type>array</type>
    <parameter>databases</parameter>
  </methodparam>
  <desc>udm_alloc_agent_array will create an agent with multiple database connections. The array databases must contain one database URL per element, analog to the first parameter of udm_alloc_agent. </desc>
</methodsynopsis>
<methodsynopsis function="udm_alloc_agent">
  <type>resource</type>
  <methodname>udm_alloc_agent</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dbaddr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbmode</parameter>
  </methodparam>
  <desc> Returns a mnogosearch agent identifier on success, &amp;amp;false; on failure. This function creates a session with database parameters. </desc>
</methodsynopsis>
<methodsynopsis function="udm_api_version">
  <type>int</type>
  <methodname>udm_api_version</methodname>
  <void/>
  <desc>udm_api_version returns the mnoGoSearch API version number. E.g. if mnoGoSearch 3.1.10 API is used, this function will return 30110. </desc>
</methodsynopsis>
<methodsynopsis function="udm_cat_list">
  <type>array</type>
  <methodname>udm_cat_list</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>category</parameter>
  </methodparam>
  <desc> Returns an array listing all categories of the same level as the current category in the categories tree. agent is the agent identifier returned by a previous call to &amp;gt;udm_alloc_agent. </desc>
</methodsynopsis>
<methodsynopsis function="udm_cat_path">
  <type>array</type>
  <methodname>udm_cat_path</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>category</parameter>
  </methodparam>
  <desc> Returns an array describing the path in the categories tree from the tree root to the current one, specified by category. agent is the agent identifier returned by a previous call to &amp;gt;udm_alloc_agent. </desc>
</methodsynopsis>
<methodsynopsis function="udm_check_charset">
  <type>bool</type>
  <methodname>udm_check_charset</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="udm_check_stored">
  <type>int</type>
  <methodname>udm_check_stored</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>doc_id</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="udm_clear_search_limits">
  <type>bool</type>
  <methodname>udm_clear_search_limits</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc>udm_clear_search_limits resets defined search  limitations and returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="udm_close_stored">
  <type>int</type>
  <methodname>udm_close_stored</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="udm_crc32">
  <type>int</type>
  <methodname>udm_crc32</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="udm_errno">
  <type>int</type>
  <methodname>udm_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc>udm_errno returns mnoGoSearch error number, zero if no error. </desc>
</methodsynopsis>
<methodsynopsis function="udm_error">
  <type>string</type>
  <methodname>udm_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc>udm_error returns mnoGoSearch error message,  empty string if no error. </desc>
</methodsynopsis>
<methodsynopsis function="udm_find">
  <type>resource</type>
  <methodname>udm_find</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc> Returns a result link identifier on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="udm_free_agent">
  <type>int</type>
  <methodname>udm_free_agent</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="udm_free_ispell_data">
  <type>bool</type>
  <methodname>udm_free_ispell_data</methodname>
  <methodparam>
    <type>int</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc>udm_free_ispell_data always returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="udm_free_res">
  <type>bool</type>
  <methodname>udm_free_res</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>res</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="udm_get_doc_count">
  <type>int</type>
  <methodname>udm_get_doc_count</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <desc>udm_get_doc_count returns the number of documents in the database. </desc>
</methodsynopsis>
<methodsynopsis function="udm_get_res_field">
  <type>string</type>
  <methodname>udm_get_res_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>res</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>udm_get_res_field returns result field value on  success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="udm_get_res_param">
  <type>string</type>
  <methodname>udm_get_res_param</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>res</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param</parameter>
  </methodparam>
  <desc>udm_get_res_param returns result parameter value on  success, &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="udm_hash32">
  <type>int</type>
  <methodname>udm_hash32</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc>udm_hash32 will take a string str and return a quite unique 32-bit hash number from it. Requires an allocated agent. </desc>
</methodsynopsis>
<methodsynopsis function="udm_load_ispell_data">
  <type>bool</type>
  <methodname>udm_load_ispell_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>udm_load_ispell_data loads ispell data. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="udm_open_stored">
  <type>int</type>
  <methodname>udm_open_stored</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>storedaddr</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="udm_set_agent_param">
  <type>bool</type>
  <methodname>udm_set_agent_param</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>agent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; Defines mnoGoSearch session parameters. </desc>
</methodsynopsis>
<methodsynopsis function="msession_connect">
  <type>bool</type>
  <methodname>msession_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>port</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_count">
  <type>int</type>
  <methodname>msession_count</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="msession_create">
  <type>bool</type>
  <methodname>msession_create</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_destroy">
  <type>bool</type>
  <methodname>msession_destroy</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_disconnect">
  <type>void</type>
  <methodname>msession_disconnect</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="msession_find">
  <type>array</type>
  <methodname>msession_find</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_get_array">
  <type>array</type>
  <methodname>msession_get_array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_get_data">
  <type>string</type>
  <methodname>msession_get_data</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_get">
  <type>string</type>
  <methodname>msession_get</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_inc">
  <type>string</type>
  <methodname>msession_inc</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_list">
  <type>array</type>
  <methodname>msession_list</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="msession_listvar">
  <type>array</type>
  <methodname>msession_listvar</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns an associative array of value/session for all sessions with a variable named name. </desc>
</methodsynopsis>
<methodsynopsis function="msession_lock">
  <type>int</type>
  <methodname>msession_lock</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_plugin">
  <type>string</type>
  <methodname>msession_plugin</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>param</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_randstr">
  <type>string</type>
  <methodname>msession_randstr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>param</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_set_array">
  <type>bool</type>
  <methodname>msession_set_array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>tuples</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_set_data">
  <type>bool</type>
  <methodname>msession_set_data</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_set">
  <type>bool</type>
  <methodname>msession_set</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_timeout">
  <type>int</type>
  <methodname>msession_timeout</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>param</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_uniq">
  <type>string</type>
  <methodname>msession_uniq</methodname>
  <methodparam>
    <type>int</type>
    <parameter>param</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msession_unlock">
  <type>int</type>
  <methodname>msession_unlock</methodname>
  <methodparam>
    <type>string</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="msql_affected_rows">
  <type>int</type>
  <methodname>msql_affected_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result. </desc>
</methodsynopsis>
<methodsynopsis function="msql_close">
  <type>bool</type>
  <methodname>msql_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_close closes the non-persistent connection to  the mSQL server that's associated with the specified link identifier. </desc>
</methodsynopsis>
<methodsynopsis function="msql_connect">
  <type>resource</type>
  <methodname>msql_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>msql_connect establishes a connection to a mSQL  server. </desc>
</methodsynopsis>
<methodsynopsis function="msql_create_db">
  <type>bool</type>
  <methodname>msql_create_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_create_db attempts to create a new database on  the mSQL server. </desc>
</methodsynopsis>
<methodsynopsis function="msql_data_seek">
  <type>bool</type>
  <methodname>msql_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc>msql_data_seek moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number.  The next call to msql_fetch_row would return that row. </desc>
</methodsynopsis>
<methodsynopsis function="msql_db_query">
  <type>resource</type>
  <methodname>msql_db_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_db_query selects a database and executes a query on it. </desc>
</methodsynopsis>
<methodsynopsis function="msql_drop_db">
  <type>bool</type>
  <methodname>msql_drop_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_drop_db attempts to drop (remove) a database from the mSQL server. </desc>
</methodsynopsis>
<methodsynopsis function="msql_error">
  <type>string</type>
  <methodname>msql_error</methodname>
  <void/>
  <desc>msql_error returns the last issued error by the mSQL server. Note that only the last error message is accessible with  msql_error. </desc>
</methodsynopsis>
<methodsynopsis function="msql_fetch_array">
  <type>array</type>
  <methodname>msql_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>msql_fetch_array is an extended version of msql_fetch_row.  In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys. </desc>
</methodsynopsis>
<methodsynopsis function="msql_fetch_field">
  <type>object</type>
  <methodname>msql_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>msql_fetch_field can be used in order to obtain  information about fields in a certain query result.   </desc>
</methodsynopsis>
<methodsynopsis function="msql_fetch_object">
  <type>object</type>
  <methodname>msql_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>msql_fetch_object is similar to msql_fetch_array, with one difference - an object is returned, instead of an array.  Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names). </desc>
</methodsynopsis>
<methodsynopsis function="msql_fetch_row">
  <type>array</type>
  <methodname>msql_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>msql_fetch_row fetches one row of data from the result associated with the specified query identifier.  The row is returned as an array.  Each result column is stored in an array offset, starting at offset 0. </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_flags">
  <type>string</type>
  <methodname>msql_field_flags</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>msql_field_flags returns the field flags of the specified field.  </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_len">
  <type>int</type>
  <methodname>msql_field_len</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>msql_field_len returns the length of the specified  field. </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_name">
  <type>string</type>
  <methodname>msql_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>msql_field_name gets the name of the specified field index. </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_seek">
  <type>bool</type>
  <methodname>msql_field_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Seeks to the specified field offset. If the next call to msql_fetch_field won't include a field offset, this  field would be returned. </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_table">
  <type>int</type>
  <methodname>msql_field_table</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Returns the name of the table that the specified field is in. </desc>
</methodsynopsis>
<methodsynopsis function="msql_field_type">
  <type>string</type>
  <methodname>msql_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>msql_field_name gets the type of the specified field index. </desc>
</methodsynopsis>
<methodsynopsis function="msql_free_result">
  <type>bool</type>
  <methodname>msql_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>msql_free_result frees the memory associated with query_identifier.  When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running. </desc>
</methodsynopsis>
<methodsynopsis function="msql_list_dbs">
  <type>resource</type>
  <methodname>msql_list_dbs</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_list_tables lists the databases available on the specified link_identifier.  </desc>
</methodsynopsis>
<methodsynopsis function="msql_list_fields">
  <type>resource</type>
  <methodname>msql_list_fields</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>tablename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_list_fields returns information about the given table. </desc>
</methodsynopsis>
<methodsynopsis function="msql_list_tables">
  <type>resource</type>
  <methodname>msql_list_tables</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_list_tables lists the tables on the specified database.  </desc>
</methodsynopsis>
<methodsynopsis function="msql_num_fields">
  <type>int</type>
  <methodname>msql_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>msql_num_fields returns the number of fields in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="msql_num_rows">
  <type>int</type>
  <methodname>msql_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>query_identifier</parameter>
  </methodparam>
  <desc>msql_num_rows returns the number of rows in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="msql_pconnect">
  <type>int</type>
  <methodname>msql_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>msql_pconnect acts very much like msql_connect with two major differences. </desc>
</methodsynopsis>
<methodsynopsis function="msql_query">
  <type>resource</type>
  <methodname>msql_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_query sends a query to the currently active  database on the server that's associated with the specified link  identifier. </desc>
</methodsynopsis>
<methodsynopsis function="msql_result">
  <type>string</type>
  <methodname>msql_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>msql_result returns the contents of one cell from a  mSQL result set.   </desc>
</methodsynopsis>
<methodsynopsis function="msql_select_db">
  <type>bool</type>
  <methodname>msql_select_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>msql_select_db sets the current active database on  the server that's associated with the specified link_identifier. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_bind">
  <type>bool</type>
  <methodname>mssql_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>param_name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">var</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>is_output</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>is_null</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlen</parameter>
  </methodparam>
  <desc> See also mssql_execute, mssql_free_statement, and mssql_init. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_close">
  <type>bool</type>
  <methodname>mssql_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mssql_close closes the link to a MS SQL Server database that's associated with the specified link identifier.  If the link identifier isn't specified, the last opened link is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_connect">
  <type>resource</type>
  <methodname>mssql_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>servername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Returns: A MS SQL link identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_data_seek">
  <type>bool</type>
  <methodname>mssql_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc>  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="mssql_execute">
  <type>mixed</type>
  <methodname>mssql_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>skip_results</parameter>
  </methodparam>
  <desc> See also mssql_bind, mssql_free_statement, and mssql_init. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_array">
  <type>array</type>
  <methodname>mssql_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>  Returns: An array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_assoc">
  <type>array</type>
  <methodname>mssql_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_batch">
  <type>int</type>
  <methodname>mssql_fetch_batch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_index</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_field">
  <type>object</type>
  <methodname>mssql_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Returns an object containing field information.   </desc>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_object">
  <type>object</type>
  <methodname>mssql_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>  Returns: An object with properties that correspond to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_fetch_row">
  <type>array</type>
  <methodname>mssql_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>  Returns: An array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_field_length">
  <type>int</type>
  <methodname>mssql_field_length</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> This function returns the length of field no. offset in  result result. If offset is omitted, the current field is used. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_field_name">
  <type>string</type>
  <methodname>mssql_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_field_seek">
  <type>bool</type>
  <methodname>mssql_field_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Seeks to the specified field offset.  If the next call to mssql_fetch_field won't include a field offset, this field would be returned.</desc>
</methodsynopsis>
<methodsynopsis function="mssql_field_type">
  <type>string</type>
  <methodname>mssql_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_free_result">
  <type>bool</type>
  <methodname>mssql_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>mssql_free_result only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result with the result identifier as an argument and the associated result memory will be freed. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_free_statement">
  <type>bool</type>
  <methodname>mssql_free_statement</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>mssql_free_statement only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call mssql_free_statement with the statement identifier as an argument and the associated statement memory will be freed. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_get_last_message">
  <type>string</type>
  <methodname>mssql_get_last_message</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="mssql_guid_string">
  <type>string</type>
  <methodname>mssql_guid_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>binary</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>short_format</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_init">
  <type>int</type>
  <methodname>mssql_init</methodname>
  <methodparam>
    <type>string</type>
    <parameter>sp_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>conn_id</parameter>
  </methodparam>
  <desc> See also mssql_bind, mssql_execute, and mssql_free_statement</desc>
</methodsynopsis>
<methodsynopsis function="mssql_min_error_severity">
  <type>void</type>
  <methodname>mssql_min_error_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_min_message_severity">
  <type>void</type>
  <methodname>mssql_min_message_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_next_result">
  <type>bool</type>
  <methodname>mssql_next_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set. The function will return &amp;amp;true; if an additional result set was available or &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_num_fields">
  <type>int</type>
  <methodname>mssql_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>mssql_num_fields returns the number of fields in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_num_rows">
  <type>int</type>
  <methodname>mssql_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>mssql_num_rows returns the number of rows in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_pconnect">
  <type>int</type>
  <methodname>mssql_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>servername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>  Returns: A positive MS SQL persistent link identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_query">
  <type>resource</type>
  <methodname>mssql_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>batch_size</parameter>
  </methodparam>
  <desc>  Returns: A positive MS SQL result identifier on success, &amp;amp;true; if no rows were returned, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_result">
  <type>string</type>
  <methodname>mssql_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>mssql_result returns the contents of one cell from a MS SQL result set.  The field argument can be the field's offset, the field's name or the field's table dot field's name (tablename.fieldname).  If the column name has been aliased ('select foo as bar from...'), it uses the alias instead of the column name. </desc>
</methodsynopsis>
<methodsynopsis function="mssql_rows_affected">
  <type>int</type>
  <methodname>mssql_rows_affected</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mssql_select_db">
  <type>bool</type>
  <methodname>mssql_select_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="muscat_close">
  <type>int</type>
  <methodname>muscat_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>muscat_handle</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="muscat_get">
  <type>string</type>
  <methodname>muscat_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>muscat_handle</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="muscat_give">
  <type>int</type>
  <methodname>muscat_give</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>muscat_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="muscat_setup_net">
  <type>resource</type>
  <methodname>muscat_setup_net</methodname>
  <methodparam>
    <type>string</type>
    <parameter>muscat_host</parameter>
  </methodparam>
  <desc>muscat_setup_net creates a new muscat session and returns the handle. </desc>
</methodsynopsis>
<methodsynopsis function="muscat_setup">
  <type>resource</type>
  <methodname>muscat_setup</methodname>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>muscat_dir</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="mysql_affected_rows">
  <type>int</type>
  <methodname>mysql_affected_rows</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Get the number of affected rows by the last INSERT, UPDATE or DELETE query associated with link_identifier.   </desc>
</methodsynopsis>
<methodsynopsis function="mysql_change_user">
  <type>int</type>
  <methodname>mysql_change_user</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_change_user changes the logged in user of the current active connection, or the connection given by the optional link_identifier parameter. If a database is specified, this will be the current database after the user has been changed. If the new user and password authorization fails, the current connected user stays active. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_client_encoding">
  <type>string</type>
  <methodname>mysql_client_encoding</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the character_set variable from MySQL. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_close">
  <type>bool</type>
  <methodname>mysql_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_close closes the non-persistent connection to  the MySQL server that's associated with the specified link identifier. If  link_identifier isn't specified, the last opened  link is used. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_connect">
  <type>resource</type>
  <methodname>mysql_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>new_link</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>client_flags</parameter>
  </methodparam>
  <desc> Opens or reuses a connection to a MySQL server. The link to the server will  be closed as soon as the execution of the script ends, unless it's closed  earlier by explicitly calling mysql_close. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_create_db">
  <type>bool</type>
  <methodname>mysql_create_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_create_db attempts to create a new database on the server associated with the specified link identifier. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_data_seek">
  <type>bool</type>
  <methodname>mysql_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc>mysql_data_seek moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number.  The next call to mysql_fetch_row would return that row. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_db_name">
  <type>string</type>
  <methodname>mysql_db_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> Retrieve the database name from a call to  mysql_list_dbs. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_db_query">
  <type>resource</type>
  <methodname>mysql_db_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_db_query selects a database, and executes a  query on it. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_drop_db">
  <type>bool</type>
  <methodname>mysql_drop_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_drop_db attempts to drop (remove) an entire database from the server associated with the specified link identifier. This function is deprecated, it is preferable to use  mysql_query to issue a sql  DROP DATABASE statement instead. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_errno">
  <type>int</type>
  <methodname>mysql_errno</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns the error number from the last MySQL function.  </desc>
</methodsynopsis>
<methodsynopsis function="mysql_error">
  <type>string</type>
  <methodname>mysql_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error and mysql_errno), so if you want to use it, make sure you check the value before calling another MySQL function. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_escape_string">
  <type>string</type>
  <methodname>mysql_escape_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>unescaped_string</parameter>
  </methodparam>
  <desc> This function will escape the unescaped_string, so that it is safe to place it in a mysql_query. This function is deprecated. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_array">
  <type>array</type>
  <methodname>mysql_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_assoc">
  <type>array</type>
  <methodname>mysql_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an associative array that corresponds to the fetched row. mysql_fetch_assoc is equivalent to calling mysql_fetch_array with MYSQL_ASSOC for the optional second parameter. It only returns an associative array. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_field">
  <type>object</type>
  <methodname>mysql_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Returns an object containing field information. This function can be used  to obtain information about fields in the provided query result. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_lengths">
  <type>array</type>
  <methodname>mysql_fetch_lengths</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_object">
  <type>object</type>
  <methodname>mysql_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an object with properties that correspond to the fetched row. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_fetch_row">
  <type>array</type>
  <methodname>mysql_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns a numerical array that corresponds to the fetched row. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_flags">
  <type>string</type>
  <methodname>mysql_field_flags</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>mysql_field_flags returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_len">
  <type>int</type>
  <methodname>mysql_field_len</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>mysql_field_len returns the length of the specified field. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_name">
  <type>string</type>
  <methodname>mysql_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>mysql_field_name returns the name of the specified field index.  </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_seek">
  <type>int</type>
  <methodname>mysql_field_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Seeks to the specified field offset.  If the next call to mysql_fetch_field doesn't include a field offset, the field offset specified in mysql_field_seek will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_table">
  <type>string</type>
  <methodname>mysql_field_table</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Returns the name of the table that the specified field is in. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_field_type">
  <type>string</type>
  <methodname>mysql_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc>mysql_field_type is similar to the mysql_field_name function. The arguments are identical, but the field type is returned instead. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_free_result">
  <type>bool</type>
  <methodname>mysql_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>mysql_free_result will free all memory associated with the result identifier result. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_get_client_info">
  <type>string</type>
  <methodname>mysql_get_client_info</methodname>
  <void/>
  <desc>mysql_get_client_info returns a string that represents the client library version. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_get_host_info">
  <type>string</type>
  <methodname>mysql_get_host_info</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Describes the type of connection in use for the connection, including the  server host name. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_get_proto_info">
  <type>int</type>
  <methodname>mysql_get_proto_info</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the MySQL protocol. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_get_server_info">
  <type>string</type>
  <methodname>mysql_get_server_info</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the MySQL server version. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_info">
  <type>string</type>
  <methodname>mysql_info</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns detailed information about the last query. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_insert_id">
  <type>int</type>
  <methodname>mysql_insert_id</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the ID generated for an AUTO_INCREMENT column by the previous  INSERT query. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_list_dbs">
  <type>resource</type>
  <methodname>mysql_list_dbs</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns a result pointer containing the databases available from the  current mysql daemon. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_list_fields">
  <type>resource</type>
  <methodname>mysql_list_fields</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves information about the given table name. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_list_processes">
  <type>resource</type>
  <methodname>mysql_list_processes</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the current MySQL server threads. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_list_tables">
  <type>resource</type>
  <methodname>mysql_list_tables</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves a list of table names from a MySQL database. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_num_fields">
  <type>int</type>
  <methodname>mysql_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Retrieves the number of fields from a query. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_num_rows">
  <type>int</type>
  <methodname>mysql_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Retrieves the number of rows from a result set. This command is only valid  for SELECT statements. To retrieve the number of rows affected by a INSERT,  UPDATE, or DELETE query, use mysql_affected_rows. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_pconnect">
  <type>resource</type>
  <methodname>mysql_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>client_flags</parameter>
  </methodparam>
  <desc> Establishes a persistent connection to a MySQL server. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_ping">
  <type>bool</type>
  <methodname>mysql_ping</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_query">
  <type>resource</type>
  <methodname>mysql_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_query sends a query (to the currently active database on the server that's associated with the specified link_identifier). </desc>
</methodsynopsis>
<methodsynopsis function="mysql_real_escape_string">
  <type>string</type>
  <methodname>mysql_real_escape_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>unescaped_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Escapes special characters in the unescaped_string,  taking into account the current character set of the connection so that it  is safe to place it in a mysql_query. If binary data  is to be inserted, this function must be used. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_result">
  <type>mixed</type>
  <methodname>mysql_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> Retrieves the contents of one cell from a MySQL result set. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_select_db">
  <type>bool</type>
  <methodname>mysql_select_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Sets the current active database on the server that's associated with the  specified link identifier. Every subsequent call to  mysql_query will be made on the active database. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_stat">
  <type>string</type>
  <methodname>mysql_stat</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_stat returns the current server status. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_tablename">
  <type>string</type>
  <methodname>mysql_tablename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>i</parameter>
  </methodparam>
  <desc> Retrieves the table name from a result. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_thread_id">
  <type>int</type>
  <methodname>mysql_thread_id</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Retrieves the current thread ID. If the connection is lost, and a reconnect  with mysql_ping is executed, the thread ID will  change. This means only retrieve the thread ID when needed. </desc>
</methodsynopsis>
<methodsynopsis function="mysql_unbuffered_query">
  <type>resource</type>
  <methodname>mysql_unbuffered_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>mysql_unbuffered_query sends a SQL query query to MySQL, without fetching and buffering the result rows automatically, as mysql_query does.  On the one hand, this saves a considerable amount of memory with SQL queries that produce large result sets. On the other hand, you can start working on the result set immediately after the first row has been retrieved: you don't have to wait until the complete SQL query has been performed.  When using multiple DB-connects, you have to specify the optional parameter link_identifier. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_affected_rows">
  <type>mixed</type>
  <methodname>mysqli_affected_rows</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_autocommit">
  <type>bool</type>
  <methodname>mysqli_autocommit</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_change_user">
  <type>bool</type>
  <methodname>mysqli_change_user</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>database</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_character_set_name">
  <type>string</type>
  <methodname>mysqli_character_set_name</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_close">
  <type>bool</type>
  <methodname>mysqli_close</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_commit">
  <type>bool</type>
  <methodname>mysqli_commit</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_connect_errno">
  <type>int</type>
  <methodname>mysqli_connect_errno</methodname>
  <void/>
  <desc> The mysqli_connect_errno function will return the last error code number for last call to mysqli_connect. If no errors have occured, this function will return zero. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_connect_error">
  <type>string</type>
  <methodname>mysqli_connect_error</methodname>
  <void/>
  <desc> The mysqli_connect_error function is identical to the corresponding mysqli_connect_errno function in every way, except instead of returning an integer error code the mysqli_connect_error function will return a string representation of the last error to occur for the last  mysqli_connect call. If no error has occured, this function will return an empty string. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_connect">
  <type>mysqli</type>
  <methodname>mysqli_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_data_seek">
  <type>bool</type>
  <methodname>mysqli_data_seek</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_debug">
  <type>void</type>
  <methodname>mysqli_debug</methodname>
  <methodparam>
    <type>string</type>
    <parameter>debug</parameter>
  </methodparam>
  <desc> The mysqli_debug function is used to perform debugging operations using the Fred Fish debugging library. The debug parameter is a string representing the debugging operation to perform. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_disable_reads_from_master">
  <type>void</type>
  <methodname>mysqli_disable_reads_from_master</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_disable_rpl_parse">
  <type>void</type>
  <methodname>mysqli_disable_rpl_parse</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_dump_debug_info">
  <type>bool</type>
  <methodname>mysqli_dump_debug_info</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection specified by the link parameter. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_embedded_connect">
  <type>mysqli</type>
  <methodname>mysqli_embedded_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_enable_reads_from_master">
  <type>void</type>
  <methodname>mysqli_enable_reads_from_master</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_enable_rpl_parse">
  <type>void</type>
  <methodname>mysqli_enable_rpl_parse</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_errno">
  <type>int</type>
  <methodname>mysqli_errno</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_error">
  <type>string</type>
  <methodname>mysqli_error</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_array">
  <type>mixed</type>
  <methodname>mysqli_fetch_array</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resulttype</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_assoc">
  <type>array</type>
  <methodname>mysqli_fetch_assoc</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_field_direct">
  <type>mixed</type>
  <methodname>mysqli_fetch_field_direct</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fieldnr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_field">
  <type>mixed</type>
  <methodname>mysqli_fetch_field</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_fields">
  <type>mixed</type>
  <methodname>mysqli_fetch_fields</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural Style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_lengths">
  <type>mixed</type>
  <methodname>mysqli_fetch_lengths</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_object">
  <type>mixed</type>
  <methodname>mysqli_fetch_object</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_fetch_row">
  <type>mixed</type>
  <methodname>mysqli_fetch_row</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_field_count">
  <type>int</type>
  <methodname>mysqli_field_count</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_field_seek">
  <type>int</type>
  <methodname>mysqli_field_seek</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fieldnr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_field_tell">
  <type>int</type>
  <methodname>mysqli_field_tell</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_free_result">
  <type>void</type>
  <methodname>mysqli_free_result</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_client_info">
  <type>string</type>
  <methodname>mysqli_get_client_info</methodname>
  <void/>
  <desc> The mysqli_get_client_info function is used to  return a string representing the client version being used in the  MySQLi extension. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_client_version">
  <type>int</type>
  <methodname>mysqli_get_client_version</methodname>
  <void/>
  <desc> Returns client version number as an integer. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_host_info">
  <type>string</type>
  <methodname>mysqli_get_host_info</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procdural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_proto_info">
  <type>int</type>
  <methodname>mysqli_get_proto_info</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_server_info">
  <type>string</type>
  <methodname>mysqli_get_server_info</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_get_server_version">
  <type>int</type>
  <methodname>mysqli_get_server_version</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_info">
  <type>string</type>
  <methodname>mysqli_info</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_init">
  <type>mysqli</type>
  <methodname>mysqli_init</methodname>
  <void/>
  <desc> Allocates or initializes a MYSQL object suitable for  mysqli_options and mysqli_real_connect. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_insert_id">
  <type>mixed</type>
  <methodname>mysqli_insert_id</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_kill">
  <type>bool</type>
  <methodname>mysqli_kill</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>processid</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_master_query">
  <type>bool</type>
  <methodname>mysqli_master_query</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_more_results">
  <type>bool</type>
  <methodname>mysqli_more_results</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>mysqli_more_results indicates if one or more result sets are available from a previous call to mysqli_multi_query. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_multi_query">
  <type>bool</type>
  <methodname>mysqli_multi_query</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_next_result">
  <type>bool</type>
  <methodname>mysqli_next_result</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>mysqli_next_result prepares next result set from a previous call to mysqli_multi_query which can be retrieved by mysqli_store_result or mysqli_use_result. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_num_fields">
  <type>int</type>
  <methodname>mysqli_num_fields</methodname>
  <methodparam>
    <type>mysqli_result</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_num_rows">
  <type>mixed</type>
  <methodname>mysqli_num_rows</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_options">
  <type>bool</type>
  <methodname>mysqli_options</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_ping">
  <type>bool</type>
  <methodname>mysqli_ping</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_prepare">
  <type>mixed</type>
  <methodname>mysqli_prepare</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedure style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_query">
  <type>mixed</type>
  <methodname>mysqli_query</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>resultmode</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_real_connect">
  <type>bool</type>
  <methodname>mysqli_real_connect</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_real_escape_string">
  <type>string</type>
  <methodname>mysqli_real_escape_string</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>escapestr</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_real_query">
  <type>bool</type>
  <methodname>mysqli_real_query</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_report">
  <type>bool</type>
  <methodname>mysqli_report</methodname>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>mysqli_report is a powerful function to improve your queries and code during development and testing phase. Depending on the flags it reports errors from mysqli function calls or queries which don't use an index (or use a bad index). </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_rollback">
  <type>bool</type>
  <methodname>mysqli_rollback</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc> Rollbacks the current transaction for the database specified by the link parameter. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_rpl_parse_enabled">
  <type>int</type>
  <methodname>mysqli_rpl_parse_enabled</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_rpl_probe">
  <type>bool</type>
  <methodname>mysqli_rpl_probe</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_rpl_query_type">
  <type>int</type>
  <methodname>mysqli_rpl_query_type</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_select_db">
  <type>bool</type>
  <methodname>mysqli_select_db</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dbname</parameter>
  </methodparam>
  <desc> The mysqli_select_db function selects the default database (specified by the dbname parameter) to be  used when performing queries against the database connection  represented by the link parameter. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_send_query">
  <type>bool</type>
  <methodname>mysqli_send_query</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_server_end">
  <type>void</type>
  <methodname>mysqli_server_end</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="mysqli_server_init">
  <type>bool</type>
  <methodname>mysqli_server_init</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>groups</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="mysqli_sqlstate">
  <type>string</type>
  <methodname>mysqli_sqlstate</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_ssl_set">
  <type>bool</type>
  <methodname>mysqli_ssl_set</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>cert</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ca</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>capath</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>cipher</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stat">
  <type>mixed</type>
  <methodname>mysqli_stat</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_affected_rows">
  <type>mixed</type>
  <methodname>mysqli_stmt_affected_rows</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_bind_param">
  <type>bool</type>
  <methodname>mysqli_stmt_bind_param</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>types</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">var1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter role="reference">...</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_bind_result">
  <type>bool</type>
  <methodname>mysqli_stmt_bind_result</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">var1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter role="reference">...</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_close">
  <type>bool</type>
  <methodname>mysqli_stmt_close</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_data_seek">
  <type>bool</type>
  <methodname>mysqli_stmt_data_seek</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_errno">
  <type>int</type>
  <methodname>mysqli_stmt_errno</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_error">
  <type>string</type>
  <methodname>mysqli_stmt_error</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_execute">
  <type>bool</type>
  <methodname>mysqli_stmt_execute</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_fetch">
  <type>mixed</type>
  <methodname>mysqli_stmt_fetch</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_free_result">
  <type>void</type>
  <methodname>mysqli_stmt_free_result</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_init">
  <type>mysqli_stmt</type>
  <methodname>mysqli_stmt_init</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_num_rows">
  <type>mixed</type>
  <methodname>mysqli_stmt_num_rows</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style :</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_param_count">
  <type>int</type>
  <methodname>mysqli_stmt_param_count</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_prepare">
  <type>bool</type>
  <methodname>mysqli_stmt_prepare</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Procedure style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_reset">
  <type>bool</type>
  <methodname>mysqli_stmt_reset</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_result_metadata">
  <type>mixed</type>
  <methodname>mysqli_stmt_result_metadata</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_send_long_data">
  <type>bool</type>
  <methodname>mysqli_stmt_send_long_data</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param_nr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_sqlstate">
  <type>string</type>
  <methodname>mysqli_stmt_sqlstate</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail.  The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see  &amp;amp;url.mysql.docs.error;. </desc>
</methodsynopsis>
<methodsynopsis function="mysqli_stmt_store_result">
  <type>bool</type>
  <methodname>mysqli_stmt_store_result</methodname>
  <methodparam>
    <type>mysqli_stmt</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_store_result">
  <type>mysqli_result</type>
  <methodname>mysqli_store_result</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_thread_id">
  <type>int</type>
  <methodname>mysqli_thread_id</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_thread_safe">
  <type>bool</type>
  <methodname>mysqli_thread_safe</methodname>
  <void/>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_use_result">
  <type>mixed</type>
  <methodname>mysqli_use_result</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="mysqli_warning_count">
  <type>int</type>
  <methodname>mysqli_warning_count</methodname>
  <methodparam>
    <type>mysqli</type>
    <parameter>link</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_addch">
  <type>int</type>
  <methodname>ncurses_addch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_addchnstr">
  <type>int</type>
  <methodname>ncurses_addchnstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_addchstr">
  <type>int</type>
  <methodname>ncurses_addchstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_addnstr">
  <type>int</type>
  <methodname>ncurses_addnstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_addstr">
  <type>int</type>
  <methodname>ncurses_addstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_assume_default_colors">
  <type>int</type>
  <methodname>ncurses_assume_default_colors</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fg</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_attroff">
  <type>int</type>
  <methodname>ncurses_attroff</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attributes</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_attron">
  <type>int</type>
  <methodname>ncurses_attron</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attributes</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_attrset">
  <type>int</type>
  <methodname>ncurses_attrset</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attributes</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_baudrate">
  <type>int</type>
  <methodname>ncurses_baudrate</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_beep">
  <type>int</type>
  <methodname>ncurses_beep</methodname>
  <void/>
  <desc>ncurses_beep sends an audible alert (bell) and if its not possible flashes the screen. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_bkgd">
  <type>int</type>
  <methodname>ncurses_bkgd</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attrchar</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_bkgdset">
  <type>void</type>
  <methodname>ncurses_bkgdset</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attrchar</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_border">
  <type>int</type>
  <methodname>ncurses_border</methodname>
  <methodparam>
    <type>int</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>right</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>top</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bottom</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tl_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tr_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bl_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>br_corner</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ncurses_bottom_panel">
  <type>int</type>
  <methodname>ncurses_bottom_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_can_change_color">
  <type>bool</type>
  <methodname>ncurses_can_change_color</methodname>
  <void/>
  <desc> The function ncurses_can_change_color returns  &amp;amp;true; or &amp;amp;false;, depending on whether the terminal has color capabilities and whether the programmer can change the colors. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_cbreak">
  <type>bool</type>
  <methodname>ncurses_cbreak</methodname>
  <void/>
  <desc>ncurses_cbreak disables line buffering and character processing (interrupt and flow control characters are unaffected), making characters typed by the user immediately available to the program. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_clear">
  <type>bool</type>
  <methodname>ncurses_clear</methodname>
  <void/>
  <desc>ncurses_clear clears the screen completely without setting blanks. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_clrtobot">
  <type>bool</type>
  <methodname>ncurses_clrtobot</methodname>
  <void/>
  <desc>ncurses_clrtobot erases all lines from cursor to end of screen and creates blanks. Blanks created by  ncurses_clrtobot have the current background rendition. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_clrtoeol">
  <type>bool</type>
  <methodname>ncurses_clrtoeol</methodname>
  <void/>
  <desc>ncurses_clrtoeol erases the current line from cursor position to the end. Blanks created by  ncurses_clrtoeol have the current background rendition. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_color_content">
  <type>int</type>
  <methodname>ncurses_color_content</methodname>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">r</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">g</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">b</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_color_set">
  <type>int</type>
  <methodname>ncurses_color_set</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pair</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_curs_set">
  <type>int</type>
  <methodname>ncurses_curs_set</methodname>
  <methodparam>
    <type>int</type>
    <parameter>visibility</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_def_prog_mode">
  <type>bool</type>
  <methodname>ncurses_def_prog_mode</methodname>
  <void/>
  <desc>ncurses_def_prog_mode saves the current terminal modes for program (in curses) for use by ncurses_reset_prog_mode. Returns &amp;amp;false; on success, otherwise &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_def_shell_mode">
  <type>bool</type>
  <methodname>ncurses_def_shell_mode</methodname>
  <void/>
  <desc>ncurses_def_shell_mode saves the current terminal modes for shell (not in curses) for use by ncurses_reset_shell_mode. Returns &amp;amp;false; on success, otherwise &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_define_key">
  <type>int</type>
  <methodname>ncurses_define_key</methodname>
  <methodparam>
    <type>string</type>
    <parameter>definition</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>keycode</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_del_panel">
  <type>int</type>
  <methodname>ncurses_del_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_delay_output">
  <type>int</type>
  <methodname>ncurses_delay_output</methodname>
  <methodparam>
    <type>int</type>
    <parameter>milliseconds</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_delch">
  <type>bool</type>
  <methodname>ncurses_delch</methodname>
  <void/>
  <desc>ncurses_delch deletes the character under the cursor. All characters to the right of the cursor on the same line are moved to the left one position and the last character on the line is filled with a blank. The cursor position does not change. Returns &amp;amp;false; on success, otherwise &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_deleteln">
  <type>bool</type>
  <methodname>ncurses_deleteln</methodname>
  <void/>
  <desc>ncurses_deleteln deletes the current line under cursorposition. All lines below the current line are moved up one line. The bottom line of window is cleared. Cursor position does not change. Returns &amp;amp;false; on success, otherwise &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_delwin">
  <type>int</type>
  <methodname>ncurses_delwin</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_doupdate">
  <type>bool</type>
  <methodname>ncurses_doupdate</methodname>
  <void/>
  <desc>ncurses_doupdate() compares the virtual screen to the physical screen and updates the physical screen. This way is more effective than using multiple refresh calls. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_echo">
  <type>bool</type>
  <methodname>ncurses_echo</methodname>
  <void/>
  <desc>ncurses_echo enables echo mode. All characters typed by user are echoed by ncurses_getch. Returns &amp;amp;false; on success, &amp;amp;true; if any error occurred.  </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_echochar">
  <type>int</type>
  <methodname>ncurses_echochar</methodname>
  <methodparam>
    <type>int</type>
    <parameter>character</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_end">
  <type>int</type>
  <methodname>ncurses_end</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_erase">
  <type>bool</type>
  <methodname>ncurses_erase</methodname>
  <void/>
  <desc>ncurses_erase fills the terminal screen with blanks. Created blanks have the current background rendition, set by ncurses_bkgd. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_erasechar">
  <type>string</type>
  <methodname>ncurses_erasechar</methodname>
  <void/>
  <desc>ncurses_erasechar returns the current erase char character. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_filter">
  <type>int</type>
  <methodname>ncurses_filter</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_flash">
  <type>bool</type>
  <methodname>ncurses_flash</methodname>
  <void/>
  <desc>ncurses_flash flashes the screen, and if its not possible, sends an audible alert (bell). Returns &amp;amp;false; on success, otherwise &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_flushinp">
  <type>bool</type>
  <methodname>ncurses_flushinp</methodname>
  <void/>
  <desc> The ncurses_flushinp throws away any typeahead that has been typed and has not yet been read by your program. Returns &amp;amp;false; on success, otherwise &amp;amp;true;.  </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_getch">
  <type>int</type>
  <methodname>ncurses_getch</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_getmaxyx">
  <type>void</type>
  <methodname>ncurses_getmaxyx</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">x</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ncurses_getmouse">
  <type>bool</type>
  <methodname>ncurses_getmouse</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">mevent</parameter>
  </methodparam>
  <desc>ncurses_getmouse reads mouse event out of queue. Function ncurses_getmouse will return ;&amp;amp;false; if a mouse event is actually visible in the given window, otherwise it will return &amp;amp;true;. Event options will be delivered in parameter mevent, which has to be an array, passed by reference (see example below). On success an associative array with following keys will be delivered: "id" : Id to distinguish multiple devices"x" : screen relative x-position in character cells"y" : screen relative y-position in character cells"z" : currently not supported"mmask" : Mouse action</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_getyx">
  <type>void</type>
  <methodname>ncurses_getyx</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_halfdelay">
  <type>int</type>
  <methodname>ncurses_halfdelay</methodname>
  <methodparam>
    <type>int</type>
    <parameter>tenth</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_has_colors">
  <type>bool</type>
  <methodname>ncurses_has_colors</methodname>
  <void/>
  <desc>ncurses_has_colors returns &amp;amp;true; or &amp;amp;false; depending on whether the terminal has color capacities. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_has_ic">
  <type>bool</type>
  <methodname>ncurses_has_ic</methodname>
  <void/>
  <desc>ncurses_has_ic checks terminals insert- and delete capabilities. It returns &amp;amp;true; when terminal has insert/delete-capabilities, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_has_il">
  <type>bool</type>
  <methodname>ncurses_has_il</methodname>
  <void/>
  <desc>ncurses_has_il checks terminals insert- and delete-line-capabilities. It returns &amp;amp;true; when terminal has insert/delete-line capabilities, otherwise &amp;amp;false; </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_has_key">
  <type>int</type>
  <methodname>ncurses_has_key</methodname>
  <methodparam>
    <type>int</type>
    <parameter>keycode</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_hide_panel">
  <type>int</type>
  <methodname>ncurses_hide_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_hline">
  <type>int</type>
  <methodname>ncurses_hline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>charattr</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_inch">
  <type>string</type>
  <methodname>ncurses_inch</methodname>
  <void/>
  <desc>ncurses_inch returns the character from the current position. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_init_color">
  <type>int</type>
  <methodname>ncurses_init_color</methodname>
  <methodparam>
    <type>int</type>
    <parameter>color</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>b</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_init_pair">
  <type>int</type>
  <methodname>ncurses_init_pair</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pair</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fg</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_init">
  <type>int</type>
  <methodname>ncurses_init</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ncurses_insch">
  <type>int</type>
  <methodname>ncurses_insch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>character</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_insdelln">
  <type>int</type>
  <methodname>ncurses_insdelln</methodname>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_insertln">
  <type>bool</type>
  <methodname>ncurses_insertln</methodname>
  <void/>
  <desc>ncurses_insertln inserts a new line above the current line. The bottom line will be lost. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_insstr">
  <type>int</type>
  <methodname>ncurses_insstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_instr">
  <type>int</type>
  <methodname>ncurses_instr</methodname>
  <methodparam>
    <type>string</type>
    <parameter role="reference">buffer</parameter>
  </methodparam>
  <desc>ncurses_instr returns the number of characters read from the current character position until end of line. buffer contains the characters. Attributes are stripped from the characters.  </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_isendwin">
  <type>bool</type>
  <methodname>ncurses_isendwin</methodname>
  <void/>
  <desc>ncurses_isendwin returns &amp;amp;true;, if ncurses_endwin has been called without any subsequent calls to ncurses_wrefresh,  otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_keyok">
  <type>int</type>
  <methodname>ncurses_keyok</methodname>
  <methodparam>
    <type>int</type>
    <parameter>keycode</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>enable</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_keypad">
  <type>int</type>
  <methodname>ncurses_keypad</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>bf</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_killchar">
  <type>bool</type>
  <methodname>ncurses_killchar</methodname>
  <void/>
  <desc>ncurses_killchar returns the current line kill character. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_longname">
  <type>string</type>
  <methodname>ncurses_longname</methodname>
  <void/>
  <desc>ncurses_longname returns a verbose description of the terminal. The description is truncated to 128 characters. On Error ncurses_longname returns NULL. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_meta">
  <type>int</type>
  <methodname>ncurses_meta</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>8bit</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mouse_trafo">
  <type>bool</type>
  <methodname>ncurses_mouse_trafo</methodname>
  <methodparam>
    <type>int</type>
    <parameter role="reference">y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">x</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>toscreen</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mouseinterval">
  <type>int</type>
  <methodname>ncurses_mouseinterval</methodname>
  <methodparam>
    <type>int</type>
    <parameter>milliseconds</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mousemask">
  <type>int</type>
  <methodname>ncurses_mousemask</methodname>
  <methodparam>
    <type>int</type>
    <parameter>newmask</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">oldmask</parameter>
  </methodparam>
  <desc> Function ncurses_mousemask will set mouse events to be reported. By default no mouse events will be reported. The function ncurses_mousemask will return a mask to indicated which of the in parameter  newmask specified mouse events can be reported. On complete failure, it returns 0. In parameter oldmask, which is passed by reference ncurses_mousemask returns the previous value of mouse event mask. Mouse events are represented by NCURSES_KEY_MOUSE in the ncurses_wgetch input stream. To read the event data and pop the event of of queue, call ncurses_getmouse. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_move_panel">
  <type>int</type>
  <methodname>ncurses_move_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>startx</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>starty</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_move">
  <type>int</type>
  <methodname>ncurses_move</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvaddch">
  <type>int</type>
  <methodname>ncurses_mvaddch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>c</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvaddchnstr">
  <type>int</type>
  <methodname>ncurses_mvaddchnstr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvaddchstr">
  <type>int</type>
  <methodname>ncurses_mvaddchstr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvaddnstr">
  <type>int</type>
  <methodname>ncurses_mvaddnstr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvaddstr">
  <type>int</type>
  <methodname>ncurses_mvaddstr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>s</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvcur">
  <type>int</type>
  <methodname>ncurses_mvcur</methodname>
  <methodparam>
    <type>int</type>
    <parameter>old_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>old_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>new_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>new_x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvdelch">
  <type>int</type>
  <methodname>ncurses_mvdelch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvgetch">
  <type>int</type>
  <methodname>ncurses_mvgetch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvhline">
  <type>int</type>
  <methodname>ncurses_mvhline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>attrchar</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvinch">
  <type>int</type>
  <methodname>ncurses_mvinch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvvline">
  <type>int</type>
  <methodname>ncurses_mvvline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>attrchar</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_mvwaddstr">
  <type>int</type>
  <methodname>ncurses_mvwaddstr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_napms">
  <type>int</type>
  <methodname>ncurses_napms</methodname>
  <methodparam>
    <type>int</type>
    <parameter>milliseconds</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_new_panel">
  <type>resource</type>
  <methodname>ncurses_new_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_newpad">
  <type>resource</type>
  <methodname>ncurses_newpad</methodname>
  <methodparam>
    <type>int</type>
    <parameter>rows</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cols</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_newwin">
  <type>resource</type>
  <methodname>ncurses_newwin</methodname>
  <methodparam>
    <type>int</type>
    <parameter>rows</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cols</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ncurses_nl">
  <type>bool</type>
  <methodname>ncurses_nl</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_nocbreak">
  <type>bool</type>
  <methodname>ncurses_nocbreak</methodname>
  <void/>
  <desc>ncurses_nocbreak routine returns terminal to normal (cooked) mode. Initially the terminal may or may not in cbreak mode as the mode is inherited. Therefore a program should call ncurses_cbreak and ncurses_nocbreak explicitly. Returns &amp;amp;true; if any error occurred, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_noecho">
  <type>bool</type>
  <methodname>ncurses_noecho</methodname>
  <void/>
  <desc>ncurses_noecho prevents echoing of user typed characters. Returns &amp;amp;true; if any error occurred, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_nonl">
  <type>bool</type>
  <methodname>ncurses_nonl</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_noqiflush">
  <type>int</type>
  <methodname>ncurses_noqiflush</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_noraw">
  <type>bool</type>
  <methodname>ncurses_noraw</methodname>
  <void/>
  <desc>ncurses_noraw switches the terminal out of raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal. Returns &amp;amp;true; if any error occurred, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_pair_content">
  <type>int</type>
  <methodname>ncurses_pair_content</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pair</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">f</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">b</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_panel_above">
  <type>int</type>
  <methodname>ncurses_panel_above</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_panel_below">
  <type>int</type>
  <methodname>ncurses_panel_below</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_panel_window">
  <type>int</type>
  <methodname>ncurses_panel_window</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_pnoutrefresh">
  <type>int</type>
  <methodname>ncurses_pnoutrefresh</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pad</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pminrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pmincol</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sminrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smincol</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smaxrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smaxcol</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_prefresh">
  <type>int</type>
  <methodname>ncurses_prefresh</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pad</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pminrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pmincol</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sminrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smincol</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smaxrow</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>smaxcol</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_putp">
  <type>int</type>
  <methodname>ncurses_putp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_qiflush">
  <type>int</type>
  <methodname>ncurses_qiflush</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_raw">
  <type>bool</type>
  <methodname>ncurses_raw</methodname>
  <void/>
  <desc>ncurses_raw places the terminal in raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal. Returns &amp;amp;true; if any error occurred, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_refresh">
  <type>int</type>
  <methodname>ncurses_refresh</methodname>
  <methodparam>
    <type>int</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_replace_panel">
  <type>int</type>
  <methodname>ncurses_replace_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_reset_prog_mode">
  <type>int</type>
  <methodname>ncurses_reset_prog_mode</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_reset_shell_mode">
  <type>int</type>
  <methodname>ncurses_reset_shell_mode</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_resetty">
  <type>bool</type>
  <methodname>ncurses_resetty</methodname>
  <void/>
  <desc> Function ncurses_resetty restores the terminal state, which was previously saved by calling ncurses_savetty. This function always returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_savetty">
  <type>bool</type>
  <methodname>ncurses_savetty</methodname>
  <void/>
  <desc> Function ncurses_savetty saves the current terminal state. The saved terminal state can be restored with function ncurses_resetty. ncurses_savetty always returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_scr_dump">
  <type>int</type>
  <methodname>ncurses_scr_dump</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_scr_init">
  <type>int</type>
  <methodname>ncurses_scr_init</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_scr_restore">
  <type>int</type>
  <methodname>ncurses_scr_restore</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_scr_set">
  <type>int</type>
  <methodname>ncurses_scr_set</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_scrl">
  <type>int</type>
  <methodname>ncurses_scrl</methodname>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_show_panel">
  <type>int</type>
  <methodname>ncurses_show_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_attr">
  <type>bool</type>
  <methodname>ncurses_slk_attr</methodname>
  <void/>
  <desc>ncurses_slk_attr returns the current soft label key attribute. On error returns &amp;amp;true;, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_attroff">
  <type>int</type>
  <methodname>ncurses_slk_attroff</methodname>
  <methodparam>
    <type>int</type>
    <parameter>intarg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_attron">
  <type>int</type>
  <methodname>ncurses_slk_attron</methodname>
  <methodparam>
    <type>int</type>
    <parameter>intarg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_attrset">
  <type>int</type>
  <methodname>ncurses_slk_attrset</methodname>
  <methodparam>
    <type>int</type>
    <parameter>intarg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_clear">
  <type>bool</type>
  <methodname>ncurses_slk_clear</methodname>
  <void/>
  <desc> The function ncurses_slk_clear clears soft label keys from screen. Returns &amp;amp;true; on error, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_color">
  <type>int</type>
  <methodname>ncurses_slk_color</methodname>
  <methodparam>
    <type>int</type>
    <parameter>intarg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_init">
  <type>bool</type>
  <methodname>ncurses_slk_init</methodname>
  <methodparam>
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <desc> Function ncurses_slk_init must be called before ncurses_initscr or ncurses_newterm is called. If ncurses_initscr eventually uses a line from stdscr to emulate the soft labels, then format determines how the labels are arranged of the screen. Setting format to 0 indicates a 3-2-3 arrangement of the labels, 1 indicates a 4-4 arrangement and 2 indicates the PC like 4-4-4 mode, but in addition an index line will be created. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_noutrefresh">
  <type>bool</type>
  <methodname>ncurses_slk_noutrefresh</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_refresh">
  <type>bool</type>
  <methodname>ncurses_slk_refresh</methodname>
  <void/>
  <desc>ncurses_slk_refresh copies soft label keys from virtual screen to physical screen. Returns &amp;amp;true; on error, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_restore">
  <type>bool</type>
  <methodname>ncurses_slk_restore</methodname>
  <void/>
  <desc> The function ncurses_slk_restore restores the soft label keys after ncurses_slk_clear has been performed. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_set">
  <type>bool</type>
  <methodname>ncurses_slk_set</methodname>
  <methodparam>
    <type>int</type>
    <parameter>labelnr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>label</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_slk_touch">
  <type>bool</type>
  <methodname>ncurses_slk_touch</methodname>
  <void/>
  <desc> The ncurses_slk_touch function forces  all the soft  labels to be output the next time a ncurses_slk_noutrefresh is performed. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_standend">
  <type>int</type>
  <methodname>ncurses_standend</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_standout">
  <type>int</type>
  <methodname>ncurses_standout</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_start_color">
  <type>int</type>
  <methodname>ncurses_start_color</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_termattrs">
  <type>bool</type>
  <methodname>ncurses_termattrs</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_termname">
  <type>string</type>
  <methodname>ncurses_termname</methodname>
  <void/>
  <desc>ncurses_termname returns terminals shortname. The shortname is truncated to 14 characters. On error ncurses_termname returns NULL. </desc>
</methodsynopsis>
<methodsynopsis function="ncurses_timeout">
  <type>void</type>
  <methodname>ncurses_timeout</methodname>
  <methodparam>
    <type>int</type>
    <parameter>millisec</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_top_panel">
  <type>int</type>
  <methodname>ncurses_top_panel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>panel</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_typeahead">
  <type>int</type>
  <methodname>ncurses_typeahead</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fd</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_ungetch">
  <type>int</type>
  <methodname>ncurses_ungetch</methodname>
  <methodparam>
    <type>int</type>
    <parameter>keycode</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_ungetmouse">
  <type>bool</type>
  <methodname>ncurses_ungetmouse</methodname>
  <methodparam>
    <type>array</type>
    <parameter>mevent</parameter>
  </methodparam>
  <desc>ncurses_getmouse pushes a KEY_MOUSE event onto the unput queue and associates with this event the given state sata and screen-relative character cell coordinates, specified in mevent. Event options will be specified in associative array  mevent: "id" : Id to distinguish multiple devices"x" : screen relative x-position in character cells"y" : screen relative y-position in character cells"z" : currently not supported"mmask" : Mouse action</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_update_panels">
  <type>void</type>
  <methodname>ncurses_update_panels</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_use_default_colors">
  <type>bool</type>
  <methodname>ncurses_use_default_colors</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_use_env">
  <type>void</type>
  <methodname>ncurses_use_env</methodname>
  <methodparam>
    <type>bool</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_use_extended_names">
  <type>int</type>
  <methodname>ncurses_use_extended_names</methodname>
  <methodparam>
    <type>bool</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_vidattr">
  <type>int</type>
  <methodname>ncurses_vidattr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>intarg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_vline">
  <type>int</type>
  <methodname>ncurses_vline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>charattr</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_waddch">
  <type>int</type>
  <methodname>ncurses_waddch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ch</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_waddstr">
  <type>int</type>
  <methodname>ncurses_waddstr</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wattroff">
  <type>int</type>
  <methodname>ncurses_wattroff</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>attrs</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wattron">
  <type>int</type>
  <methodname>ncurses_wattron</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>attrs</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wattrset">
  <type>int</type>
  <methodname>ncurses_wattrset</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>attrs</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wborder">
  <type>int</type>
  <methodname>ncurses_wborder</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>right</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>top</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bottom</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tl_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tr_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bl_corner</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>br_corner</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ncurses_wclear">
  <type>int</type>
  <methodname>ncurses_wclear</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wcolor_set">
  <type>int</type>
  <methodname>ncurses_wcolor_set</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>color_pair</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_werase">
  <type>int</type>
  <methodname>ncurses_werase</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wgetch">
  <type>int</type>
  <methodname>ncurses_wgetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_whline">
  <type>int</type>
  <methodname>ncurses_whline</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>charattr</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wmouse_trafo">
  <type>bool</type>
  <methodname>ncurses_wmouse_trafo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">x</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>toscreen</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wmove">
  <type>int</type>
  <methodname>ncurses_wmove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wnoutrefresh">
  <type>int</type>
  <methodname>ncurses_wnoutrefresh</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wrefresh">
  <type>int</type>
  <methodname>ncurses_wrefresh</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wstandend">
  <type>int</type>
  <methodname>ncurses_wstandend</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wstandout">
  <type>int</type>
  <methodname>ncurses_wstandout</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="ncurses_wvline">
  <type>int</type>
  <methodname>ncurses_wvline</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>window</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>charattr</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="checkdnsrr">
  <type>int</type>
  <methodname>checkdnsrr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> AAAA type added with PHP 5.0.0 </desc>
</methodsynopsis>
<methodsynopsis function="closelog">
  <type>int</type>
  <methodname>closelog</methodname>
  <void/>
  <desc>closelog closes the descriptor being used to write to the system logger.  The use of closelog is optional. </desc>
</methodsynopsis>
<methodsynopsis function="debugger_off">
  <type>int</type>
  <methodname>debugger_off</methodname>
  <void/>
  <desc> Disables the internal PHP debugger. This function is only available in PHP 3. </desc>
</methodsynopsis>
<methodsynopsis function="debugger_on">
  <type>int</type>
  <methodname>debugger_on</methodname>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <desc> Enables the internal PHP debugger, connecting it to address.   This function is only available in PHP 3. </desc>
</methodsynopsis>
<methodsynopsis function="define_syslog_variables">
  <type>void</type>
  <methodname>define_syslog_variables</methodname>
  <void/>
  <desc> Initializes all constants used in the syslog functions. </desc>
</methodsynopsis>
<methodsynopsis function="dns_check_record">
  <type>int</type>
  <methodname>dns_check_record</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> Check DNS records corresponding to a given Internet host name or IP address </desc>
</methodsynopsis>
<methodsynopsis function="dns_get_mx">
  <type>int</type>
  <methodname>dns_get_mx</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">mxhosts</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">weight</parameter>
  </methodparam>
  <desc> Get MX records corresponding to a given Internet host name. </desc>
</methodsynopsis>
<methodsynopsis function="dns_get_record">
  <type>array</type>
  <methodname>dns_get_record</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">authns</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">addtl</parameter>
  </methodparam>
  <desc> This function is not implemented on Windows platforms, nor does it (currently) work on *BSD systems. Try the  PEAR class  Net_DNS. </desc>
</methodsynopsis>
<methodsynopsis function="fsockopen">
  <type>resource</type>
  <methodname>fsockopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errno</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">errstr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc> Initiates a socket connection to the resource specified by target. PHP supports targets in the Internet and Unix domains as described in .  A list of supported transports can also be retrieved using stream_get_transports. </desc>
</methodsynopsis>
<methodsynopsis function="gethostbyaddr">
  <type>string</type>
  <methodname>gethostbyaddr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ip_address</parameter>
  </methodparam>
  <desc> Returns the host name of the Internet host specified by ip_address or a string containing the unmodified  ip_address on failure. </desc>
</methodsynopsis>
<methodsynopsis function="gethostbyname">
  <type>string</type>
  <methodname>gethostbyname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <desc> Returns the IP address of the Internet host specified by hostname or a string containing the unmodified  hostname on failure. </desc>
</methodsynopsis>
<methodsynopsis function="gethostbynamel">
  <type>array</type>
  <methodname>gethostbynamel</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <desc> Returns a list of IP addresses to which the Internet host specified by hostname resolves. Returns &amp;amp;false; if hostname could not be resolved. </desc>
</methodsynopsis>
<methodsynopsis function="getmxrr">
  <type>bool</type>
  <methodname>getmxrr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">mxhosts</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">weight</parameter>
  </methodparam>
  <desc> This function should not be used for the purposes of address verification.  Only the mailexchangers found in DNS are returned, however, according to RFC 2821 when no mail exchangers are listed, hostname itself should be used as the only mail exchanger with a priority of 0. </desc>
</methodsynopsis>
<methodsynopsis function="getprotobyname">
  <type>int</type>
  <methodname>getprotobyname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>getprotobyname returns the protocol number associated with the protocol name as per /etc/protocols. </desc>
</methodsynopsis>
<methodsynopsis function="getprotobynumber">
  <type>string</type>
  <methodname>getprotobynumber</methodname>
  <methodparam>
    <type>int</type>
    <parameter>number</parameter>
  </methodparam>
  <desc>getprotobynumber returns the protocol name associated with protocol number as per /etc/protocols. </desc>
</methodsynopsis>
<methodsynopsis function="getservbyname">
  <type>int</type>
  <methodname>getservbyname</methodname>
  <methodparam>
    <type>string</type>
    <parameter>service</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc>getservbyname returns the Internet port which corresponds to service for the specified protocol as per /etc/services. protocol is either "tcp" or "udp" (in lowercase). Returns &amp;amp;false; if service or protocol is not found. </desc>
</methodsynopsis>
<methodsynopsis function="getservbyport">
  <type>string</type>
  <methodname>getservbyport</methodname>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc>getservbyport returns the Internet service associated with port for the specified protocol as per /etc/services. protocol is either "tcp" or "udp" (in lowercase). </desc>
</methodsynopsis>
<methodsynopsis function="inet_ntop">
  <type>string</type>
  <methodname>inet_ntop</methodname>
  <methodparam>
    <type>string</type>
    <parameter>in_addr</parameter>
  </methodparam>
  <desc> See also long2ip, inet_pton, and ip2long. </desc>
</methodsynopsis>
<methodsynopsis function="inet_pton">
  <type>string</type>
  <methodname>inet_pton</methodname>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <desc> See also ip2long, inet_ntop, and long2ip. </desc>
</methodsynopsis>
<methodsynopsis function="ip2long">
  <type>int</type>
  <methodname>ip2long</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ip_address</parameter>
  </methodparam>
  <desc> The function ip2long generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.  If ip_address is invalid then -1 is returned.  Note that -1 does not evaluate as &amp;amp;false; in PHP. </desc>
</methodsynopsis>
<methodsynopsis function="long2ip">
  <type>string</type>
  <methodname>long2ip</methodname>
  <methodparam>
    <type>int</type>
    <parameter>proper_address</parameter>
  </methodparam>
  <desc> The function long2ip generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation. </desc>
</methodsynopsis>
<methodsynopsis function="openlog">
  <type>int</type>
  <methodname>openlog</methodname>
  <methodparam>
    <type>string</type>
    <parameter>ident</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>facility</parameter>
  </methodparam>
  <desc>openlog opens a connection to the system logger for a program.  The string ident is added to each message.  Values for option and facility are given below. The option argument is used to indicate what logging options will be used when generating a log message. The facility argument is used to specify what type of program is logging the message. This allows you to specify  (in your machine's syslog configuration) how messages coming from different facilities will be handled. The use of openlog is optional. It will automatically be called by syslog if necessary, in which case ident will default to &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="pfsockopen">
  <type>resource</type>
  <methodname>pfsockopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errno</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">errstr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <desc> This function behaves exactly as fsockopen with the difference that the connection is not closed after the script finishes.  It is the persistent version of fsockopen. </desc>
</methodsynopsis>
<methodsynopsis function="syslog">
  <type>int</type>
  <methodname>syslog</methodname>
  <methodparam>
    <type>int</type>
    <parameter>priority</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>message</parameter>
  </methodparam>
  <desc>syslog generates a log message that will be distributed by the system logger. priority is a combination of the facility and the level, values for which are given in the next section. The remaining argument is the message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno. </desc>
</methodsynopsis>
<methodsynopsis function="yp_all">
  <type>void</type>
  <methodname>yp_all</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>callback</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="yp_cat">
  <type>array</type>
  <methodname>yp_cat</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <desc>yp_cat returns all map entries as an array with the maps key values as array indices and the maps entries as array data. </desc>
</methodsynopsis>
<methodsynopsis function="yp_err_string">
  <type>string</type>
  <methodname>yp_err_string</methodname>
  <methodparam>
    <type>int</type>
    <parameter>errorcode</parameter>
  </methodparam>
  <desc>yp_err_string returns the error message associated with the given error code.  Useful to indicate what exactly went wrong. </desc>
</methodsynopsis>
<methodsynopsis function="yp_errno">
  <type>int</type>
  <methodname>yp_errno</methodname>
  <void/>
  <desc>yp_errno returns the error code of the previous operation. </desc>
</methodsynopsis>
<methodsynopsis function="yp_first">
  <type>array</type>
  <methodname>yp_first</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <desc>yp_first returns the first key-value pair from the named map in the named domain, otherwise &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="yp_get_default_domain">
  <type>int</type>
  <methodname>yp_get_default_domain</methodname>
  <void/>
  <desc>yp_get_default_domain returns the default domain of the node or &amp;amp;false;. Can be used as the domain parameter for successive NIS calls. </desc>
</methodsynopsis>
<methodsynopsis function="yp_master">
  <type>string</type>
  <methodname>yp_master</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <desc>yp_master returns the machine name of the master NIS server for a map. </desc>
</methodsynopsis>
<methodsynopsis function="yp_match">
  <type>string</type>
  <methodname>yp_match</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>yp_match returns the value associated with the passed key out of the specified map or &amp;amp;false;. This key must be exact.</desc>
</methodsynopsis>
<methodsynopsis function="yp_next">
  <type>array</type>
  <methodname>yp_next</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>yp_next returns the next key-value pair in the named map after the specified key or &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="yp_order">
  <type>int</type>
  <methodname>yp_order</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>map</parameter>
  </methodparam>
  <desc>yp_order returns the order number for a map or &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="notes_body">
  <type>array</type>
  <methodname>notes_body</methodname>
  <methodparam>
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_copy_db">
  <type>string</type>
  <methodname>notes_copy_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>from_database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>to_database_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_create_db">
  <type>bool</type>
  <methodname>notes_create_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_create_note">
  <type>string</type>
  <methodname>notes_create_note</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>form_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_drop_db">
  <type>bool</type>
  <methodname>notes_drop_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_find_note">
  <type>bool</type>
  <methodname>notes_find_note</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_header_info">
  <type>object</type>
  <methodname>notes_header_info</methodname>
  <methodparam>
    <type>string</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mailbox</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msg_number</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_list_msgs">
  <type>bool</type>
  <methodname>notes_list_msgs</methodname>
  <methodparam>
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_mark_read">
  <type>string</type>
  <methodname>notes_mark_read</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>note_id</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_mark_unread">
  <type>string</type>
  <methodname>notes_mark_unread</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>note_id</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_nav_create">
  <type>bool</type>
  <methodname>notes_nav_create</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_search">
  <type>string</type>
  <methodname>notes_search</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>keywords</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_unread">
  <type>string</type>
  <methodname>notes_unread</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="notes_version">
  <type>string</type>
  <methodname>notes_version</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="nsapi_request_headers">
  <type>array</type>
  <methodname>nsapi_request_headers</methodname>
  <void/>
  <desc>nsapi_request_headers gets all the HTTP headers in the current request. This is only supported when PHP runs as a  NSAPI module. </desc>
</methodsynopsis>
<methodsynopsis function="nsapi_response_headers">
  <type>array</type>
  <methodname>nsapi_response_headers</methodname>
  <void/>
  <desc> Gets all the NSAPI response headers. </desc>
</methodsynopsis>
<methodsynopsis function="nsapi_virtual">
  <type>bool</type>
  <methodname>nsapi_virtual</methodname>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <desc>nsapi_virtual is an NSAPI-specific function which is equivalent to &amp;lt;!--#include virtual...--&amp;gt; in SSI (.shtml files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you'd parse through webserver. </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_info">
  <type>array</type>
  <methodname>aggregate_info</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <desc> Will return the aggregation information for a particular object as an associative array of arrays of methods and properties. The key for the main array is the name of the aggregated class. </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_methods_by_list">
  <type>void</type>
  <methodname>aggregate_methods_by_list</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>methods_list</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>exclude</parameter>
  </methodparam>
  <desc> Aggregates methods from a class to an existing object using a list of method names. The optional parameter exclude is used to decide whether the list  contains the names of methods to include in the aggregation (i.e. exclude is &amp;amp;false;, which is the default value), or to exclude from the aggregation (exclude is &amp;amp;true;). </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_methods_by_regexp">
  <type>void</type>
  <methodname>aggregate_methods_by_regexp</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>regexp</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>exclude</parameter>
  </methodparam>
  <desc> Aggregates methods from a class to an existing object using a regular expression to match method names.  The optional parameter exclude is used to decide whether the regular expression will select the names of methods to include in the aggregation (i.e. exclude is &amp;amp;false;, which is the default value), or to exclude from the aggregation (exclude is &amp;amp;true;). </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_methods">
  <type>void</type>
  <methodname>aggregate_methods</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> Aggregates all methods defined in a class to an existing object, except for the class constructor, or methods whose names start with an underscore character (_) which are considered private to the aggregated class. </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_properties_by_list">
  <type>void</type>
  <methodname>aggregate_properties_by_list</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>properties_list</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>exclude</parameter>
  </methodparam>
  <desc> Aggregates properties from a class to an existing object using a list of property names. The optional parameter exclude is used to decide whether the list  contains the names of class properties to include in the aggregation (i.e. exclude is &amp;amp;false;, which is the default value), or to exclude from the aggregation (exclude is &amp;amp;true;). </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_properties_by_regexp">
  <type>void</type>
  <methodname>aggregate_properties_by_regexp</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>regexp</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>exclude</parameter>
  </methodparam>
  <desc> Aggregates properties from a class to an existing object using a regular expression to match their names.  The optional parameter exclude is used to decide whether the regular expression will select the names of class properties to include in the aggregation (i.e. exclude is &amp;amp;false;, which is the default value), or to exclude from the aggregation (exclude is &amp;amp;true;). </desc>
</methodsynopsis>
<methodsynopsis function="aggregate_properties">
  <type>void</type>
  <methodname>aggregate_properties</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> Aggregates all properties defined in a class to an existing object, except for properties whose names start with an underscore character (_) which are considered private to the aggregated class. </desc>
</methodsynopsis>
<methodsynopsis function="aggregate">
  <type>void</type>
  <methodname>aggregate</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> Aggregates methods and properties defined in a class to an existing object. Methods and properties with names starting with an underscore character (_) are considered private to the aggregated class and are not used, constructors are also excluded from the aggregation procedure. </desc>
</methodsynopsis>
<methodsynopsis function="deaggregate">
  <type>void</type>
  <methodname>deaggregate</methodname>
  <methodparam>
    <type>object</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> Removes the methods and properties from classes that were aggregated to an object. If the optional class_name parameters is passed, only those methods and properties defined in that class are removed, otherwise all aggregated methods and properties are eliminated. </desc>
</methodsynopsis>
<methodsynopsis function="oci_bind_by_name">
  <type>bool</type>
  <methodname>oci_bind_by_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ph_name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlength</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>oci_bind_by_name binds the PHP variable variable to the Oracle placeholder ph_name.  Whether it will be used for input or output will be determined at run-time and the necessary storage space will be allocated. The length  parameter sets the maximum length for the bind. If you set  length to -1 oci_bind_by_name will use the current length of variable to set the maximum length. </desc>
</methodsynopsis>
<methodsynopsis function="oci_cancel">
  <type>bool</type>
  <methodname>oci_cancel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>oci_cancel invalidates a cursor, freeing all associated resources and cancels the ability to read from it. </desc>
</methodsynopsis>
<methodsynopsis function="oci_close">
  <type>bool</type>
  <methodname>oci_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>oci_close closes the Oracle connection connection. </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;append">
  <type>bool</type>
  <methodname>OCI-Collection-&gt;append</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Appends an object to the end of the collection. Parameter  value can be a string or a number. </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;assign">
  <type>bool</type>
  <methodname>OCI-Collection-&gt;assign</methodname>
  <methodparam>
    <type>OCI-Collection</type>
    <parameter>from</parameter>
  </methodparam>
  <desc> Assigns a value to the collection from another, previously created collection. Both collections must be created with  oci_new_collection prior to using them. </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;assignElem">
  <type>bool</type>
  <methodname>OCI-Collection-&gt;assignElem</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Assigns a value to the element with index index. Parameter value can be a string or a number. </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;getElem">
  <type>mixed</type>
  <methodname>OCI-Collection-&gt;getElem</methodname>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Method OCI-Collection-&amp;gt;getElem returns value of the element with index index (1-based). </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;free">
  <type>bool</type>
  <methodname>OCI-Collection-&gt;free</methodname>
  <void/>
  <desc> Frees resources associated with collection object.  </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;max">
  <type>int</type>
  <methodname>OCI-Collection-&gt;max</methodname>
  <void/>
  <desc> Returns the maximum number of elements in the collection.  If the returned value is 0, then the number of elements is not limited. OCI-Collection-&amp;gt;max returns &amp;amp;false; in case of error. </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;size">
  <type>int</type>
  <methodname>OCI-Collection-&gt;size</methodname>
  <void/>
  <desc> Returns the number of elements in the collection.  </desc>
</methodsynopsis>
<methodsynopsis function="OCI-Collection-&gt;trim">
  <type>bool</type>
  <methodname>OCI-Collection-&gt;trim</methodname>
  <methodparam>
    <type>int</type>
    <parameter>num</parameter>
  </methodparam>
  <desc> Trims num of elements from the end of the collection. </desc>
</methodsynopsis>
<methodsynopsis function="oci_commit">
  <type>bool</type>
  <methodname>oci_commit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>oci_commit commits all outstanding statements for the active transaction on the Oracle connection  connection.  </desc>
</methodsynopsis>
<methodsynopsis function="oci_connect">
  <type>resource</type>
  <methodname>oci_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>oci_connect returns a connection identifier needed for most other OCI calls.  The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which  you want to connect. If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle  instance) or TWO_TASK (tnsnames.ora) to determine which database  to connect to. </desc>
</methodsynopsis>
<methodsynopsis function="oci_define_by_name">
  <type>bool</type>
  <methodname>oci_define_by_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>oci_define_by_name defines PHP variables for fetches of SQL-Columns. Be careful that Oracle uses ALL-UPPERCASE column names, whereby in your select you can also write lowercase. oci_define_by_name expects the column_name to be in uppercase. If you define a variable that doesn't exists in your select statement, no error will issued. </desc>
</methodsynopsis>
<methodsynopsis function="oci_error">
  <type>array</type>
  <methodname>oci_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> For most errors, the parameter is the most appropriate resource handle. For connection errors with oci_connect,  oci_new_connect or oci_pconnect, do not pass a parameter. If no error is found, oci_error  returns &amp;amp;false;. oci_error returns the error as an associative array. In this array, code consists the oracle error code and message the oracle error string. </desc>
</methodsynopsis>
<methodsynopsis function="oci_execute">
  <type>bool</type>
  <methodname>oci_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>oci_execute executes a previously parsed statement (see oci_parse). The optional mode allows you to specify the execution mode (default is OCI_COMMIT_ON_SUCCESS).  If you don't want statements to be committed automatically,  you should specify OCI_DEFAULT as your mode. </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch_all">
  <type>int</type>
  <methodname>oci_fetch_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">output</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>skip</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxrows</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>oci_fetch_all fetches all the rows from a  result into a user-defined array. oci_fetch_all returns the number of rows fetched or &amp;amp;false; in case of error. skip  is the number of initial rows to ignore when fetching the result  (default value of 0, to start at the first line).  maxrows is the number of rows to read, starting at the skipth row (default to -1, meaning all the rows). </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch_array">
  <type>array</type>
  <methodname>oci_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Returns an array, which corresponds to the next result row or &amp;amp;false; in case of error or there is no more rows in the result. </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch_assoc">
  <type>array</type>
  <methodname>oci_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_fetch_assoc returns the next row from the result data as an associative array (identical to oci_fetch_array call with OCI_ASSOC flag). </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch_object">
  <type>object</type>
  <methodname>oci_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_fetch_object returns the next row from the result data as an object, which attributes correspond to fields in statement. </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch_row">
  <type>array</type>
  <methodname>oci_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc> Calling oci_fetch_row is identical to oci_fetch_array with  OCI_NUM flag and returns the next row from the result data as a numeric array. </desc>
</methodsynopsis>
<methodsynopsis function="oci_fetch">
  <type>bool</type>
  <methodname>oci_fetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_fetch fetches the next row (for SELECT statements) into the internal result-buffer. </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_is_null">
  <type>bool</type>
  <methodname>oci_field_is_null</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>oci_field_is_null returns &amp;amp;true; if field  field from the statement is  &amp;amp;null;. Parameter field could be a field's index or a field's name (uppercased). </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_name">
  <type>string</type>
  <methodname>oci_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>oci_field_name returns the name of the field corresponding to the field number (1-based). </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_precision">
  <type>int</type>
  <methodname>oci_field_precision</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> Returns precision of the field with field index (1-based). </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_scale">
  <type>int</type>
  <methodname>oci_field_scale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> Returns scale of the column with field index (1-based) or &amp;amp;false; if there is no such field. </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_size">
  <type>int</type>
  <methodname>oci_field_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>oci_field_size returns the size of a field in bytes. Value of field parameter can be the field's index (1-based) or it's name. </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_type_raw">
  <type>int</type>
  <methodname>oci_field_type_raw</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>oci_field_type_raw returns Oracle's raw data type of the field. </desc>
</methodsynopsis>
<methodsynopsis function="oci_field_type">
  <type>mixed</type>
  <methodname>oci_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> oci_field_type example "; echo ""; echo "Name"; echo "Type"; echo "Length"; echo ""; $ncols = oci_num_fields($stmt); for ($i = 1; $i "; echo "$column_name"; echo "$column_type"; echo "$column_size"; echo ""; } echo "\n";  oci_free_statement($stmt);   oci_close($conn);   
?&amp;gt;   
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="descriptor-&gt;free">
  <type>bool</type>
  <methodname>descriptor-&gt;free</methodname>
  <void/>
  <desc>descriptor-&amp;gt;free frees resources associated with descriptor, previously allocated with oci_new_descriptor. </desc>
</methodsynopsis>
<methodsynopsis function="oci_free_statement">
  <type>bool</type>
  <methodname>oci_free_statement</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_free_statement frees resources associated with Oracle's cursor or statement, which was received from as a result of  oci_parse or obtained from Oracle.  </desc>
</methodsynopsis>
<methodsynopsis function="oci_internal_debug">
  <type>void</type>
  <methodname>oci_internal_debug</methodname>
  <methodparam>
    <type>int</type>
    <parameter>onoff</parameter>
  </methodparam>
  <desc>oci_internal_debug enables or disables internal debug output.  Set onoff to 0 to turn debug output off or 1 to turn it on. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;append">
  <type>bool</type>
  <methodname>lob-&gt;append</methodname>
  <methodparam>
    <type>OCI-Lob</type>
    <parameter>lob_from</parameter>
  </methodparam>
  <desc> Appends data from the large object to the end of another large object.  </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;close">
  <type>bool</type>
  <methodname>lob-&gt;close</methodname>
  <void/>
  <desc>lob-&amp;gt;close closes descriptor of LOB or FILE. This function should be used only with lob-&amp;gt;writeTemporary. </desc>
</methodsynopsis>
<methodsynopsis function="oci_lob_copy">
  <type>bool</type>
  <methodname>oci_lob_copy</methodname>
  <methodparam>
    <type>OCI-Lob</type>
    <parameter>lob_to</parameter>
  </methodparam>
  <methodparam>
    <type>OCI-Lob</type>
    <parameter>lob_from</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Copies large object or a part of large object to another large object.  Parameter length indicates the length of data to be copied. Old data of LOB-recipient will be overwritten. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;eof">
  <type>bool</type>
  <methodname>lob-&gt;eof</methodname>
  <void/>
  <desc> Returns &amp;amp;true; if internal pointer of large object is at the end of LOB. Otherwise returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;erase">
  <type>int</type>
  <methodname>lob-&gt;erase</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Erases a specified portion of the internal LOB data starting at a specified offset. Parameters length and offset are optional.  lob-&amp;gt;erase erases all LOB data by default. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;export">
  <type>bool</type>
  <methodname>lob-&gt;export</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Exports LOB's contents to a file, which name is given in parameter filename. Optional parameter  start indicates from what position to start export and parameter length - length of data to be exported. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;flush">
  <type>bool</type>
  <methodname>lob-&gt;flush</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>lob-&amp;gt;flush actually writes data to the server. By default, resources are not freed, but using flag  OCI_LOB_BUFFER_FREE you can do it explicitly. Be sure you know what you're doing - next read/write operation to the same part of LOB will involve a round-trip to the server and initialize new buffer resources. Tt is recommended to use  OCI_LOB_BUFFER_FREE flag only when you are not going to work with the LOB anymore. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;import">
  <type>bool</type>
  <methodname>lob-&gt;import</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Writes data from filename in to the current position of large object. </desc>
</methodsynopsis>
<methodsynopsis function="oci_lob_is_equal">
  <type>bool</type>
  <methodname>oci_lob_is_equal</methodname>
  <methodparam>
    <type>OCI-Lob</type>
    <parameter>lob1</parameter>
  </methodparam>
  <methodparam>
    <type>OCI-Lob</type>
    <parameter>lob2</parameter>
  </methodparam>
  <desc> Compares two LOB/FILE locators. Returns &amp;amp;true; if these objects are equal and &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;load">
  <type>string</type>
  <methodname>lob-&gt;load</methodname>
  <void/>
  <desc> Returns large object's contents. As script execution is terminated when the memory_limit is reached, ensure that the LOB does not exceed this limit. In most cases it's recommended to use oci_lob_read instead. In case of error lob-&amp;gt;load returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;read">
  <type>string</type>
  <methodname>lob-&gt;read</methodname>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Reads length bytes from the current position of LOB's internal pointer. Reading stops when length bytes have been read or end of large object is reached. Internal pointer of large object will be shifted on the amount of bytes read. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;rewind">
  <type>bool</type>
  <methodname>lob-&gt;rewind</methodname>
  <void/>
  <desc> Sets the internal pointer to the beginning of the large object. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;save">
  <type>bool</type>
  <methodname>lob-&gt;save</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Saves data to the large object. Parameter offset can be used to indicate offset from the beginning of the large object. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;seek">
  <type>bool</type>
  <methodname>lob-&gt;seek</methodname>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <desc> Sets the internal pointer of the large object. Parameter  offset indicates the amount of bytes, on which internal pointer should be moved from the position, pointed by whence:  OCI_SEEK_SET - sets the position equal to  offsetOCI_SEEK_CUR - adds offset  bytes to the current position   OCI_SEEK_END - adds offset bytes to the end of large object (use negative value to move to a position before the end of large object) </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;size">
  <type>int</type>
  <methodname>lob-&gt;size</methodname>
  <void/>
  <desc> Returns length of large object value or &amp;amp;false; in case of error. Empty objects have zero length. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;tell">
  <type>int</type>
  <methodname>lob-&gt;tell</methodname>
  <void/>
  <desc> Returns current position of a LOB's internal pointer or &amp;amp;false; if an error occurred. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;truncate">
  <type>bool</type>
  <methodname>lob-&gt;truncate</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> If parameter length is given, lob-&amp;gt;truncate truncates large object to  length bytes. Otherwise,   lob-&amp;gt;truncate will purge the LOB completely. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;writeTemporary">
  <type>bool</type>
  <methodname>lob-&gt;writeTemporary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>lob_type</parameter>
  </methodparam>
  <desc> Creates a temporary large object and writes data to it. </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;write">
  <type>int</type>
  <methodname>lob-&gt;write</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Writes data from the parameter data into the current position of LOB's internal pointer. If the parameter length is given, writing will stop after length bytes have been written or the end of data is reached, whichever comes first. </desc>
</methodsynopsis>
<methodsynopsis function="oci_new_collection">
  <type>OCI-Collection</type>
  <methodname>oci_new_collection</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>tdo</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <desc> Allocates new collection object. Parameter tdo should be a valid named type (uppercased). Third, optional parameter  schema should point to the scheme, where the named type was created. oci_new_collection uses name of the current user as default value of schema. </desc>
</methodsynopsis>
<methodsynopsis function="oci_new_connect">
  <type>resource</type>
  <methodname>oci_new_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>oci_new_connect creates a new connection to an Oracle server and logs on. The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in  tnsnames.ora. If the third parameter is not specified, PHP uses environment variables ORACLE_SID and  TWO_TASK to determine the name of local Oracle instance and location of tnsnames.ora accordingly. </desc>
</methodsynopsis>
<methodsynopsis function="oci_new_cursor">
  <type>resource</type>
  <methodname>oci_new_cursor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>oci_new_cursor allocates a new statement handle on the specified connection. </desc>
</methodsynopsis>
<methodsynopsis function="oci_new_descriptor">
  <type>OCI-Lob</type>
  <methodname>oci_new_descriptor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>oci_new_descriptor allocates resources to hold descriptor or LOB locator. Valid values for type are: OCI_D_FILE,  OCI_D_LOB and OCI_D_ROWID. </desc>
</methodsynopsis>
<methodsynopsis function="oci_num_fields">
  <type>int</type>
  <methodname>oci_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_num_fields returns the number of columns in the statement. </desc>
</methodsynopsis>
<methodsynopsis function="oci_num_rows">
  <type>int</type>
  <methodname>oci_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>oci_num_rows returns number of rows affected during statement execution. </desc>
</methodsynopsis>
<methodsynopsis function="oci_parse">
  <type>resource</type>
  <methodname>oci_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>oci_parse prepares the query using connection and returns the statement identifier, which can be used with oci_bind_by_name, oci_execute and other functions. </desc>
</methodsynopsis>
<methodsynopsis function="oci_password_change">
  <type>bool</type>
  <methodname>oci_password_change</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>old_password</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>new_password</parameter>
  </methodparam>
  <desc> Changes password for user with username. Parameters old_password and new_password should indicate old and new passwords respectively. </desc>
</methodsynopsis>
<methodsynopsis function="oci_pconnect">
  <type>resource</type>
  <methodname>oci_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>oci_pconnect creates a new persistent connection to  an Oracle server and logs on. The optional third parameter can either contain  the name of the local Oracle instance or the name of the entry in  tnsnames.ora. If the third parameter is not specified, PHP uses environment variables ORACLE_SID and  TWO_TASK to determine the name of local Oracle instance and location of tnsnames.ora accordingly. </desc>
</methodsynopsis>
<methodsynopsis function="oci_result">
  <type>mixed</type>
  <methodname>oci_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>oci_result returns the data from the field field in the current row, fetched by oci_fetch. oci_result returns everything as strings except for abstract types (ROWIDs, LOBs and FILEs). oci_result returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="oci_rollback">
  <type>bool</type>
  <methodname>oci_rollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>oci_rollback rolls back all outstanding statements for Oracle connection connection.  </desc>
</methodsynopsis>
<methodsynopsis function="oci_server_version">
  <type>string</type>
  <methodname>oci_server_version</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns a string with version information of the Oracle server, which uses connection connection or returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="oci_set_prefetch">
  <type>bool</type>
  <methodname>oci_set_prefetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>rows</parameter>
  </methodparam>
  <desc> Sets the number of rows to be prefetched after successful call to oci_execute. The default value for rows is 1. </desc>
</methodsynopsis>
<methodsynopsis function="oci_statement_type">
  <type>string</type>
  <methodname>oci_statement_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>oci_statement_type returns the query type of statement statement as one of the following values: SELECTUPDATEDELETEINSERTCREATEDROPALTERBEGINDECLAREUNKNOWN</desc>
</methodsynopsis>
<methodsynopsis function="ocibindbyname">
  <type>bool</type>
  <methodname>ocibindbyname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>ph_name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlength</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>ocibindbyname binds the PHP variable variable to the Oracle placeholder ph_name.  Whether it will be used for input or output will be determined run-time, and the necessary storage space will be allocated. The length parameter sets the maximum length for the bind. If you set length to -1 ocibindbyname will use the current length of variable to set the maximum length. </desc>
</methodsynopsis>
<methodsynopsis function="ocicancel">
  <type>bool</type>
  <methodname>ocicancel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc> If you do not want read more data from a cursor, then call ocicancel. </desc>
</methodsynopsis>
<methodsynopsis function="ocicloselob">
  <type>bool</type>
  <methodname>ocicloselob</methodname>
  <void/>
  <desc> This function was renamed to oci_lob_close  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicloselob can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollappend">
  <type>bool</type>
  <methodname>ocicollappend</methodname>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function was renamed to oci_collection_append  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollappend can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollassign">
  <type>bool</type>
  <methodname>ocicollassign</methodname>
  <methodparam>
    <type>OCI-Collection</type>
    <parameter>from</parameter>
  </methodparam>
  <desc> This function was renamed to oci_collection_assign  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollassign can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollassignelem">
  <type>bool</type>
  <methodname>ocicollassignelem</methodname>
  <methodparam>
    <type>int</type>
    <parameter>ndx</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>val</parameter>
  </methodparam>
  <desc> This function was renamed to oci_collection_element_assign  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollassignelem can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollgetelem">
  <type>string</type>
  <methodname>ocicollgetelem</methodname>
  <methodparam>
    <type>int</type>
    <parameter>ndx</parameter>
  </methodparam>
  <desc> This function was renamed to oci_collection_element_get  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollgetelem can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollmax">
  <type>int</type>
  <methodname>ocicollmax</methodname>
  <void/>
  <desc> This function was renamed to oci_collection_max  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollmax can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicollsize">
  <type>int</type>
  <methodname>ocicollsize</methodname>
  <void/>
  <desc> This function was renamed to oci_collection_size  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicollsize can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicolltrim">
  <type>bool</type>
  <methodname>ocicolltrim</methodname>
  <methodparam>
    <type>int</type>
    <parameter>num</parameter>
  </methodparam>
  <desc> This function was renamed to oci_collection_trim  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicolltrim can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumnisnull">
  <type>bool</type>
  <methodname>ocicolumnisnull</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>ocicolumnisnull returns &amp;amp;true; if the returned column column in the result from the statement stmt is &amp;amp;null;. You can either use the column-number (1-Based) or the column-name, in uppercase, for the col parameter. </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumnname">
  <type>string</type>
  <methodname>ocicolumnname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc> ocicolumnname example "; echo ""; echo "Name"; echo "Type"; echo "Length"; echo ""; $ncols = OCINumCols($stmt); for ($i = 1; $i "; echo "$column_name"; echo "$column_type"; echo "$column_size"; echo ""; } echo "\n";  OCIFreeStatement($stmt);   OCILogoff($conn);   
?&amp;gt;   
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumnprecision">
  <type>int</type>
  <methodname>ocicolumnprecision</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc> Returns precision of the field with col index (1-based). </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumnscale">
  <type>int</type>
  <methodname>ocicolumnscale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc> This function was renamed to oci_field_scale  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocicolumnscale can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumnsize">
  <type>int</type>
  <methodname>ocicolumnsize</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <desc>ocicolumnsize returns the size of the column as given by Oracle. You can either use the column-number (1-Based) or the column-name for the column parameter. </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumntype">
  <type>mixed</type>
  <methodname>ocicolumntype</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc> ocicolumntype example "; echo ""; echo "Name"; echo "Type"; echo "Length"; echo ""; $ncols = OCINumCols($stmt); for ($i = 1; $i "; echo "$column_name"; echo "$column_type"; echo "$column_size"; echo ""; } echo "\n";  OCIFreeStatement($stmt);   OCILogoff($conn);   
?&amp;gt;   
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="ocicolumntyperaw">
  <type>int</type>
  <methodname>ocicolumntyperaw</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>ocicolumntyperaw returns Oracle's raw data type of the field. </desc>
</methodsynopsis>
<methodsynopsis function="ocicommit">
  <type>bool</type>
  <methodname>ocicommit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ocicommit commits all outstanding statements for the active transaction on Oracle connection connection.  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ocidefinebyname">
  <type>bool</type>
  <methodname>ocidefinebyname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>ocidefinebyname binds PHP variables for fetches of SQL-Columns. Be careful that Oracle uses ALL-UPPERCASE column-names, whereby in your select you can also write lowercase. ocidefinebyname expects the column_name to be in uppercase. If you define a variable that doesn't exists in your select statement, no error will be given! </desc>
</methodsynopsis>
<methodsynopsis function="ocierror">
  <type>array</type>
  <methodname>ocierror</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>stmt_or_conn_or_global</parameter>
  </methodparam>
  <desc> This function was renamed to oci_error  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocierror can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ociexecute">
  <type>bool</type>
  <methodname>ociexecute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>ociexecute executes a previously parsed statement. (see ociparse). The optional mode allows you to specify the execution-mode (default is OCI_COMMIT_ON_SUCCESS). If you don't want statements to be committed automatically specify OCI_DEFAULT as your mode. </desc>
</methodsynopsis>
<methodsynopsis function="ocifetch">
  <type>bool</type>
  <methodname>ocifetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocifetch fetches the next row (for SELECT statements) into the internal result-buffer. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ocifetchinto">
  <type>int</type>
  <methodname>ocifetchinto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> This function is deprecated. Recommended alternatives:   oci_fetch_array, oci_fetch_object, oci_fetch_assoc and oci_fetch_row. </desc>
</methodsynopsis>
<methodsynopsis function="ocifetchstatement">
  <type>int</type>
  <methodname>ocifetchstatement</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">output</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>skip</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxrows</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> In PHP 5.0.0 this function became an alias for oci_fetch_all. This name still can be used, it was left as alias of oci_fetch_all for downwards compatability.  This, however, is deprecated and not recommended. </desc>
</methodsynopsis>
<methodsynopsis function="ocifreecollection">
  <type>bool</type>
  <methodname>ocifreecollection</methodname>
  <void/>
  <desc> This function was renamed to oci_free_collection  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocifreecollection can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocifreecursor">
  <type>bool</type>
  <methodname>ocifreecursor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocifreecursor frees all resources associated with the cursor stmt. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ocifreedesc">
  <type>bool</type>
  <methodname>ocifreedesc</methodname>
  <void/>
  <desc>ocifreedesc deletes a large object descriptor. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ocifreestatement">
  <type>bool</type>
  <methodname>ocifreestatement</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocifreestatement free all resources associated  with the statement stmt. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;getBuffering">
  <type>bool</type>
  <methodname>lob-&gt;getBuffering</methodname>
  <void/>
  <desc> Returns &amp;amp;false; if buffering for the large object is off and &amp;amp;true; if buffering is used. </desc>
</methodsynopsis>
<methodsynopsis function="ociinternaldebug">
  <type>void</type>
  <methodname>ociinternaldebug</methodname>
  <methodparam>
    <type>int</type>
    <parameter>onoff</parameter>
  </methodparam>
  <desc> This function was renamed to oci_internal_debug  after PHP &amp;gt;= 5.0.0. For downward compatibility  ociinternaldebug can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ociloadlob">
  <type>string</type>
  <methodname>ociloadlob</methodname>
  <void/>
  <desc> This function was renamed to oci_lob_load  after PHP &amp;gt;= 5.0.0. For downward compatibility  ociloadlob can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocilogoff">
  <type>bool</type>
  <methodname>ocilogoff</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ocilogoff closes the Oracle connection connection. </desc>
</methodsynopsis>
<methodsynopsis function="ocilogon">
  <type>resource</type>
  <methodname>ocilogon</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>ocilogon returns an connection identifier needed for most other OCI calls.  The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect. If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance) or TWO_TASK (tnsnames.ora) to determine which database to connect to. </desc>
</methodsynopsis>
<methodsynopsis function="ocinewcollection">
  <type>OCI-Collection</type>
  <methodname>ocinewcollection</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>tdo</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <desc> This function was renamed to oci_new_collection  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocinewcollection can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocinewcursor">
  <type>resource</type>
  <methodname>ocinewcursor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc>ocinewcursor allocates a new statement handle on the specified connection. </desc>
</methodsynopsis>
<methodsynopsis function="ocinewdescriptor">
  <type>OCI-Lob</type>
  <methodname>ocinewdescriptor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>ocinewdescriptor allocates storage to hold descriptors or LOB locators. Valid values for type are OCI_D_FILE,  OCI_D_LOB and OCI_D_ROWID. For LOB descriptors, the methods load, save, and savefile are  associated with the descriptor, for BFILE only the load method exists. See the second example usage hints. </desc>
</methodsynopsis>
<methodsynopsis function="ocinlogon">
  <type>resource</type>
  <methodname>ocinlogon</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>ocinlogon creates a new connection to an Oracle 8 database and logs on.  The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect.  If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance) or TWO_TASK (tnsnames.ora) to determine which database to connect to. </desc>
</methodsynopsis>
<methodsynopsis function="ocinumcols">
  <type>int</type>
  <methodname>ocinumcols</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocinumcols returns the number of columns in the  statement stmt. </desc>
</methodsynopsis>
<methodsynopsis function="ociparse">
  <type>resource</type>
  <methodname>ociparse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>ociparse parses the query using  conn.  It returns the statement identity if the query  is valid, &amp;amp;false; if not. The query can be any valid SQL  statement or PL/SQL block. </desc>
</methodsynopsis>
<methodsynopsis function="ociplogon">
  <type>resource</type>
  <methodname>ociplogon</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>ociplogon creates a persistent connection to an Oracle 8 database and logs on.  The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect. If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance)  or TWO_TASK (tnsnames.ora) to determine which database to connect to. </desc>
</methodsynopsis>
<methodsynopsis function="ociresult">
  <type>mixed</type>
  <methodname>ociresult</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>col</parameter>
  </methodparam>
  <desc>ociresult returns the data for column  column in the current row (see  ocifetch). ociresult will return everything as strings except for abstract types (ROWIDs, LOBs and FILEs). </desc>
</methodsynopsis>
<methodsynopsis function="ocirollback">
  <type>bool</type>
  <methodname>ocirollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ocirollback rolls back all outstanding statements for Oracle connection connection.  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ocirowcount">
  <type>int</type>
  <methodname>ocirowcount</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocirowcount returns the number of rows affected for e.g. update-statements. This function will not tell you the number of rows that a select will return! </desc>
</methodsynopsis>
<methodsynopsis function="ocisavelob">
  <type>bool</type>
  <methodname>ocisavelob</methodname>
  <void/>
  <desc> This function was renamed to oci_lob_save  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocisavelob can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ocisavelobfile">
  <type>bool</type>
  <methodname>ocisavelobfile</methodname>
  <void/>
  <desc> This function was renamed to oci_lob_import  after PHP &amp;gt;= 5.0.0. For downward compatibility  ocisavelobfile can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ociserverversion">
  <type>string</type>
  <methodname>ociserverversion</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc> ociserverversion example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="lob-&gt;setBuffering">
  <type>bool</type>
  <methodname>lob-&gt;setBuffering</methodname>
  <methodparam>
    <type>bool</type>
    <parameter>on_off</parameter>
  </methodparam>
  <desc>lob-&amp;gt;setBuffering sets the buffering for the large object, depending on the value of the on_off parameter. Repeated calls to lob-&amp;gt;setBuffering with the same flag will return &amp;amp;true;.  The values for on_off are:  &amp;amp;true; for on and &amp;amp;false; for off. </desc>
</methodsynopsis>
<methodsynopsis function="ocisetprefetch">
  <type>bool</type>
  <methodname>ocisetprefetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rows</parameter>
  </methodparam>
  <desc> Sets the number of top level rows to be prefetched to rows.  The default value for rows is 1 row. </desc>
</methodsynopsis>
<methodsynopsis function="ocistatementtype">
  <type>string</type>
  <methodname>ocistatementtype</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stmt</parameter>
  </methodparam>
  <desc>ocistatementtype returns one of the following values: SELECTUPDATEDELETEINSERTCREATEDROPALTERBEGINDECLAREUNKNOWN</desc>
</methodsynopsis>
<methodsynopsis function="ociwritelobtofile">
  <type>bool</type>
  <methodname>ociwritelobtofile</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> This function was renamed to oci_lob_export  after PHP &amp;gt;= 5.0.0. For downward compatibility  ociwritelobtofile can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="ociwritetemporarylob">
  <type>bool</type>
  <methodname>ociwritetemporarylob</methodname>
  <methodparam>
    <type>string</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>lob_type</parameter>
  </methodparam>
  <desc> This function was renamed to oci_lob_write_temporary  after PHP &amp;gt;= 5.0.0. For downward compatibility  ociwritetemporarylob can also be used.  This is deprecated, however. </desc>
</methodsynopsis>
<methodsynopsis function="openal_buffer_create">
  <type>resource</type>
  <methodname>openal_buffer_create</methodname>
  <void/>
  <desc> Returns an Open AL(Buffer) resource on success or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="openal_buffer_data">
  <type>bool</type>
  <methodname>openal_buffer_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>freq</parameter>
  </methodparam>
  <desc> An Open AL(Buffer) resource (previously created by openal_buffer_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_buffer_destroy">
  <type>bool</type>
  <methodname>openal_buffer_destroy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>buffer</parameter>
  </methodparam>
  <desc> An Open AL(Buffer) resource (previously created by openal_buffer_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_buffer_get">
  <type>int</type>
  <methodname>openal_buffer_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>property</parameter>
  </methodparam>
  <desc> An Open AL(Buffer) resource (previously created by openal_buffer_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_buffer_loadwav">
  <type>bool</type>
  <methodname>openal_buffer_loadwav</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>wavfile</parameter>
  </methodparam>
  <desc> An Open AL(Buffer) resource (previously created by openal_buffer_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_context_create">
  <type>resource</type>
  <methodname>openal_context_create</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>device</parameter>
  </methodparam>
  <desc> An Open AL(Device) resource (previously created by openal_device_open). </desc>
</methodsynopsis>
<methodsynopsis function="openal_context_current">
  <type>bool</type>
  <methodname>openal_context_current</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> An Open AL(Context) resource (previously created by openal_context_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_context_destroy">
  <type>bool</type>
  <methodname>openal_context_destroy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> An Open AL(Context) resource (previously created by openal_context_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_context_process">
  <type>bool</type>
  <methodname>openal_context_process</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> An Open AL(Context) resource (previously created by openal_context_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_context_suspend">
  <type>bool</type>
  <methodname>openal_context_suspend</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> An Open AL(Context) resource (previously created by openal_context_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_device_close">
  <type>bool</type>
  <methodname>openal_device_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>device</parameter>
  </methodparam>
  <desc> An Open AL(Device) resource (previously created by openal_device_open) to be closed. </desc>
</methodsynopsis>
<methodsynopsis function="openal_device_open">
  <type>resource</type>
  <methodname>openal_device_open</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>device_desc</parameter>
  </methodparam>
  <desc> Open an audio device optionally specified by device_desc. If device_desc is not specified the first available audio device will be used.   </desc>
</methodsynopsis>
<methodsynopsis function="openal_listener_get">
  <type>mixed</type>
  <methodname>openal_listener_get</methodname>
  <methodparam>
    <type>int</type>
    <parameter>property</parameter>
  </methodparam>
  <desc> Property to retrieve, one of: AL_GAIN (float), AL_POSITION (array(float,float,float)), AL_VELOCITY (array(float,float,float))&amp;amp;listendand; AL_ORIENTATION (array(float,float,float)). </desc>
</methodsynopsis>
<methodsynopsis function="openal_listener_set">
  <type>bool</type>
  <methodname>openal_listener_set</methodname>
  <methodparam>
    <type>int</type>
    <parameter>property</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>setting</parameter>
  </methodparam>
  <desc> Property to set, one of: AL_GAIN (float), AL_POSITION (array(float,float,float)), AL_VELOCITY (array(float,float,float))&amp;amp;listendand; AL_ORIENTATION (array(float,float,float)). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_create">
  <type>resource</type>
  <methodname>openal_source_create</methodname>
  <void/>
  <desc> Returns an Open AL(Source) resource on success or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_destroy">
  <type>resource</type>
  <methodname>openal_source_destroy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_get">
  <type>mixed</type>
  <methodname>openal_source_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>property</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_pause">
  <type>bool</type>
  <methodname>openal_source_pause</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_play">
  <type>bool</type>
  <methodname>openal_source_play</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_rewind">
  <type>bool</type>
  <methodname>openal_source_rewind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_set">
  <type>bool</type>
  <methodname>openal_source_set</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>property</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>setting</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_source_stop">
  <type>bool</type>
  <methodname>openal_source_stop</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openal_stream">
  <type>resource</type>
  <methodname>openal_stream</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rate</parameter>
  </methodparam>
  <desc> An Open AL(Source) resource (previously created by openal_source_create). </desc>
</methodsynopsis>
<methodsynopsis function="openssl_csr_export_to_file">
  <type>bool</type>
  <methodname>openssl_csr_export_to_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>csr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>notext</parameter>
  </methodparam>
  <desc>openssl_csr_export_to_file takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_csr_export">
  <type>bool</type>
  <methodname>openssl_csr_export</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>csr</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">out</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>notext</parameter>
  </methodparam>
  <desc>openssl_csr_export takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_csr_new">
  <type>bool</type>
  <methodname>openssl_csr_new</methodname>
  <methodparam>
    <type>array</type>
    <parameter>dn</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter role="reference">privkey</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>configargs</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>extraattribs</parameter>
  </methodparam>
  <desc>openssl_csr_new generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_csr_sign">
  <type>resource</type>
  <methodname>openssl_csr_sign</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>csr</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>cacert</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>priv_key</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>days</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>configargs</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>serial</parameter>
  </methodparam>
  <desc>openssl_csr_sign generates an x509 certificate resource from the csr previously generated by openssl_csr_new, but it can also be the path to a PEM encoded CSR when specified as file://path/to/csr or an exported string generated by openssl_csr_export. The generated certificate will be signed by cacert.  If cacert is &amp;amp;null;, the generated certificate will be a self-signed certificate. priv_key is the private key that corresponds to cacert. days specifies the length of time for which the generated certificate will be valid, in days. You can finetune the CSR signing by configargs. See openssl_csr_new for more information about configargs. Since PHP 4.3.3 you can specify the serial number of issued certificate by serial. In earlier versions, it was always 0. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_error_string">
  <type>mixed</type>
  <methodname>openssl_error_string</methodname>
  <void/>
  <desc> Returns an error message string, or &amp;amp;false; if there are no more error messages to return. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_free_key">
  <type>void</type>
  <methodname>openssl_free_key</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>key_identifier</parameter>
  </methodparam>
  <desc>openssl_free_key frees the key associated with the specified key_identifier from memory. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_get_privatekey">
  <type>resource</type>
  <methodname>openssl_get_privatekey</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
  <desc> This is an alias for openssl_pkey_get_private. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_get_publickey">
  <type>resource</type>
  <methodname>openssl_get_publickey</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>certificate</parameter>
  </methodparam>
  <desc> This is an alias for openssl_pkey_get_public. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_open">
  <type>bool</type>
  <methodname>openssl_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>sealed_data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">open_data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>env_key</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>priv_key_id</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; If successful the opened data is returned in open_data. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkcs7_decrypt">
  <type>bool</type>
  <methodname>openssl_pkcs7_decrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>infilename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>recipcert</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>recipkey</parameter>
  </methodparam>
  <desc> Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkcs7_encrypt">
  <type>bool</type>
  <methodname>openssl_pkcs7_encrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>infile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfile</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>recipcerts</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cipherid</parameter>
  </methodparam>
  <desc>openssl_pkcs7_encrypt takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts, which is either a lone X.509 certificate, or an array of X.509 certificates. headers is an array of headers that will be prepended to the data after it has been encrypted. flags can be used to specify options that affect the encoding process - see PKCS7 constants. headers can be either an associative array keyed by header name, or an indexed array, where each element contains a single header line. Cipher can be selected with cipherid since PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkcs7_sign">
  <type>bool</type>
  <methodname>openssl_pkcs7_sign</methodname>
  <methodparam>
    <type>string</type>
    <parameter>infilename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>signcert</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>privkey</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extracerts</parameter>
  </methodparam>
  <desc>openssl_pkcs7_sign takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkcs7_verify">
  <type>bool</type>
  <methodname>openssl_pkcs7_verify</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>cainfo</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>extracerts</parameter>
  </methodparam>
  <desc>openssl_pkcs7_verify reads the S/MIME message contained in the filename specified by filename and examines the digital signature.  It returns &amp;amp;true; if the signature is verified, &amp;amp;false; if it is not correct (the message has been tampered with, or the signing certificate is invalid), or -1 on error. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkey_export_to_file">
  <type>bool</type>
  <methodname>openssl_pkey_export_to_file</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>configargs</parameter>
  </methodparam>
  <desc>openssl_pkey_export_to_file saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.  The key can be optionally protected by a passphrase. configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file.  See openssl_csr_new for more information about configargs. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkey_export">
  <type>bool</type>
  <methodname>openssl_pkey_export</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">out</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>configargs</parameter>
  </methodparam>
  <desc>openssl_pkey_export exports key as a PEM encoded string and stores it into out (which is passed by reference). The key is optionally protected by passphrase. configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file.  See openssl_csr_new for more information about configargs. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkey_get_private">
  <type>resource</type>
  <methodname>openssl_pkey_get_private</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
  <desc> Returns a positive key resource identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkey_get_public">
  <type>resource</type>
  <methodname>openssl_pkey_get_public</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>certificate</parameter>
  </methodparam>
  <desc> Returns a positive key resource identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_pkey_new">
  <type>resource</type>
  <methodname>openssl_pkey_new</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>configargs</parameter>
  </methodparam>
  <desc>openssl_pkey_new generates a new private and public key pair.  The public component of the key can be obtained using openssl_pkey_get_public. You can finetune the key generation (such as specifying the number of bits) using configargs.  See openssl_csr_new for more information about configargs. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_private_decrypt">
  <type>bool</type>
  <methodname>openssl_private_decrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">decrypted</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>padding</parameter>
  </methodparam>
  <desc>openssl_private_decrypt decrypts data that was previous encrypted via openssl_public_encrypt and stores the result into decrypted.  key must be the private key corresponding that was used to encrypt the data.  padding defaults to OPENSSL_PKCS1_PADDING, but can also be one of OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_private_encrypt">
  <type>bool</type>
  <methodname>openssl_private_encrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">crypted</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>padding</parameter>
  </methodparam>
  <desc>openssl_private_encrypt encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt. padding defaults to OPENSSL_PKCS1_PADDING, but can also be OPENSSL_NO_PADDING. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_public_decrypt">
  <type>bool</type>
  <methodname>openssl_public_decrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">decrypted</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>padding</parameter>
  </methodparam>
  <desc>openssl_public_decrypt decrypts data that was previous encrypted via openssl_private_encrypt and stores the result into decrypted.  key must be the public key corresponding that was used to encrypt the data.  padding defaults to  OPENSSL_PKCS1_PADDING, but can also be OPENSSL_NO_PADDING. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_public_encrypt">
  <type>bool</type>
  <methodname>openssl_public_encrypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">crypted</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>padding</parameter>
  </methodparam>
  <desc>openssl_public_encrypt encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt. padding defaults to OPENSSL_PKCS1_PADDING, but can also be one of OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_seal">
  <type>int</type>
  <methodname>openssl_seal</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">sealed_data</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">env_keys</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>pub_key_ids</parameter>
  </methodparam>
  <desc> Returns the length of the sealed data on success, or &amp;amp;false; on error. If successful the sealed data is returned in sealed_data, and the envelope keys in env_keys. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_sign">
  <type>bool</type>
  <methodname>openssl_sign</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">signature</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>priv_key_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>signature_alg</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; If successful the signature is returned in signature.  </desc>
</methodsynopsis>
<methodsynopsis function="openssl_verify">
  <type>int</type>
  <methodname>openssl_verify</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>signature</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>pub_key_id</parameter>
  </methodparam>
  <desc> Returns 1 if the signature is correct, 0 if it is incorrect, and -1 on error. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_check_private_key">
  <type>bool</type>
  <methodname>openssl_x509_check_private_key</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>cert</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>key</parameter>
  </methodparam>
  <desc>openssl_x509_check_private_key returns &amp;amp;true; if key is the private key that corresponds to cert, or &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_checkpurpose">
  <type>bool</type>
  <methodname>openssl_x509_checkpurpose</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>x509cert</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>purpose</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>cainfo</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>untrustedfile</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the certificate can be used for the intended purpose, &amp;amp;false; if it cannot, or -1 on error. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_export_to_file">
  <type>bool</type>
  <methodname>openssl_x509_export_to_file</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>x509</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>outfilename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>notext</parameter>
  </methodparam>
  <desc>openssl_x509_export_to_file stores x509 into a file named by outfilename in a PEM encoded format. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_export">
  <type>bool</type>
  <methodname>openssl_x509_export</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>x509</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">output</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>notext</parameter>
  </methodparam>
  <desc>openssl_x509_export stores x509 into a string named by output in a PEM encoded format. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_free">
  <type>void</type>
  <methodname>openssl_x509_free</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>x509cert</parameter>
  </methodparam>
  <desc>openssl_x509_free frees the certificate associated with the specified x509cert resource from memory. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_parse">
  <type>array</type>
  <methodname>openssl_x509_parse</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>x509cert</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>shortnames</parameter>
  </methodparam>
  <desc>openssl_x509_parse returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc. shortnames controls how the data is indexed in the array - if shortnames is &amp;amp;true; (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName. </desc>
</methodsynopsis>
<methodsynopsis function="openssl_x509_read">
  <type>resource</type>
  <methodname>openssl_x509_read</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>x509certdata</parameter>
  </methodparam>
  <desc>openssl_x509_read parses the certificate supplied by x509certdata and returns a resource identifier for it. </desc>
</methodsynopsis>
<methodsynopsis function="ora_bind">
  <type>bool</type>
  <methodname>ora_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>PHP_variable_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>SQL_parameter_name</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> This function binds the named PHP variable with a SQL parameter. The SQL parameter must be in the form ":name". With the optional type parameter, you can define whether the SQL parameter is an in/out (0, default), in (1) or out (2) parameter. As of PHP 3.0.1, you can use the constants ORA_BIND_INOUT, ORA_BIND_IN and ORA_BIND_OUT instead of the numbers. </desc>
</methodsynopsis>
<methodsynopsis function="ora_close">
  <type>bool</type>
  <methodname>ora_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <desc> This function closes a data cursor opened with ora_open. </desc>
</methodsynopsis>
<methodsynopsis function="ora_columnname">
  <type>string</type>
  <methodname>ora_columnname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the name of the field/column column on the cursor cursor. The returned name is in all uppercase letters. Column 0 is the first column. </desc>
</methodsynopsis>
<methodsynopsis function="ora_columnsize">
  <type>int</type>
  <methodname>ora_columnsize</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the size of the Oracle column column on the cursor cursor. Column 0 is the first column. </desc>
</methodsynopsis>
<methodsynopsis function="ora_columntype">
  <type>string</type>
  <methodname>ora_columntype</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the Oracle data type name of the field/column column on the cursor cursor. Column 0 is the first column. The returned type will be one of the following: "VARCHAR2""VARCHAR""CHAR""NUMBER""LONG""LONG RAW""ROWID""DATE""CURSOR"</desc>
</methodsynopsis>
<methodsynopsis function="ora_commit">
  <type>bool</type>
  <methodname>ora_commit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc> This function commits an Oracle transaction. A transaction is defined as all the changes on a given connection since the last commit/rollback, autocommit was turned off or when the connection was established. </desc>
</methodsynopsis>
<methodsynopsis function="ora_commitoff">
  <type>bool</type>
  <methodname>ora_commitoff</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc> This function turns off automatic commit after each ora_exec on the given connection. </desc>
</methodsynopsis>
<methodsynopsis function="ora_commiton">
  <type>bool</type>
  <methodname>ora_commiton</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <desc> This function turns on automatic commit after each ora_exec on the given connection. </desc>
</methodsynopsis>
<methodsynopsis function="ora_do">
  <type>resource</type>
  <methodname>ora_do</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>ora_do is quick combination of ora_parse, ora_exec and ora_fetch. It will parse and execute a statement, then fetch the first result row. </desc>
</methodsynopsis>
<methodsynopsis function="ora_error">
  <type>string</type>
  <methodname>ora_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>cursor_or_connection</parameter>
  </methodparam>
  <desc> Returns an error message of the form XXX-NNNNN where XXX is where the error comes from and NNNNN identifies the error message. </desc>
</methodsynopsis>
<methodsynopsis function="ora_errorcode">
  <type>int</type>
  <methodname>ora_errorcode</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>cursor_or_connection</parameter>
  </methodparam>
  <desc> Returns the numeric error code of the last executed statement on the specified cursor or connection. Support for connection ids was added in 3.0.4.</desc>
</methodsynopsis>
<methodsynopsis function="ora_exec">
  <type>bool</type>
  <methodname>ora_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <desc>ora_exec execute the parsed statement  cursor, already parsed by ora_parse. </desc>
</methodsynopsis>
<methodsynopsis function="ora_fetch_into">
  <type>int</type>
  <methodname>ora_fetch_into</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> Fetches a row of data into an array. The flags has two flag values: if the ORA_FETCHINTO_NULLS flag is set, columns with NULL values are set in the array; and if the ORA_FETCHINTO_ASSOC flag is set, an associative array is created. </desc>
</methodsynopsis>
<methodsynopsis function="ora_fetch">
  <type>bool</type>
  <methodname>ora_fetch</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <desc> Retrieves a row of data from the specified cursor. </desc>
</methodsynopsis>
<methodsynopsis function="ora_getcolumn">
  <type>mixed</type>
  <methodname>ora_getcolumn</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Fetches the data for a column or function result. </desc>
</methodsynopsis>
<methodsynopsis function="ora_logoff">
  <type>bool</type>
  <methodname>ora_logoff</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Logs out the user and disconnects from the server. </desc>
</methodsynopsis>
<methodsynopsis function="ora_logon">
  <type>resource</type>
  <methodname>ora_logon</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Establishes a connection between PHP and an Oracle database with the given username user and password password. </desc>
</methodsynopsis>
<methodsynopsis function="ora_numcols">
  <type>int</type>
  <methodname>ora_numcols</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <desc>ora_numcols returns the number of columns in a result. Only returns meaningful values after an parse/exec/fetch sequence. </desc>
</methodsynopsis>
<methodsynopsis function="ora_numrows">
  <type>int</type>
  <methodname>ora_numrows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <desc>ora_numrows returns the number of rows in a result. </desc>
</methodsynopsis>
<methodsynopsis function="ora_open">
  <type>resource</type>
  <methodname>ora_open</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Opens an Oracle cursor associated with connection. </desc>
</methodsynopsis>
<methodsynopsis function="ora_parse">
  <type>bool</type>
  <methodname>ora_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>cursor</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>sql_statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>defer</parameter>
  </methodparam>
  <desc> This function parses an SQL statement or a PL/SQL block and associates it with the given cursor. </desc>
</methodsynopsis>
<methodsynopsis function="ora_plogon">
  <type>resource</type>
  <methodname>ora_plogon</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Establishes a persistent connection between PHP and an Oracle database with the username user and password password.  </desc>
</methodsynopsis>
<methodsynopsis function="ora_rollback">
  <type>bool</type>
  <methodname>ora_rollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> This function undoes an Oracle transaction. (See ora_commit for the definition of a transaction.) </desc>
</methodsynopsis>
<methodsynopsis function="flush">
  <type>void</type>
  <methodname>flush</methodname>
  <void/>
  <desc>flush has no effect on the buffering scheme of your webserver or the browser on the client side.  Thus you need to call both ob_flush and flush to flush the output buffers. </desc>
</methodsynopsis>
<methodsynopsis function="ob_clean">
  <type>void</type>
  <methodname>ob_clean</methodname>
  <void/>
  <desc> This function discards the contents of the output buffer. </desc>
</methodsynopsis>
<methodsynopsis function="ob_end_clean">
  <type>bool</type>
  <methodname>ob_end_clean</methodname>
  <void/>
  <desc> This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents before ob_end_clean as the buffer contents are discarded when ob_end_flush is called. The function returns &amp;amp;true; when it successfully  discarded one buffer and &amp;amp;false; otherwise. Reasons for failure are first that you called the function without an active buffer or that for some reason a buffer could not be deleted (possible for special buffer). </desc>
</methodsynopsis>
<methodsynopsis function="ob_end_flush">
  <type>bool</type>
  <methodname>ob_end_flush</methodname>
  <void/>
  <desc> This function will send the contents of the topmost output buffer (if any) and turn this output buffer off.  If you want to further process the buffer's contents you have to call ob_get_contents before ob_end_flush as the buffer contents are discarded after ob_end_flush is called. The function returns &amp;amp;true; when it successfully  discarded one buffer and &amp;amp;false; otherwise. Reasons for failure are first that you called the function without an active buffer or that for some reason a buffer could not be deleted (possible for special buffer). </desc>
</methodsynopsis>
<methodsynopsis function="ob_flush">
  <type>void</type>
  <methodname>ob_flush</methodname>
  <void/>
  <desc> This function will send the contents of the output buffer (if any).  If you want to further process the buffer's contents you have to call ob_get_contents before ob_flush as the buffer contents are discarded after ob_flush is called. </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_clean">
  <type>string</type>
  <methodname>ob_get_clean</methodname>
  <void/>
  <desc> This will return the contents of the output buffer and end output buffering.  If output buffering isn't active then &amp;amp;false; is returned. ob_get_clean essentially executes both ob_get_contents and ob_end_clean.  </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_contents">
  <type>string</type>
  <methodname>ob_get_contents</methodname>
  <void/>
  <desc> This will return the contents of the output buffer or &amp;amp;false;, if output buffering isn't active. </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_flush">
  <type>string</type>
  <methodname>ob_get_flush</methodname>
  <void/>
  <desc>ob_get_flush flushs the output buffer, return it as a string and turns off output buffering. ob_get_flush returns &amp;amp;false; if no buffering is active. </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_length">
  <type>int</type>
  <methodname>ob_get_length</methodname>
  <void/>
  <desc> This will return the length of the contents in the output buffer or &amp;amp;false;, if output buffering isn't active. </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_level">
  <type>int</type>
  <methodname>ob_get_level</methodname>
  <void/>
  <desc> This will return the level of nested output buffering handlers or zero if output buffering is not activated. </desc>
</methodsynopsis>
<methodsynopsis function="ob_get_status">
  <type>array</type>
  <methodname>ob_get_status</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>
      full_status</parameter>
  </methodparam>
  <desc> This will return the current status of output buffers. It returns array contains buffer status or &amp;amp;false; for error. </desc>
</methodsynopsis>
<methodsynopsis function="ob_gzhandler">
  <type>string</type>
  <methodname>ob_gzhandler</methodname>
  <methodparam>
    <type>string</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>ob_gzhandler requires the zlib  extension. </desc>
</methodsynopsis>
<methodsynopsis function="ob_implicit_flush">
  <type>void</type>
  <methodname>ob_implicit_flush</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc>ob_implicit_flush will turn implicit flushing on or off (if no flag is given, it defaults to on).  Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush will no longer be needed. </desc>
</methodsynopsis>
<methodsynopsis function="ob_list_handlers">
  <type>array</type>
  <methodname>ob_list_handlers</methodname>
  <void/>
  <desc> This will return an array with the output handlers in use (if any). If output_buffering is enabled, ob_list_handlers will return "default output handler".  </desc>
</methodsynopsis>
<methodsynopsis function="ob_start">
  <type>bool</type>
  <methodname>ob_start</methodname>
  <methodparam choice="opt">
    <type>callback</type>
    <parameter>output_callback</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>chunk_size</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>erase</parameter>
  </methodparam>
  <desc> This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer. </desc>
</methodsynopsis>
<methodsynopsis function="output_add_rewrite_var">
  <type>bool</type>
  <methodname>output_add_rewrite_var</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function rewrite the URLs and forms with the given variable. </desc>
</methodsynopsis>
<methodsynopsis function="output_reset_rewrite_vars">
  <type>bool</type>
  <methodname>output_reset_rewrite_vars</methodname>
  <void/>
  <desc>This function resets the URL rewriter and undo the changes made by output_add_rewrite_var and/or by  session_start that are still in the buffer. </desc>
</methodsynopsis>
<methodsynopsis function="overload">
  <type>void</type>
  <methodname>overload</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> The overload function will enable property and method call overloading for a class identified by class_name. See an example in the introductory section of this part. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_close">
  <type>void</type>
  <methodname>ovrimos_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>ovrimos_close is used to close the specified connection to Ovrimos. This has the effect of rolling back uncommitted transactions. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_commit">
  <type>bool</type>
  <methodname>ovrimos_commit</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc>ovrimos_commit is used to commit the transaction. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_connect">
  <type>int</type>
  <methodname>ovrimos_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc>ovrimos_connect is used to connect to the specified database. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_cursor">
  <type>string</type>
  <methodname>ovrimos_cursor</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>ovrimos_cursor returns the name of the cursor. Useful when wishing to perform positioned updates or deletes. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_exec">
  <type>int</type>
  <methodname>ovrimos_exec</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>ovrimos_exec executes an SQL statement (query or update) and returns a result_id or &amp;amp;false;.  Evidently, the SQL statement should not contain parameters. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_execute">
  <type>bool</type>
  <methodname>ovrimos_execute</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>parameters_array</parameter>
  </methodparam>
  <desc>ovrimos_execute executes a prepared statement. &amp;amp;return.success; If the prepared statement contained parameters (question marks in the statement), the correct number of parameters should be passed in an array. Notice that I don't follow the PHP convention of placing just the name of the optional parameter inside square brackets. I couldn't bring myself on liking it. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_fetch_into">
  <type>bool</type>
  <methodname>ovrimos_fetch_into</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>how</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>rownumber</parameter>
  </methodparam>
  <desc>ovrimos_fetch_into fetches a row from the result set into result_array, which should be passed by reference. Which row is fetched is determined by the two last parameters. how is one of  Next (default), Prev,  First, Last,  Absolute, corresponding to forward direction from current position, backward direction from current position, forward direction from the start, backward direction from the end and absolute position from the start (essentially equivalent to 'first' but needs 'rownumber'). Case is not significant. rownumber is optional except for absolute positioning. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_fetch_row">
  <type>bool</type>
  <methodname>ovrimos_fetch_row</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>how</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc>ovrimos_fetch_row fetches a row from the result set. Column values should be retrieved with other calls. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_field_len">
  <type>int</type>
  <methodname>ovrimos_field_len</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>ovrimos_field_len is used to get the length of the output column with number field_number (1-based), in result result_id. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_field_name">
  <type>string</type>
  <methodname>ovrimos_field_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>ovrimos_field_name returns the output column name at the (1-based) index specified. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_field_num">
  <type>int</type>
  <methodname>ovrimos_field_num</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field_name</parameter>
  </methodparam>
  <desc>ovrimos_field_num returns the (1-based) index of the output column specified by field_name, or &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_field_type">
  <type>int</type>
  <methodname>ovrimos_field_type</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>ovrimos_field_type returns the (numeric) type of the output column at the (1-based) index specified by field_number. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_free_result">
  <type>bool</type>
  <methodname>ovrimos_free_result</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>ovrimos_free_result frees the specified result_id. Returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_longreadlen">
  <type>bool</type>
  <methodname>ovrimos_longreadlen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>ovrimos_longreadlen specifies how many bytes are to be retrieved from long datatypes (long varchar and long varbinary). Default is zero. It currently sets this parameter  the specified result set. Returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_num_fields">
  <type>int</type>
  <methodname>ovrimos_num_fields</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>ovrimos_num_fields returns the number of columns in a result_id resulting from a query. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_num_rows">
  <type>int</type>
  <methodname>ovrimos_num_rows</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>ovrimos_num_rows returns the number of rows affected by update operations. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_prepare">
  <type>int</type>
  <methodname>ovrimos_prepare</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>ovrimos_prepare prepares an SQL statement and returns a result_id (or &amp;amp;false; on failure). </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_result_all">
  <type>int</type>
  <methodname>ovrimos_result_all</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <desc>ovrimos_result_all prints the whole result set as an HTML table. Returns the number of rows in the generated table. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_result">
  <type>string</type>
  <methodname>ovrimos_result</methodname>
  <methodparam>
    <type>int</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>ovrimos_result retrieves the output column specified by field, either as a string or as an 1-based index. Returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="ovrimos_rollback">
  <type>bool</type>
  <methodname>ovrimos_rollback</methodname>
  <methodparam>
    <type>int</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc>ovrimos_rollback is used to roll back the transaction. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="parsekit_compile_file">
  <type>array</type>
  <methodname>parsekit_compile_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">errors</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> filename A string containing the name of the file to compile.  Similar to the argument to include. errors A 2D hash of errors (including fatal errors) encountered during compilation. Returned by reference. options One of either PARSEKIT_QUIET or  PARSEKIT_SIMPLE. To produce varying degrees of verbosity in the returned output. </desc>
</methodsynopsis>
<methodsynopsis function="parsekit_compile_string">
  <type>array</type>
  <methodname>parsekit_compile_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>phpcode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">errors</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> phpcode A string containing phpcode. Similar to the argument to eval. errors A 2D hash of errors (including fatal errors) encountered during compilation. Returned by reference. options One of either PARSEKIT_QUIET or  PARSEKIT_SIMPLE. To produce varying degrees of verbosity in the returned output. </desc>
</methodsynopsis>
<methodsynopsis function="parsekit_func_arginfo">
  <type>array</type>
  <methodname>parsekit_func_arginfo</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>function</parameter>
  </methodparam>
  <desc> function A string describing a function, or an array describing a class/method. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_alarm">
  <type>int</type>
  <methodname>pcntl_alarm</methodname>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <desc> The pcntl_alarm function creates a timer that will send a SIGALRM signal to the process after seconds seconds.  If seconds is zero, no new alarm is created.  Any call to pcntl_alarm will cancel any previously set alarm. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_exec">
  <type>bool</type>
  <methodname>pcntl_exec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>envs</parameter>
  </methodparam>
  <desc>pcntl_exec  executes the program path with arguments args. path must be the path to a binary executable or a script with a valid path pointing to an executable in the shebang ( #!/usr/local/bin/perl for example) as the first line.  See your system's man execve(2) page for additional information. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_fork">
  <type>int</type>
  <methodname>pcntl_fork</methodname>
  <void/>
  <desc> The pcntl_fork function creates a child process that differs from the parent process only in its PID and PPID. Please see your system's fork(2) man page for specific details as to how fork works on your system. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_getpriority">
  <type>int</type>
  <methodname>pcntl_getpriority</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>process_identifier</parameter>
  </methodparam>
  <desc>pcntl_getpriority gets the priority of  pid.  If pid is not specified, the pid of the current process is used.  Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_setpriority">
  <type>bool</type>
  <methodname>pcntl_setpriority</methodname>
  <methodparam>
    <type>int</type>
    <parameter>priority</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>process_identifier</parameter>
  </methodparam>
  <desc>pcntl_setpriority sets the priority of pid to priority.  If pid is not specified, the pid of the current process is used. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_signal">
  <type>bool</type>
  <methodname>pcntl_signal</methodname>
  <methodparam>
    <type>int</type>
    <parameter>signo</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>restart_syscalls</parameter>
  </methodparam>
  <desc> The pcntl_signal function installs a new signal handler for the signal indicated by signo.  The signal handler is set to handler which may be the name of a user created function, or either of the two global constants SIG_IGN or SIG_DFL.  The optional restart_syscalls  specifies whether system call restarting should be used when this  signal arrives and defaults to &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wait">
  <type>int</type>
  <methodname>pcntl_wait</methodname>
  <methodparam>
    <type>int</type>
    <parameter role="reference">status</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function.  If a child has already exited by the time of the call (a so-called "zombie" process), the function returns immediately.  Any system resources used by the child are freed.  Please see your system's wait(2) man page for specific details as to how wait works on your system. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_waitpid">
  <type>int</type>
  <methodname>pcntl_waitpid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">status</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> The pcntl_waitpid function suspends execution of the current process until a child as specified by the pid argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function.  If a child as requested by pid has already exited by the time of the call (a so-called "zombie" process), the function returns immediately.  Any system resources used by the child are freed. Please see your system's waitpid(2) man page for specific details as to how waitpid works on your system. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wexitstatus">
  <type>int</type>
  <methodname>pcntl_wexitstatus</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns the return code of a terminated child.  This function is only useful if pcntl_wifexited returned &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wifexited">
  <type>int</type>
  <methodname>pcntl_wifexited</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the child status code represents a successful exit. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wifsignaled">
  <type>int</type>
  <methodname>pcntl_wifsignaled</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the child process exited because of a signal which was not caught. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wifstopped">
  <type>int</type>
  <methodname>pcntl_wifstopped</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if the child process which caused the return is currently stopped; this is only possible if the call to pcntl_waitpid was done using the option WUNTRACED. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wstopsig">
  <type>int</type>
  <methodname>pcntl_wstopsig</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns the number of the signal which caused the child to stop. This function is only useful if pcntl_wifstopped returned &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="pcntl_wtermsig">
  <type>int</type>
  <methodname>pcntl_wtermsig</methodname>
  <methodparam>
    <type>int</type>
    <parameter>status</parameter>
  </methodparam>
  <desc> Returns the number of the signal that caused the child process to terminate. This function is only useful if pcntl_wifsignaled returned &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="preg_grep">
  <type>array</type>
  <methodname>preg_grep</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>preg_grep returns the array consisting of the elements of the input array that match the given pattern. </desc>
</methodsynopsis>
<methodsynopsis function="preg_match_all">
  <type>int</type>
  <methodname>preg_match_all</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">matches</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags. </desc>
</methodsynopsis>
<methodsynopsis function="preg_match">
  <type>mixed</type>
  <methodname>preg_match</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">matches</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Searches subject for a match to the regular expression given in pattern. </desc>
</methodsynopsis>
<methodsynopsis function="preg_quote">
  <type>string</type>
  <methodname>preg_quote</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <desc>preg_quote takes str and puts a backslash in front of every character that is part of the regular expression syntax.  This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters. </desc>
</methodsynopsis>
<methodsynopsis function="preg_replace_callback">
  <type>mixed</type>
  <methodname>preg_replace_callback</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <desc> The behavior of this function is almost identical to preg_replace, except for the fact that instead of replacement parameter, one should specify a callback that will be called and passed an array of matched elements in the subject string. The callback should return the replacement string. </desc>
</methodsynopsis>
<methodsynopsis function="preg_replace">
  <type>mixed</type>
  <methodname>preg_replace</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>replacement</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">count</parameter>
  </methodparam>
  <desc> Searches subject for matches to pattern and replaces them with replacement. </desc>
</methodsynopsis>
<methodsynopsis function="preg_split">
  <type>array</type>
  <methodname>preg_split</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> Returns an array containing substrings of subject split along boundaries matched by pattern. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_bookmark">
  <type>int</type>
  <methodname>pdf_add_bookmark</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>parent</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>open</parameter>
  </methodparam>
  <desc> Add a nested bookmark under parent, or a new top-level bookmark if parent = 0. Returns a bookmark descriptor which may be used as parent for subsequent nested bookmarks. If open = 1, child bookmarks will be folded out, and  invisible if open = 0. Parameters parent and open were optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_launchlink">
  <type>bool</type>
  <methodname>pdf_add_launchlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>llx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lly</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>urx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ury</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Adds a link to a web resource specified by filename. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_locallink">
  <type>bool</type>
  <methodname>pdf_add_locallink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lowerleftx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lowerlefty</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>upperrightx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>upperrighty</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc> Add a link annotation to a target within the current PDF file. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_note">
  <type>bool</type>
  <methodname>pdf_add_note</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>llx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lly</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>urx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ury</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>contents</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>title</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>icon</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>open</parameter>
  </methodparam>
  <desc> Sets an annotation for the current page. icon is one of  comment, insert, note, paragraph, newparagraph,  key, or help. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_pdflink">
  <type>bool</type>
  <methodname>pdf_add_pdflink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>bottom_left_x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>bottom_left_y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>up_right_x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>up_right_y</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc> Add a file link annotation (to a PDF target). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_thumbnail">
  <type>bool</type>
  <methodname>pdf_add_thumbnail</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>image</parameter>
  </methodparam>
  <desc> Adds an existing image as thumbnail for the current page. Thumbnail images must not be wider or higher than 106 pixels. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_add_weblink">
  <type>bool</type>
  <methodname>pdf_add_weblink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lowerleftx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lowerlefty</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>upperrightx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>upperrighty</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <desc> Add a weblink annotation to a target url on the Web. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_arc">
  <type>bool</type>
  <methodname>pdf_arc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>alpha</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>beta</parameter>
  </methodparam>
  <desc> Add a counterclockwise circular arc from alpha to beta degrees with center (x; y) and radius r. Actual drawing of the circle is performed by the next stroke or fill operation.  </desc>
</methodsynopsis>
<methodsynopsis function="pdf_arcn">
  <type>bool</type>
  <methodname>pdf_arcn</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>alpha</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>beta</parameter>
  </methodparam>
  <desc> Add a clockwise circular arc from alpha to beta degrees with center (x; y) and radius r. Actual drawing of the circle is performed by the next stroke or fill operation.  </desc>
</methodsynopsis>
<methodsynopsis function="pdf_attach_file">
  <type>bool</type>
  <methodname>pdf_attach_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>llx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>lly</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>urx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ury</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>description</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>author</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mimetype</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>icon</parameter>
  </methodparam>
  <desc> Add a file attachment annotation. icon is one of  graph, paperclip,  pushpin, or tag. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_begin_page">
  <type>bool</type>
  <methodname>pdf_begin_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> Add a new page to the document. &amp;amp;return.success; The width and height are specified in points, which are 1/72 of an inch. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_begin_pattern">
  <type>int</type>
  <methodname>pdf_begin_pattern</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xstep</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ystep</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>painttype</parameter>
  </methodparam>
  <desc> Starts a new pattern definition and returns a pattern handle. width, and height define the bounding box for the pattern.  xstep and ystep give the repeated pattern offsets. painttype=1 means that the pattern has its own colour settings whereas a value of 2 indicates that the current colour is used when the pattern is applied. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_begin_template">
  <type>int</type>
  <methodname>pdf_begin_template</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> Start a new template definition. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_circle">
  <type>bool</type>
  <methodname>pdf_circle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <desc> Add a circle with center (x, y) and radius r  to the current page. Actual drawing of the circle is performed by the next stroke or fill operation.  </desc>
</methodsynopsis>
<methodsynopsis function="pdf_clip">
  <type>bool</type>
  <methodname>pdf_clip</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Use the current path as clipping path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_close_image">
  <type>void</type>
  <methodname>pdf_close_image</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>image</parameter>
  </methodparam>
  <desc> Close an image retrieved with the pdf_open_image function. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_close_pdi_page">
  <type>bool</type>
  <methodname>pdf_close_pdi_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pagehandle</parameter>
  </methodparam>
  <desc> Close the page handle, and free all page-related resources. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_close_pdi">
  <type>bool</type>
  <methodname>pdf_close_pdi</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dochandle</parameter>
  </methodparam>
  <desc> Close all open page handles, and close the input PDF document. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_close">
  <type>bool</type>
  <methodname>pdf_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Close the generated PDF file, and free all document-related resources. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_closepath_fill_stroke">
  <type>bool</type>
  <methodname>pdf_closepath_fill_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Close the path, fill, and stroke it. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_closepath_stroke">
  <type>bool</type>
  <methodname>pdf_closepath_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Close the path, and stroke it. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_closepath">
  <type>bool</type>
  <methodname>pdf_closepath</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Close the current path. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_concat">
  <type>bool</type>
  <methodname>pdf_concat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>d</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>e</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>f</parameter>
  </methodparam>
  <desc> Concatenate a matrix to the CTM. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_continue_text">
  <type>bool</type>
  <methodname>pdf_continue_text</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Print text at the next line. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_curveto">
  <type>bool</type>
  <methodname>pdf_curveto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x3</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y3</parameter>
  </methodparam>
  <desc> Draw a Bezier curve from the current point, using 3 more control points.  &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_delete">
  <type>bool</type>
  <methodname>pdf_delete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Delete the PDF resource, and free all internal resources. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_end_page">
  <type>bool</type>
  <methodname>pdf_end_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Finish the page. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_end_pattern">
  <type>bool</type>
  <methodname>pdf_end_pattern</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Finish the pattern definition. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_end_template">
  <type>bool</type>
  <methodname>pdf_end_template</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Finish the template definition. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_fill_stroke">
  <type>bool</type>
  <methodname>pdf_fill_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Fill and stroke the path with the current fill and stroke color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_fill">
  <type>bool</type>
  <methodname>pdf_fill</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Fill the interior of the path with the current fill color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_findfont">
  <type>int</type>
  <methodname>pdf_findfont</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fontname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>embed</parameter>
  </methodparam>
  <desc> Prepare a font for later use with pdf_setfont. The metrics will be loaded, and if embed is nonzero, the font file will be checked, but not yet used. encoding is one of builtin, macroman, winansi,  host, a user-defined encoding name or the name of a CMap. Parameter embed was optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_buffer">
  <type>string</type>
  <methodname>pdf_get_buffer</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Get the contents of the PDF output buffer. The result must be used by the client before calling any other PDFlib function. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_majorversion">
  <type>int</type>
  <methodname>pdf_get_majorversion</methodname>
  <void/>
  <desc> Returns the major version number of the PDFlib. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_minorversion">
  <type>int</type>
  <methodname>pdf_get_minorversion</methodname>
  <void/>
  <desc> Returns the minor version number of the PDFlib. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_parameter">
  <type>string</type>
  <methodname>pdf_get_parameter</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>modifier</parameter>
  </methodparam>
  <desc> Get the contents of some PDFlib parameter with string type. Parameter modifier was optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_pdi_parameter">
  <type>string</type>
  <methodname>pdf_get_pdi_parameter</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>document</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Get the contents of some PDI document parameter with string type. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_pdi_value">
  <type>string</type>
  <methodname>pdf_get_pdi_value</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>doc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Get the contents of some PDI document parameter with numerical type. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_get_value">
  <type>float</type>
  <methodname>pdf_get_value</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>modifier</parameter>
  </methodparam>
  <desc> Get the contents of some PDFlib parameter with float type. Parameter modifier was optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_initgraphics">
  <type>bool</type>
  <methodname>pdf_initgraphics</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Reset all implicit color and graphics state parameters to their defaults. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_lineto">
  <type>bool</type>
  <methodname>pdf_lineto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Draw a line from the current point to (x, y). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_makespotcolor">
  <type>bool</type>
  <methodname>pdf_makespotcolor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>spotname</parameter>
  </methodparam>
  <desc> Make a named spot color from the current color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_moveto">
  <type>bool</type>
  <methodname>pdf_moveto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Set the current point to (x, y. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_new">
  <type>resource</type>
  <methodname>pdf_new</methodname>
  <methodparam>
    <parameter/>
  </methodparam>
  <desc> Create a new PDF resource, using default error handling and memory management. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_ccitt">
  <type>int</type>
  <methodname>pdf_open_ccitt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>BitReverse</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>k</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>Blackls1</parameter>
  </methodparam>
  <desc> Open a raw CCITT image. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_file">
  <type>bool</type>
  <methodname>pdf_open_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Create a new PDF file using the supplied file name. If filename is empty the PDF document will be generated in memory instead of on file. The result must be fetched by the client with the pdf_get_buffer function. Parameter filename was optional before PHP 5. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_image_file">
  <type>int</type>
  <methodname>pdf_open_image_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>imagetype</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stringparam</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>intparam</parameter>
  </methodparam>
  <desc> Open an image file. Supported types are jpeg,  tiff, gif, and png. stringparam is either empty, mask, masked, or  page. intparam is either 0, the image id of the applied mask, or the page. Parameters stringparam and intparam were optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_image">
  <type>int</type>
  <methodname>pdf_open_image</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>imagetype</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>components</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>bpc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Use image data from a variety of data sources. Supported types are jpeg, ccitt, raw. Supported sources are memory, fileref, url. len is only used when type is  raw, params is only used when type is ccitt. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_memory_image">
  <type>int</type>
  <methodname>pdf_open_memory_image</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>image</parameter>
  </methodparam>
  <desc> The pdf_open_memory_image function takes an image created with the PHP's image  functions and makes it available for the pdf resource. The function returns a pdf image identifier. Including a memory image
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_pdi_page">
  <type>int</type>
  <methodname>pdf_open_pdi_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>dochandle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pagenumber</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pagelabel</parameter>
  </methodparam>
  <desc> Prepare a page for later use with pdf_place_image</desc>
</methodsynopsis>
<methodsynopsis function="pdf_open_pdi">
  <type>int</type>
  <methodname>pdf_open_pdi</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stringparam</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>intparam</parameter>
  </methodparam>
  <desc> Opens an existing PDF document and prepares it for later use. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_place_image">
  <type>bool</type>
  <methodname>pdf_place_image</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>image</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>scale</parameter>
  </methodparam>
  <desc> Place an image with the lower left corner at (x, y), and scale it. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_place_pdi_page">
  <type>bool</type>
  <methodname>pdf_place_pdi_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>page</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>sx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>sy</parameter>
  </methodparam>
  <desc> Place a PDI page with the lower left corner at (x, y), and scale it. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_rect">
  <type>bool</type>
  <methodname>pdf_rect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> Draw a (width * height) rectangle at lower left (x, y). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_restore">
  <type>bool</type>
  <methodname>pdf_restore</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Restore the most recently saved graphics state. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_rotate">
  <type>bool</type>
  <methodname>pdf_rotate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>phi</parameter>
  </methodparam>
  <desc> Rotate the coordinate system by phi degrees. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_save">
  <type>bool</type>
  <methodname>pdf_save</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Save the current graphics state. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_scale">
  <type>bool</type>
  <methodname>pdf_scale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x_scale</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y_scale</parameter>
  </methodparam>
  <desc> Scale the coordinate system. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_border_color">
  <type>bool</type>
  <methodname>pdf_set_border_color</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue</parameter>
  </methodparam>
  <desc> Set the border color for all kinds of annotations. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_border_dash">
  <type>bool</type>
  <methodname>pdf_set_border_dash</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>black</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>white</parameter>
  </methodparam>
  <desc> Sets the border dash style for all kinds of annotations. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_border_style">
  <type>bool</type>
  <methodname>pdf_set_border_style</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>style</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> Sets the border style for all kinds of annotations. style is solid or dashed. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_info">
  <type>bool</type>
  <methodname>pdf_set_info</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Fill document information field key with  value. &amp;amp;return.success; key is one of Subject, Title, Creator, Author, Keywords, or a user-defined key. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_parameter">
  <type>bool</type>
  <methodname>pdf_set_parameter</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets some PDFlib parameters with string type. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_text_pos">
  <type>bool</type>
  <methodname>pdf_set_text_pos</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Set the text output position specified by x and y. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_set_value">
  <type>bool</type>
  <methodname>pdf_set_value</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Set the value of some PDFlib parameter with float type. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setcolor">
  <type>bool</type>
  <methodname>pdf_setcolor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>colorspace</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c3</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c4</parameter>
  </methodparam>
  <desc> Set the current color space and color. &amp;amp;return.success; The parameter type can be fill, stroke or both to specify that the color is set for filling, stroking or both filling and stroking. The parameter colorspace can be gray, rgb, cmyk, spot or pattern.  The parameters c1, c2, c3 and c4 represent the color components for the color space specified by colorspace. Except as otherwise noted, the color components are floating-point values that range from 0 to 1. Parameters c2, c3 and c4 were optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setdash">
  <type>bool</type>
  <methodname>pdf_setdash</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>w</parameter>
  </methodparam>
  <desc> Set the current dash pattern to b black  and w white units. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setflat">
  <type>bool</type>
  <methodname>pdf_setflat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>flatness</parameter>
  </methodparam>
  <desc> Sets the flatness to a value between 0 and 100 inclusive. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setfont">
  <type>bool</type>
  <methodname>pdf_setfont</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <desc> Set the current font in the given size, using a font handle returned by pdf_findfont. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setgray_fill">
  <type>bool</type>
  <methodname>pdf_setgray_fill</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>gray</parameter>
  </methodparam>
  <desc> Set the current fill color to a gray value between 0 and 1 inclusive. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setgray_stroke">
  <type>bool</type>
  <methodname>pdf_setgray_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>gray</parameter>
  </methodparam>
  <desc> Set the current stroke color to a gray value  between 0 and 1 inclusive. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setgray">
  <type>bool</type>
  <methodname>pdf_setgray</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>gray</parameter>
  </methodparam>
  <desc> Set the current fill and stroke color. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setlinecap">
  <type>void</type>
  <methodname>pdf_setlinecap</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>linecap</parameter>
  </methodparam>
  <desc> Set the linecap parameter to a value between 0 and 2 inclusive. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setlinejoin">
  <type>bool</type>
  <methodname>pdf_setlinejoin</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets the line join parameter to a value between  0 and 2 inclusive. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setlinewidth">
  <type>void</type>
  <methodname>pdf_setlinewidth</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> Sets the current linewidth to width. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setmatrix">
  <type>bool</type>
  <methodname>pdf_setmatrix</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>c</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>d</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>e</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>f</parameter>
  </methodparam>
  <desc> Explicitly set the current transformation matrix. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setmiterlimit">
  <type>bool</type>
  <methodname>pdf_setmiterlimit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>miter</parameter>
  </methodparam>
  <desc> Set the miter limit to a value greater than or equal to 1. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setrgbcolor_fill">
  <type>bool</type>
  <methodname>pdf_setrgbcolor_fill</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> Set the current fill color to the supplied RGB values. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setrgbcolor_stroke">
  <type>bool</type>
  <methodname>pdf_setrgbcolor_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> Set the current stroke color to the supplied RGB values. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_setrgbcolor">
  <type>bool</type>
  <methodname>pdf_setrgbcolor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>red_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>green_value</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>blue_value</parameter>
  </methodparam>
  <desc> Set the current fill and stroke color to the supplied RGB values. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_show_boxed">
  <type>int</type>
  <methodname>pdf_show_boxed</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>left</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>top</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>feature</parameter>
  </methodparam>
  <desc> Format text in the current font and size into the supplied text box according to the requested formatting  mode, which must be one of left, right, center, justify or fulljustify. If width and height are 0,  only a single line is placed at the point (left,  top) in the requested mode. Parameter feature was optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_show_xy">
  <type>bool</type>
  <methodname>pdf_show_xy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> Print text in the current font at ( x, y). &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_show">
  <type>bool</type>
  <methodname>pdf_show</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <desc> Print text in the current font and size at the current position. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_skew">
  <type>bool</type>
  <methodname>pdf_skew</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>alpha</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>beta</parameter>
  </methodparam>
  <desc> Skew the coordinate system in x and y direction by alpha and beta degrees. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_stringwidth">
  <type>float</type>
  <methodname>pdf_stringwidth</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <desc> Returns the width of text using the last font set by pdf_setfont.  If the optional parameters font and size are specified, the width will be calculated using that font and size instead.  Please note that font is a font handle returned by pdf_findfont. Parameters font and size were optional before PHP 5. </desc>
</methodsynopsis>
<methodsynopsis function="pdf_stroke">
  <type>bool</type>
  <methodname>pdf_stroke</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <desc> Stroke the path with the current color and line width, and clear it. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pdf_translate">
  <type>bool</type>
  <methodname>pdf_translate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>pdfdoc</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>tx</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ty</parameter>
  </methodparam>
  <desc> Translate the origin of the coordinate system. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::beginTransaction">
  <type>bool</type>
  <methodname>PDO::beginTransaction</methodname>
  <void/>
  <desc> Turns off autocommit mode. Call PDO::commit or PDO::rollback to end the transaction and return to autocommit mode. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::commit">
  <type>bool</type>
  <methodname>PDO::commit</methodname>
  <void/>
  <desc> Commits a transaction, returning the database connection to autocommit mode until the next call to PDO::beginTransaction starts a new transaction. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::__construct">
  <type>PDO</type>
  <methodname>PDO::__construct</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dsn</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>driver_options</parameter>
  </methodparam>
  <desc> Creates a PDO instance to represent a connection to the requested database.  </desc>
</methodsynopsis>
<methodsynopsis function="PDO::errorCode">
  <type>int</type>
  <methodname>PDO::errorCode</methodname>
  <void/>
  <desc> Returns a SQLSTATE, a five-character alphanumeric identifier defined in the ANSI SQL standard. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::errorInfo">
  <type>array</type>
  <methodname>PDO::errorInfo</methodname>
  <void/>
  <desc>PDO::errorInfo returns an array of error information about the last operation performed by this database handle. The array consists of the following fields: ElementInformation0SQLSTATE error code (a five-character alphanumeric identifier defined in the ANSI SQL standard).1Driver-specific error code.2Driver-specific error message.</desc>
</methodsynopsis>
<methodsynopsis function="PDO::exec">
  <type>long</type>
  <methodname>PDO::exec</methodname>
  <methodparam>
    <type>string</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>PDO::exec prepares and executes an SQL statement in a single function call, returning the number of rows affected by the statement. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::getAttribute">
  <type>mixed</type>
  <methodname>PDO::getAttribute</methodname>
  <methodparam>
    <type>long</type>
    <parameter>attribute</parameter>
  </methodparam>
  <desc> This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to PDOStatement::getAttribute. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::lastInsertId">
  <type>string</type>
  <methodname>PDO::lastInsertId</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the ID of the last inserted row, or the next value from a sequence object. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::prepare">
  <type>PDOStatement</type>
  <methodname>PDO::prepare</methodname>
  <methodparam>
    <type>string</type>
    <parameter>statement</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>driver_options</parameter>
  </methodparam>
  <desc> Prepares an SQL statement to be executed by the PDOStatement::execute method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use named and question mark parameter markers within the same SQL statement. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::query">
  <type>object</type>
  <methodname>PDO::query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>statement</parameter>
  </methodparam>
  <desc>PDO::query prepares and executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::quote">
  <type>string</type>
  <methodname>PDO::quote</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>parameter_type</parameter>
  </methodparam>
  <desc>PDO::quote places quotes around the input string and escapes and single quotes within the input string. Quoting input strings has been a common means of attempting to prevent SQL injection attacks; however, an even safer approach is to use prepared statements with named parameters or placeholders for the input values. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::rollBack">
  <type>bool</type>
  <methodname>PDO::rollBack</methodname>
  <void/>
  <desc> When issued against databases that support transactions, PDO::rollBack rolls back any work in progress and and returns the connection state to autocommit mode. </desc>
</methodsynopsis>
<methodsynopsis function="PDO::setAttribute">
  <type>bool</type>
  <methodname>PDO::setAttribute</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attribute</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets a database connection attribute. The generic PDO connection attributes include: PDO_ATTR_CASE: Force column names to a specific case. PDO_CASE_LOWER: Force column names to lower case. PDO_CASE_NATURAL: Leave column names as returned by the database driver. PDO_CASE_UPPER: Force column names to upper case. PDO drivers may define further driver-specific attributes. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::bindColumn">
  <type>bool</type>
  <methodname>PDOStatement::bindColumn</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>column</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">param</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlen</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>driver_options</parameter>
  </methodparam>
  <desc> On each row fetch param will contain the value of the corresponding column. column is the 1-based offset of the column, or the column name. For maximum portability, do not call this function before calling PDOStatement::execute. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::bindParam">
  <type>bool</type>
  <methodname>PDOStatement::bindParam</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>parameter</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">variable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>data_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Binds an SQL statement parameter to the specified variable name. The SQL statement parameter can either be a named placeholder or a question mark placeholder. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::columnCount">
  <type>int</type>
  <methodname>PDOStatement::columnCount</methodname>
  <void/>
  <desc> Use PDOStatement::columnCount to return the number of columns in the result set represented by the PDOStatement object. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::errorCode">
  <type>int</type>
  <methodname>PDOStatement::errorCode</methodname>
  <void/>
  <desc> Returns a SQLSTATE, a five-character alphanumeric identifier defined in the ANSI SQL standard. PDOStatement::errorCode only retrieves error codes for operations performed with PDOStatement objects. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::errorInfo">
  <type>array</type>
  <methodname>PDOStatement::errorInfo</methodname>
  <void/>
  <desc>PDOStatement::errorInfo returns an array of error information about the last operation performed by this statement handle. The array consists of the following fields: ElementInformation0SQLSTATE error code (a five-character alphanumeric identifier defined in the ANSI SQL standard).1Driver-specific error code.2Driver-specific error message.</desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::execute">
  <type>bool</type>
  <methodname>PDOStatement::execute</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>input_parameters</parameter>
  </methodparam>
  <desc> Execute the prepared statement. If the prepared statement included parameter markers, you must either: call PDOStatement::bindParam to bind PHP variables to the parameter markers: bound variables pass their value as input and receive the output value, if any, of their associated parameter markersor pass an array of input-only parameter values</desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::fetch">
  <type>mixed</type>
  <methodname>PDOStatement::fetch</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fetch_style</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_orientation</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_offset</parameter>
  </methodparam>
  <desc> Fetches a row from a result set associated with a PDOStatement object. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::fetchAll">
  <type>array</type>
  <methodname>PDOStatement::fetchAll</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>fetch_style</parameter>
  </methodparam>
  <desc> fetch_style Controls the contents of the returned array as documented in PDOStatement::fetch. Defaults to PDO_FETCH_BOTH. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::fetchSingle">
  <type>string</type>
  <methodname>PDOStatement::fetchSingle</methodname>
  <void/>
  <desc>PDOStatement::fetchSingle returns the first column in the next row of a result set as a string value. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::getAttribute">
  <type>mixed</type>
  <methodname>PDOStatement::getAttribute</methodname>
  <methodparam>
    <type>long</type>
    <parameter>attribute</parameter>
  </methodparam>
  <desc> PDO::getAttribute PDO::setAttribute PDOStatement::setAttribute </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::getColumnMeta">
  <type>mixed</type>
  <methodname>PDOStatement::getColumnMeta</methodname>
  <methodparam>
    <type>int</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Retrieves the metadata for a 0-indexed column in a result set as an associative array. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::nextRowset">
  <type>bool</type>
  <methodname>PDOStatement::nextRowset</methodname>
  <void/>
  <desc> Some database servers support stored procedures that return more than one rowset (also known as a result set). PDOStatement::nextRowSet enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset. </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::rowCount">
  <type>int</type>
  <methodname>PDOStatement::rowCount</methodname>
  <void/>
  <desc>PDOStatement::rowCount returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding PDOStatement object.  </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::setAttribute">
  <type>bool</type>
  <methodname>PDOStatement::setAttribute</methodname>
  <methodparam>
    <type>long</type>
    <parameter>attribute</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> PDO::getAttribute PDO::setAttribute PDOStatement::getAttribute </desc>
</methodsynopsis>
<methodsynopsis function="PDOStatement::setFetchMode">
  <type>bool</type>
  <methodname>PDOStatement::setFetchMode</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> mode The fetch mode must be one of the PDO_FETCH_* constants. </desc>
</methodsynopsis>
<methodsynopsis function="pfpro_cleanup">
  <type>void</type>
  <methodname>pfpro_cleanup</methodname>
  <void/>
  <desc>pfpro_cleanup is used to shutdown the Payflow Pro library cleanly. It should be called after you have processed any transactions and before the end of your script. However you may omit this call, in which case this extension will automatically call pfpro_cleanup after your script terminates. </desc>
</methodsynopsis>
<methodsynopsis function="pfpro_init">
  <type>void</type>
  <methodname>pfpro_init</methodname>
  <void/>
  <desc>pfpro_init is used to initialise the Payflow Pro library. You may omit this call, in which case this extension will automatically call pfpro_init before the first transaction. </desc>
</methodsynopsis>
<methodsynopsis function="pfpro_process_raw">
  <type>string</type>
  <methodname>pfpro_process_raw</methodname>
  <methodparam>
    <type>string</type>
    <parameter>parameters</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>proxy_port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_logon</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_password</parameter>
  </methodparam>
  <desc> Returns: A string containing the response. </desc>
</methodsynopsis>
<methodsynopsis function="pfpro_process">
  <type>array</type>
  <methodname>pfpro_process</methodname>
  <methodparam>
    <type>array</type>
    <parameter>parameters</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>proxy_port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_logon</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>proxy_password</parameter>
  </methodparam>
  <desc> Returns: An associative array containing the response </desc>
</methodsynopsis>
<methodsynopsis function="pfpro_version">
  <type>string</type>
  <methodname>pfpro_version</methodname>
  <void/>
  <desc>pfpro_version returns the version string of the Payflow Pro library. At the time of writing, this was L211. </desc>
</methodsynopsis>
<methodsynopsis function="pg_affected_rows">
  <type>int</type>
  <methodname>pg_affected_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_affected_rows returns the number of tuples (instances/records/rows) affected by INSERT,  UPDATE, and DELETE queries.  </desc>
</methodsynopsis>
<methodsynopsis function="pg_cancel_query">
  <type>bool</type>
  <methodname>pg_cancel_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_cancel_query cancel asynchronous query sent by  pg_send_query. You cannot cancel query executed by  pg_query. </desc>
</methodsynopsis>
<methodsynopsis function="pg_client_encoding">
  <type>string</type>
  <methodname>pg_client_encoding</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> PostgreSQL supports automatic character set conversion between  server and client for certain character sets. pg_client_encoding returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers. </desc>
</methodsynopsis>
<methodsynopsis function="pg_close">
  <type>bool</type>
  <methodname>pg_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_close closes the non-persistent connection to a PostgreSQL database associated with the given connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_connect">
  <type>resource</type>
  <methodname>pg_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>connection_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>connect_type</parameter>
  </methodparam>
  <desc>pg_connect opens a connection to a PostgreSQL database specified by the connection_string. </desc>
</methodsynopsis>
<methodsynopsis function="pg_connection_busy">
  <type>bool</type>
  <methodname>pg_connection_busy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_connection_busy returns &amp;amp;true; if the connection is busy. If it is busy, a previous query is still executing. If pg_get_result is called, it will be blocked. </desc>
</methodsynopsis>
<methodsynopsis function="pg_connection_reset">
  <type>bool</type>
  <methodname>pg_connection_reset</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_connection_reset resets the connection. It is useful for error recovery. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_connection_status">
  <type>int</type>
  <methodname>pg_connection_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_connection_status returns a connection status.  Possible statuses are PGSQL_CONNECTION_OK and PGSQL_CONNECTION_BAD. The return value 0 as integer indicates a valid connection. </desc>
</methodsynopsis>
<methodsynopsis function="pg_convert">
  <type>array</type>
  <methodname>pg_convert</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>assoc_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pg_convert checks and converts the values in assoc_array into suitable values for use in a SQL statement. Precondition for pg_convert is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames as well as the fieldvalues in table_name must match the indices and values of assoc_array. Returns an array with the converted values on success, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="pg_copy_from">
  <type>bool</type>
  <methodname>pg_copy_from</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>rows</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>null_as</parameter>
  </methodparam>
  <desc>pg_copy_from insert records into a table from  rows. It issues COPY FROM SQL command  internally to insert records. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_copy_to">
  <type>array</type>
  <methodname>pg_copy_to</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>delimiter</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>null_as</parameter>
  </methodparam>
  <desc>pg_copy_to copies a table to an array. It issues COPY TO SQL command internally to retrieve records. The resulting array is returned. It returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="pg_dbname">
  <type>string</type>
  <methodname>pg_dbname</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_dbname returns the name of the database that the given PostgreSQL connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_delete">
  <type>mixed</type>
  <methodname>pg_delete</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>assoc_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pg_delete deletes record condition specified by assoc_array which has field=&amp;gt;value. If option is specified, pg_convert is applied to assoc_array with specified option. </desc>
</methodsynopsis>
<methodsynopsis function="pg_end_copy">
  <type>bool</type>
  <methodname>pg_end_copy</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_end_copy syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line. pg_end_copy must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_escape_bytea">
  <type>string</type>
  <methodname>pg_escape_bytea</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>pg_escape_bytea escapes string for bytea datatype.  It returns escaped string. </desc>
</methodsynopsis>
<methodsynopsis function="pg_escape_string">
  <type>string</type>
  <methodname>pg_escape_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>pg_escape_string escapes string for text/char datatype.  It returns escaped string for PostgreSQL. Use of this function is recommended instead of addslashes. </desc>
</methodsynopsis>
<methodsynopsis function="pg_execute">
  <type>resource</type>
  <methodname>pg_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stmtname</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Sends a request to execute a prepared statement with given parameters, and  waits for the result. </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_all">
  <type>array</type>
  <methodname>pg_fetch_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_fetch_all returns an array that contains all rows (records) in the result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_array">
  <type>array</type>
  <methodname>pg_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>pg_fetch_array returns an array that corresponds to the fetched row (record). </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_assoc">
  <type>array</type>
  <methodname>pg_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <desc>pg_fetch_assoc returns an associative array that corresponds to the fetched row (records). </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_object">
  <type>object</type>
  <methodname>pg_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>pg_fetch_object returns an object with properties that correspond to the fetched row's field names.  It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor. </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_result">
  <type>mixed</type>
  <methodname>pg_fetch_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>pg_fetch_result returns the value of a particular row and field (column) in a PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_fetch_row">
  <type>array</type>
  <methodname>pg_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <desc>pg_fetch_row fetches one row of data from the result associated with the specified result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_is_null">
  <type>int</type>
  <methodname>pg_field_is_null</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>pg_field_is_null tests if a field in a PostgreSQL result resource is SQL NULL or not. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_name">
  <type>string</type>
  <methodname>pg_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>pg_field_name returns the name of the field occupying the given field_number in the given PostgreSQL result resource.  Field numbering starts from 0. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_num">
  <type>int</type>
  <methodname>pg_field_num</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field_name</parameter>
  </methodparam>
  <desc>pg_field_num will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_prtlen">
  <type>int</type>
  <methodname>pg_field_prtlen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field_name_or_number</parameter>
  </methodparam>
  <desc>pg_field_prtlen returns the actual printed length (number of characters) of a specific value in a PostgreSQL result.  Row numbering starts at 0.  This function will return -1 on an error. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_size">
  <type>int</type>
  <methodname>pg_field_size</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>pg_field_size returns the internal storage size (in bytes) of the field number in the given PostgreSQL result. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_type_oid">
  <type>int</type>
  <methodname>pg_field_type_oid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>pg_field_type_oid returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_field_type">
  <type>string</type>
  <methodname>pg_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>pg_field_type returns a string containing the base type name of the given field_number in the given PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_free_result">
  <type>bool</type>
  <methodname>pg_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_free_result only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script is finished. But, if you are sure you are not going to need the result data anymore in a script, you may call pg_free_result with the result resource as an argument and the associated result memory will be freed. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_get_notify">
  <type>array</type>
  <methodname>pg_get_notify</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>pg_get_notify gets notify message sent by NOTIFY SQL command. To receive notify messages, LISTEN SQL command must be issued. If there is notify message on the connection, array contains message name and backend PID is returned. If there is no message, &amp;amp;false; is returned. </desc>
</methodsynopsis>
<methodsynopsis function="pg_get_pid">
  <type>int</type>
  <methodname>pg_get_pid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_get_pid gets backend (database server process) PID. PID is useful to check if NOTIFY message is sent from other process or not. </desc>
</methodsynopsis>
<methodsynopsis function="pg_get_result">
  <type>resource</type>
  <methodname>pg_get_result</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_get_result get result resource from async query executed by pg_send_query. pg_send_query can send multiple queries to PostgreSQL server and pg_get_result is used to get query result one by one. It returns result resource. If there is no more results, it returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="pg_host">
  <type>string</type>
  <methodname>pg_host</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_host returns the host name of the given PostgreSQL connection resource is connected to. </desc>
</methodsynopsis>
<methodsynopsis function="pg_insert">
  <type>bool</type>
  <methodname>pg_insert</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>assoc_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pg_insert inserts the values of assoc_array  into the table specified by table_name. table_name must at least have as many columns as  assoc_array has elements. The fieldnames as  well as the fieldvalues in table_name must match the indices and values of assoc_array. &amp;amp;return.success; If options is specified, pg_insert is applied to assoc_array with specified option. </desc>
</methodsynopsis>
<methodsynopsis function="pg_last_error">
  <type>string</type>
  <methodname>pg_last_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_last_error returns the last error message for given connection.  </desc>
</methodsynopsis>
<methodsynopsis function="pg_last_notice">
  <type>string</type>
  <methodname>pg_last_notice</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_last_notice returns the last notice message from the PostgreSQL server specified by connection. The PostgreSQL server sends notice messages in several cases, e.g. if the transactions can't be continued. With pg_last_notice, you can avoid issuing useless queries, by checking whether the notice is related to the transaction or not. </desc>
</methodsynopsis>
<methodsynopsis function="pg_last_oid">
  <type>int</type>
  <methodname>pg_last_oid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_last_oid is used to retrieve the oid assigned to an inserted tuple (record) if the result resource is used from the last command sent via pg_query and was an SQL INSERT.  Returns a positive integer if there was a valid oid.  It returns &amp;amp;false; if an error occurs or the last command sent via pg_query was not an INSERT or INSERT is failed. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_close">
  <type>bool</type>
  <methodname>pg_lo_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <desc>pg_lo_close closes a large object. large_object is a resource for the large object from pg_lo_open. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_create">
  <type>int</type>
  <methodname>pg_lo_create</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_lo_create creates a large object and returns the OID of the large object.  PostgreSQL access modes INV_READ, INV_WRITE, and  INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above). </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_export">
  <type>bool</type>
  <methodname>pg_lo_export</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>oid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <desc>pg_lo_export takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_import">
  <type>int</type>
  <methodname>pg_lo_import</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <desc> In versions before PHP 4.2.0 the syntax of this function was different, see the following definition: </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_open">
  <type>resource</type>
  <methodname>pg_lo_open</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>oid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>pg_lo_open opens a large object in the database and returns large object resource so that it can be manipulated. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_read_all">
  <type>int</type>
  <methodname>pg_lo_read_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <desc>pg_lo_read_all reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_read">
  <type>string</type>
  <methodname>pg_lo_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc>pg_lo_read reads at most len bytes from a large object and returns it as a string. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_seek">
  <type>bool</type>
  <methodname>pg_lo_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <desc>pg_lo_seek seeks a position within a large object resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_tell">
  <type>int</type>
  <methodname>pg_lo_tell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <desc>pg_lo_tell returns the current position (offset from the beginning) of a large object. </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_unlink">
  <type>bool</type>
  <methodname>pg_lo_unlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>oid</parameter>
  </methodparam>
  <desc>pg_lo_unlink deletes a large object with the oid. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_lo_write">
  <type>int</type>
  <methodname>pg_lo_write</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>large_object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc>pg_lo_write writes data into a large object at the current seek position. </desc>
</methodsynopsis>
<methodsynopsis function="pg_meta_data">
  <type>array</type>
  <methodname>pg_meta_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <desc>pg_meta_data returns table definition for table_name as an array. If there is error, it returns &amp;amp;false; </desc>
</methodsynopsis>
<methodsynopsis function="pg_num_fields">
  <type>int</type>
  <methodname>pg_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_num_fields returns the number of fields (columns) in a PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_num_rows">
  <type>int</type>
  <methodname>pg_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_num_rows will return the number of rows in a PostgreSQL result resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_options">
  <type>string</type>
  <methodname>pg_options</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_options will return a string containing the options specified on the given PostgreSQL connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_parameter_status">
  <type>string</type>
  <methodname>pg_parameter_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>param_name</parameter>
  </methodparam>
  <desc> Looks up a current parameter setting of the server. </desc>
</methodsynopsis>
<methodsynopsis function="pg_pconnect">
  <type>resource</type>
  <methodname>pg_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>connection_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>connect_type</parameter>
  </methodparam>
  <desc>pg_pconnect opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions. </desc>
</methodsynopsis>
<methodsynopsis function="pg_ping">
  <type>bool</type>
  <methodname>pg_ping</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_ping pings a database connection and tries to reconnect it if it is broken. </desc>
</methodsynopsis>
<methodsynopsis function="pg_port">
  <type>int</type>
  <methodname>pg_port</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_port returns the port number that the given PostgreSQL connection resource is connected to. </desc>
</methodsynopsis>
<methodsynopsis function="pg_prepare">
  <type>resource</type>
  <methodname>pg_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stmtname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>pg_prepare creates a prepared statement for later execution with  pg_execute or pg_send_execute.  This feature allows commands that will be used repeatedly to  be parsed and planned just once, rather than each time they are executed.  pg_prepare is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions. </desc>
</methodsynopsis>
<methodsynopsis function="pg_put_line">
  <type>bool</type>
  <methodname>pg_put_line</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>pg_put_line sends a NULL-terminated string to the PostgreSQL backend server. This is useful for example for very high-speed inserting of data into a table, initiated by starting a PostgreSQL copy-operation. That final NULL-character is added automatically. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pg_query_params">
  <type>resource</type>
  <methodname>pg_query_params</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Submits a command to the server and waits for the result, with the ability  to pass parameters separately from the SQL command text. </desc>
</methodsynopsis>
<methodsynopsis function="pg_query">
  <type>resource</type>
  <methodname>pg_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>pg_query returns a query result resource if query could be executed.  It returns &amp;amp;false; on failure or if connection is not a valid connection. Details about the error can be retrieved using the pg_last_error function if connection is valid. pg_query sends an SQL statement to the PostgreSQL database specified by the connection resource. The connection must be a valid connection that was returned by pg_connect or pg_pconnect. The return value of this function is an query result resource to be used to access the results from other PostgreSQL functions such as pg_fetch_array. connection is an optional parameter for pg_query. If connection is not set, default connection is used. Default connection is the last connection made by pg_connect or pg_pconnect. Although connection can be omitted, it is not recommended, since it could be a cause of hard to find bug in script. </desc>
</methodsynopsis>
<methodsynopsis function="pg_result_error_field">
  <type>mixed</type>
  <methodname>pg_result_error_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fieldcode</parameter>
  </methodparam>
  <desc>pg_result_error_field returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server.  The error field is specified by the fieldcode. </desc>
</methodsynopsis>
<methodsynopsis function="pg_result_error">
  <type>string</type>
  <methodname>pg_result_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>pg_result_error returns error message associated with result resource. Therefore, user has better chance to get better error message than pg_last_error. </desc>
</methodsynopsis>
<methodsynopsis function="pg_result_seek">
  <type>array</type>
  <methodname>pg_result_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>pg_result_seek set internal row offset in result resource.  It returns &amp;amp;false;, if there is error. </desc>
</methodsynopsis>
<methodsynopsis function="pg_result_status">
  <type>mixed</type>
  <methodname>pg_result_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>pg_result_status returns status of result resource, or the command tag associated with the result. Possible values of type are PGSQL_STATUS_LONG or PGSQL_STATUS_STRING.  The default is  PGSQL_STATUS_LONG. </desc>
</methodsynopsis>
<methodsynopsis function="pg_select">
  <type>array</type>
  <methodname>pg_select</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>assoc_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pg_select selects records specified by assoc_array which has field=&amp;gt;value. For successful query, it returns array contains all records and fields that match the condition specified by assoc_array. If options is specified, pg_convert is applied to assoc_array with specified option. </desc>
</methodsynopsis>
<methodsynopsis function="pg_send_execute">
  <type>bool</type>
  <methodname>pg_send_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stmtname</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Sends a request to execute a prepared statement with given parameters,  without waiting for the result(s). </desc>
</methodsynopsis>
<methodsynopsis function="pg_send_prepare">
  <type>bool</type>
  <methodname>pg_send_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>stmtname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc> Sends a request to create a prepared statement with the given parameters,  without waiting for completion. </desc>
</methodsynopsis>
<methodsynopsis function="pg_send_query_params">
  <type>bool</type>
  <methodname>pg_send_query_params</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Submits a command and separate parameters to the server without  waiting for the result(s). </desc>
</methodsynopsis>
<methodsynopsis function="pg_send_query">
  <type>bool</type>
  <methodname>pg_send_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>pg_send_query send asynchronous query to the connection. Unlike pg_query, it can send multiple query to PostgreSQL and get the result one by one using pg_get_result. Script execution is not blocked while query is executing. Use pg_connection_busy to check connection is busy (i.e. query is executing). Query may be cancelled by calling pg_cancel_query. </desc>
</methodsynopsis>
<methodsynopsis function="pg_set_client_encoding">
  <type>int</type>
  <methodname>pg_set_client_encoding</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>pg_set_client_encoding sets the client encoding and returns 0 if success or -1 if error. </desc>
</methodsynopsis>
<methodsynopsis function="pg_set_error_verbosity">
  <type>int</type>
  <methodname>pg_set_error_verbosity</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>verbosity</parameter>
  </methodparam>
  <desc> Determines the verbosity of messages returned by pg_last_error  and pg_result_error. </desc>
</methodsynopsis>
<methodsynopsis function="pg_trace">
  <type>bool</type>
  <methodname>pg_trace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_trace enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol. </desc>
</methodsynopsis>
<methodsynopsis function="pg_transaction_status">
  <type>int</type>
  <methodname>pg_transaction_status</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Returns the current in-transaction status of the server. </desc>
</methodsynopsis>
<methodsynopsis function="pg_tty">
  <type>string</type>
  <methodname>pg_tty</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_tty returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource. </desc>
</methodsynopsis>
<methodsynopsis function="pg_unescape_bytea">
  <type>string</type>
  <methodname>pg_unescape_bytea</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>pg_unescape_bytea unescapes string from bytea datatype.  It returns unescaped string (binary). </desc>
</methodsynopsis>
<methodsynopsis function="pg_untrace">
  <type>bool</type>
  <methodname>pg_untrace</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc> Stop tracing started by pg_trace. </desc>
</methodsynopsis>
<methodsynopsis function="pg_update">
  <type>mixed</type>
  <methodname>pg_update</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>condition</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc>pg_update updates records that matches condition with data. If options is specified, pg_convert is applied to data with specified options. </desc>
</methodsynopsis>
<methodsynopsis function="pg_version">
  <type>array</type>
  <methodname>pg_version</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>pg_version returns an array with the client, protocol and server version. Protocol and server versions are only avaliable if PHP was compiled with PostgreSQL 7.4 or later. </desc>
</methodsynopsis>
<methodsynopsis function="posix_access">
  <type>bool</type>
  <methodname>posix_access</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>posix_access checks the user's permission of a file. </desc>
</methodsynopsis>
<methodsynopsis function="posix_ctermid">
  <type>string</type>
  <methodname>posix_ctermid</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="posix_get_last_error">
  <type>int</type>
  <methodname>posix_get_last_error</methodname>
  <void/>
  <desc> Returns the errno (error number) set by the last posix function that  failed.  If no errors exist, 0 is returned.  If you're wanting the system error message associated with the errno, use  posix_strerror. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getcwd">
  <type>string</type>
  <methodname>posix_getcwd</methodname>
  <void/>
  <desc>posix_getcwd returns the absolute pathname of the script's current working directory. posix_getcwd returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getegid">
  <type>int</type>
  <methodname>posix_getegid</methodname>
  <void/>
  <desc> Return the numeric effective group ID of the current process. See also posix_getgrgid for information on how to convert this into a useable group name. </desc>
</methodsynopsis>
<methodsynopsis function="posix_geteuid">
  <type>int</type>
  <methodname>posix_geteuid</methodname>
  <void/>
  <desc> Return the numeric effective user ID of the current process. See also posix_getpwuid for information on how to convert this into a useable username. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getgid">
  <type>int</type>
  <methodname>posix_getgid</methodname>
  <void/>
  <desc> Return the numeric real group ID of the current process. See also posix_getgrgid for information on how to convert this into a useable group name. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getgrgid">
  <type>array</type>
  <methodname>posix_getgrgid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>gid</parameter>
  </methodparam>
  <desc> Returns an array of information about a group and &amp;amp;false; on failure.  If gid isn't a number then &amp;amp;null; is returned and an E_WARNING  level error is generated. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getgrnam">
  <type>array</type>
  <methodname>posix_getgrnam</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="posix_getgroups">
  <type>array</type>
  <methodname>posix_getgroups</methodname>
  <void/>
  <desc> Returns an array of integers containing the numeric group ids of the group set of the current process. See also posix_getgrgid for information on how to convert this into useable group names. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getlogin">
  <type>string</type>
  <methodname>posix_getlogin</methodname>
  <void/>
  <desc> Returns the login name of the user owning the current process. See posix_getpwnam for information how to get more information about this user. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getpgid">
  <type>int</type>
  <methodname>posix_getpgid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <desc> Returns the process group identifier of the process pid. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getpgrp">
  <type>int</type>
  <methodname>posix_getpgrp</methodname>
  <void/>
  <desc> Return the process group identifier of the current process. See POSIX.1 and the getpgrp(2) manual page on your POSIX system for more information on process groups. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getpid">
  <type>int</type>
  <methodname>posix_getpid</methodname>
  <void/>
  <desc> Return the process identifier of the current process. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getppid">
  <type>int</type>
  <methodname>posix_getppid</methodname>
  <void/>
  <desc> Return the process identifier of the parent process of the current process. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getpwnam">
  <type>array</type>
  <methodname>posix_getpwnam</methodname>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <desc> Returns an associative array containing information about a user referenced by an alphanumeric username, passed in the username parameter. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getpwuid">
  <type>array</type>
  <methodname>posix_getpwuid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc> Returns an associative array containing information about a user referenced by a numeric user ID, passed in the uid parameter. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getrlimit">
  <type>array</type>
  <methodname>posix_getrlimit</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="posix_getsid">
  <type>int</type>
  <methodname>posix_getsid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <desc> Return the sid of the process pid. If pid is 0, the sid of the current process is returned. </desc>
</methodsynopsis>
<methodsynopsis function="posix_getuid">
  <type>int</type>
  <methodname>posix_getuid</methodname>
  <void/>
  <desc> Return the numeric real user ID of the current process. See also posix_getpwuid for information on how to convert this into a useable username. </desc>
</methodsynopsis>
<methodsynopsis function="posix_isatty">
  <type>bool</type>
  <methodname>posix_isatty</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fd</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="posix_kill">
  <type>bool</type>
  <methodname>posix_kill</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>sig</parameter>
  </methodparam>
  <desc> Send the signal sig to the process with the process identifier pid. Returns &amp;amp;false;, if unable to send the signal, &amp;amp;true; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="posix_mkfifo">
  <type>bool</type>
  <methodname>posix_mkfifo</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>posix_mkfifo creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes. </desc>
</methodsynopsis>
<methodsynopsis function="posix_setegid">
  <type>bool</type>
  <methodname>posix_setegid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>gid</parameter>
  </methodparam>
  <desc> Set the effective group ID of the current process. This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function. </desc>
</methodsynopsis>
<methodsynopsis function="posix_seteuid">
  <type>bool</type>
  <methodname>posix_seteuid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc> Set the real user ID of the current process. This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function. </desc>
</methodsynopsis>
<methodsynopsis function="posix_setgid">
  <type>bool</type>
  <methodname>posix_setgid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>gid</parameter>
  </methodparam>
  <desc> Set the real group ID of the current process. This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function. The appropriate order of function calls is posix_setgid first, posix_setuid last. </desc>
</methodsynopsis>
<methodsynopsis function="posix_setpgid">
  <type>int</type>
  <methodname>posix_setpgid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pgid</parameter>
  </methodparam>
  <desc> Let the process pid join the process group pgid. See POSIX.1 and the setsid(2) manual page on your POSIX system for more informations on process groups and job control. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="posix_setsid">
  <type>int</type>
  <methodname>posix_setsid</methodname>
  <void/>
  <desc> Make the current process a session leader. See POSIX.1 and the setsid(2) manual page on your POSIX system for more information on process groups and job control. Returns the session id. </desc>
</methodsynopsis>
<methodsynopsis function="posix_setuid">
  <type>bool</type>
  <methodname>posix_setuid</methodname>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <desc> Set the real user ID of the current process. This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function. </desc>
</methodsynopsis>
<methodsynopsis function="posix_strerror">
  <type>string</type>
  <methodname>posix_strerror</methodname>
  <methodparam>
    <type>int</type>
    <parameter>errno</parameter>
  </methodparam>
  <desc> Returns the POSIX system error message associated with the given errno. If errno is 0, then the string "Success" is returned.  The function posix_get_last_error is used for retrieving the last POSIX errno. </desc>
</methodsynopsis>
<methodsynopsis function="posix_times">
  <type>array</type>
  <methodname>posix_times</methodname>
  <void/>
  <desc> Returns a hash of strings with information about the current process CPU usage. The indices of the hash are ticks - the number of clock ticks that have elapsed since reboot. utime - user time used by the current process. stime - system time used by the current process. cutime - user time used by current process and children. cstime - system time used by current process and children. </desc>
</methodsynopsis>
<methodsynopsis function="posix_ttyname">
  <type>string</type>
  <methodname>posix_ttyname</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fd</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="posix_uname">
  <type>array</type>
  <methodname>posix_uname</methodname>
  <void/>
  <desc> Returns a hash of strings with information about the system. The indices of the hash are sysname - operating system name (e.g. Linux) nodename - system name (e.g. valiant) release - operating system release (e.g. 2.2.10) version - operating system version (e.g. #4 Tue Jul 20 17:01:36 MEST 1999) machine - system architecture (e.g. i586) domainname - DNS domainname (e.g. example.com) </desc>
</methodsynopsis>
<methodsynopsis function="printer_abort">
  <type>void</type>
  <methodname>printer_abort</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> This function deletes the printers spool file. </desc>
</methodsynopsis>
<methodsynopsis function="printer_close">
  <type>void</type>
  <methodname>printer_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> This function closes the printer connection.  printer_close also closes the active device  context.  </desc>
</methodsynopsis>
<methodsynopsis function="printer_create_brush">
  <type>mixed</type>
  <methodname>printer_create_brush</methodname>
  <methodparam>
    <type>int</type>
    <parameter>style</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>color</parameter>
  </methodparam>
  <desc> The function creates a new brush and returns a handle to it. A brush  is used to fill shapes. For an example see  printer_select_brush. color  must be a color in RGB hex format, i.e. "000000" for black,   style must be one of the following constants: PRINTER_BRUSH_SOLID: creates a brush with a solid color. PRINTER_BRUSH_DIAGONAL: creates a brush with a 45-degree upward left-to-right hatch ( / ). PRINTER_BRUSH_CROSS: creates a brush with a cross hatch ( + ).  PRINTER_BRUSH_DIAGCROSS: creates a brush with a 45 cross hatch ( x ).           PRINTER_BRUSH_FDIAGONAL: creates a brush with a 45-degree downward left-to-right hatch ( \ ). PRINTER_BRUSH_HORIZONTAL: creates a brush with a horizontal hatch ( - ). PRINTER_BRUSH_VERTICAL: creates a brush with a vertical hatch ( | ). PRINTER_BRUSH_CUSTOM: creates a custom brush from an BMP file. The second parameter  is used to specify the BMP instead of the RGB color code. </desc>
</methodsynopsis>
<methodsynopsis function="printer_create_dc">
  <type>void</type>
  <methodname>printer_create_dc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function creates a new device context. A device context is used  to customize the graphic objects of the document.  handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_create_font">
  <type>mixed</type>
  <methodname>printer_create_font</methodname>
  <methodparam>
    <type>string</type>
    <parameter>face</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>font_weight</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>italic</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>underline</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>strikeout</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>orientation</parameter>
  </methodparam>
  <desc> The function creates a new font and returns a handle to it. A font is  used to draw text. For an example see  printer_select_font. face  must be a string specifying the font face. height  specifies the font height, and width the font  width. The font_weight specifies the font weight  (400 is normal), and can be one of the following predefined constants. PRINTER_FW_THIN: sets the font weight to thin (100). PRINTER_FW_ULTRALIGHT: sets the font weight to ultra light (200). PRINTER_FW_LIGHT: sets the font weight to light (300). PRINTER_FW_NORMAL: sets the font weight to normal (400). PRINTER_FW_MEDIUM: sets the font weight to medium (500). PRINTER_FW_BOLD: sets the font weight to bold (700). PRINTER_FW_ULTRABOLD: sets the font weight to ultra bold (800). PRINTER_FW_HEAVY: sets the font weight to heavy (900).             </desc>
</methodsynopsis>
<methodsynopsis function="printer_create_pen">
  <type>mixed</type>
  <methodname>printer_create_pen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>style</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>color</parameter>
  </methodparam>
  <desc> The function creates a new pen and returns a handle to it. A pen is  used to draw lines and curves. For an example see  printer_select_pen. color  must be a color in RGB hex format, i.e. "000000" for black,   width specifies the width of the pen whereas  style must be one of the following constants: PRINTER_PEN_SOLID: creates a solid pen. PRINTER_PEN_DASH: creates a dashed pen. PRINTER_PEN_DOT: creates a dotted pen. PRINTER_PEN_DASHDOT: creates a pen with dashes and dots. PRINTER_PEN_DASHDOTDOT: creates a pen with dashes and double dots. PRINTER_PEN_INVISIBLE: creates an invisible pen.  </desc>
</methodsynopsis>
<methodsynopsis function="printer_delete_brush">
  <type>bool</type>
  <methodname>printer_delete_brush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function deletes the selected brush. For an example see  printer_select_brush. &amp;amp;return.success; handle  must be a valid handle to a brush. </desc>
</methodsynopsis>
<methodsynopsis function="printer_delete_dc">
  <type>bool</type>
  <methodname>printer_delete_dc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function deletes the device context. &amp;amp;return.success; For an example see printer_create_dc.  handle  must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_delete_font">
  <type>bool</type>
  <methodname>printer_delete_font</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function deletes the selected font. For an example see  printer_select_font. &amp;amp;return.success;  handle must be a valid  handle to a font. </desc>
</methodsynopsis>
<methodsynopsis function="printer_delete_pen">
  <type>bool</type>
  <methodname>printer_delete_pen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function deletes the selected pen. For an example see  printer_select_pen. &amp;amp;return.success; handle must be a valid  handle to a pen. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_bmp">
  <type>void</type>
  <methodname>printer_draw_bmp</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> The function simply draws an bmp the bitmap  filename at position x,  y. handle must be a  valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_chord">
  <type>void</type>
  <methodname>printer_draw_chord</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad_x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad_y1</parameter>
  </methodparam>
  <desc> The function simply draws an chord. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_elipse">
  <type>void</type>
  <methodname>printer_draw_elipse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_y</parameter>
  </methodparam>
  <desc> The function simply draws an ellipse. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_line">
  <type>void</type>
  <methodname>printer_draw_line</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>printer_handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>from_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>from_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>to_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>to_y</parameter>
  </methodparam>
  <desc> The function simply draws a line from position  from_x, from_y to  position to_x, to_y  using the selected pen. printer_handle must  be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_pie">
  <type>void</type>
  <methodname>printer_draw_pie</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_x1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rec_y1</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad1_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad1_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad2_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rad2_y</parameter>
  </methodparam>
  <desc> The function simply draws an pie. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_rectangle">
  <type>void</type>
  <methodname>printer_draw_rectangle</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_y</parameter>
  </methodparam>
  <desc> The function simply draws a rectangle. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_roundrect">
  <type>void</type>
  <methodname>printer_draw_roundrect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>ul_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>lr_y</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> The function simply draws a rectangle with rounded corners. </desc>
</methodsynopsis>
<methodsynopsis function="printer_draw_text">
  <type>void</type>
  <methodname>printer_draw_text</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>printer_handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>text</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> The function simply draws text at position  x, y using the selected  font. printer_handle must be a valid handle to  a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_end_doc">
  <type>bool</type>
  <methodname>printer_end_doc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> Closes a new document in the printer spooler. The document  is now ready for printing. For an example see  printer_start_doc. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_end_page">
  <type>bool</type>
  <methodname>printer_end_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function closes the active page in the active document. For an  example see printer_start_doc. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_get_option">
  <type>mixed</type>
  <methodname>printer_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> The function retrieves the configuration setting of option. handle must be a valid handle to a printer. Take a look at printer_set_option for the settings that can  be retrieved, additionally the following settings can be retrieved: PRINTER_DEVICENAME returns the devicename of the printer. PRINTER_DRIVERVERSION returns the printer driver version. </desc>
</methodsynopsis>
<methodsynopsis function="printer_list">
  <type>array</type>
  <methodname>printer_list</methodname>
  <methodparam>
    <type>int</type>
    <parameter>enumtype</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <desc> The function enumerates available printers and their capabilities. level sets the level of information request.  Can be 1,2,4 or 5. enumtype must be one of the  following predefined constants: PRINTER_ENUM_LOCAL: enumerates the locally installed printers. PRINTER_ENUM_NAME: enumerates the printer of name, can be a server,  domain or print provider. PRINTER_ENUM_SHARED: this parameter can't be used alone, it has to be OR'ed with other  parameters, i.e. PRINTER_ENUM_LOCAL to detect the locally shared  printers. PRINTER_ENUM_DEFAULT: (Win9.x only) enumerates the default printer. PRINTER_ENUM_CONNECTIONS: (WinNT/2000 only) enumerates the printers to which the user has  made connections. PRINTER_ENUM_NETWORK: (WinNT/2000 only) enumerates network printers in the computer's  domain. Only valid if level is 1. PRINTER_ENUM_REMOTE: (WinNT/2000 only) enumerates network printers and print servers in the  computer's domain. Only valid if level is 1. </desc>
</methodsynopsis>
<methodsynopsis function="printer_logical_fontheight">
  <type>int</type>
  <methodname>printer_logical_fontheight</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <desc> The function calculates the logical font height of  height. handle must  be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_open">
  <type>mixed</type>
  <methodname>printer_open</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>devicename</parameter>
  </methodparam>
  <desc> This function tries to open a connection to the printer  devicename, and returns a handle on success  or &amp;amp;false; on failure.  </desc>
</methodsynopsis>
<methodsynopsis function="printer_select_brush">
  <type>void</type>
  <methodname>printer_select_brush</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>printer_handle</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>brush_handle</parameter>
  </methodparam>
  <desc> The function selects a brush as the active drawing object of the actual  device context. A brush is used to fill shapes. If you draw an rectangle  the brush is used to draw the shapes, while the pen is used to draw the  border. If you haven't selected a brush before drawing shapes, the shape won't  be filled. printer_handle must be a valid handle  to a printer. brush_handle must be a valid handle  to a brush. </desc>
</methodsynopsis>
<methodsynopsis function="printer_select_font">
  <type>void</type>
  <methodname>printer_select_font</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>printer_handle</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>font_handle</parameter>
  </methodparam>
  <desc> The function selects a font to draw text.  printer_handle must be a valid handle to a  printer. font_handle must be a valid handle  to a font. </desc>
</methodsynopsis>
<methodsynopsis function="printer_select_pen">
  <type>void</type>
  <methodname>printer_select_pen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>printer_handle</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>pen_handle</parameter>
  </methodparam>
  <desc> The function selects a pen as the active drawing object of the actual  device context. A pen is used to draw lines and curves. I.e. if you draw  a single line the pen is used. If you draw an rectangle the pen is used  to draw the borders, while the brush is used to fill the shape. If you haven't selected a pen before drawing shapes, the shape won't be  outlined. printer_handle must be a valid handle  to a printer. pen_handle must be a valid handle  to a pen. </desc>
</methodsynopsis>
<methodsynopsis function="printer_set_option">
  <type>bool</type>
  <methodname>printer_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> The function sets the following options for the current connection. handle must be a valid handle to a printer. For option can be one of the following constants: PRINTER_COPIES: sets how many copies should be printed, value  must be an integer.   PRINTER_MODE: specifies the type of data (text, raw or emf),  value must be a string. PRINTER_TITLE: specifies the name of the document, value  must be a string. PRINTER_ORIENTATION: specifies the orientation of the paper, value  can be either PRINTER_ORIENTATION_PORTRAIT or  PRINTER_ORIENTATION_LANDSCAPE PRINTER_RESOLUTION_Y: specifies the y-resolution in DPI, value  must be an integer. PRINTER_RESOLUTION_X: specifies the x-resolution in DPI, value  must be an integer. PRINTER_PAPER_FORMAT: specifies a predefined paper format, set value  to PRINTER_FORMAT_CUSTOM if you want to specify a custom format with  PRINTER_PAPER_WIDTH and PRINTER_PAPER_LENGTH. value  can be one of the following constants. PRINTER_FORMAT_CUSTOM: let's you specify a custom paper format.  PRINTER_FORMAT_LETTER: specifies standard letter format (8 1/2- by 11-inches). PRINTER_FORMAT_LETTER: specifies standard legal format (8 1/2- by 14-inches). PRINTER_FORMAT_A3: specifies standard A3 format (297- by 420-millimeters).  PRINTER_FORMAT_A4: specifies standard A4 format (210- by 297-millimeters). PRINTER_FORMAT_A5: specifies standard A5 format (148- by 210-millimeters). PRINTER_FORMAT_B4: specifies standard B4 format (250- by 354-millimeters). PRINTER_FORMAT_B5: specifies standard B5 format (182- by 257-millimeter). PRINTER_FORMAT_FOLIO: specifies standard FOLIO format (8 1/2- by 13-inch). PRINTER_PAPER_LENGTH: if PRINTER_PAPER_FORMAT is set to PRINTER_FORMAT_CUSTOM,  PRINTER_PAPER_LENGTH specifies a custom paper length in mm,  value must be an integer. PRINTER_PAPER_WIDTH: if PRINTER_PAPER_FORMAT is set to PRINTER_FORMAT_CUSTOM,  PRINTER_PAPER_WIDTH specifies a custom paper width in mm,  value must be an integer. PRINTER_SCALE: specifies the factor by which the printed output is to be scaled.  the page size is scaled from the physical page size by a factor  of scale/100. for example if you set the scale to 50, the output  would be half of its original size. value  must be an integer. PRINTER_BACKGROUND_COLOR: specifies the background color for the actual device context,  value must be a string containing the rgb  information in hex format i.e. "005533". PRINTER_TEXT_COLOR: specifies the text color for the actual device context,  value must be a string containing the rgb  information in hex format i.e. "005533". PRINTER_TEXT_ALIGN: specifies the text alignment for the actual device context,  value can be combined through OR'ing the  following constants: PRINTER_TA_BASELINE: text will be aligned at the base line. PRINTER_TA_BOTTOM: text will be aligned at the bottom. PRINTER_TA_TOP: text will be aligned at the top. PRINTER_TA_CENTER: text will be aligned at the center.   PRINTER_TA_LEFT: text will be aligned at the left.   PRINTER_TA_RIGHT: text will be aligned at the right.          </desc>
</methodsynopsis>
<methodsynopsis function="printer_start_doc">
  <type>bool</type>
  <methodname>printer_start_doc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>document</parameter>
  </methodparam>
  <desc> The function creates a new document in the printer spooler. A document  can contain multiple pages, it's used to schedule the print job in the  spooler. handle must be a valid handle to a  printer. The optional parameter document can be  used to set an alternative document name. </desc>
</methodsynopsis>
<methodsynopsis function="printer_start_page">
  <type>bool</type>
  <methodname>printer_start_page</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> The function creates a new page in the active document. For an  example see printer_start_doc. handle must be a valid handle to a printer. </desc>
</methodsynopsis>
<methodsynopsis function="printer_write">
  <type>bool</type>
  <methodname>printer_write</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>content</parameter>
  </methodparam>
  <desc> Writes content directly to the printer. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_add_to_personal">
  <type>int</type>
  <methodname>pspell_add_to_personal</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> pspell_add_to_personal ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_add_to_session">
  <type>int</type>
  <methodname>pspell_add_to_session</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="pspell_check">
  <type>bool</type>
  <methodname>pspell_check</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> pspell_check ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_clear_session">
  <type>int</type>
  <methodname>pspell_clear_session</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <desc> pspell_add_to_personal ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_create">
  <type>int</type>
  <methodname>pspell_config_create</methodname>
  <methodparam>
    <type>string</type>
    <parameter>language</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        spelling
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        jargon
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        encoding
       </parameter>
  </methodparam>
  <desc> The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.  </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_data_dir">
  <type>bool</type>
  <methodname>pspell_config_data_dir</methodname>
  <methodparam>
    <type>int</type>
    <parameter>conf</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="pspell_config_dict_dir">
  <type>bool</type>
  <methodname>pspell_config_dict_dir</methodname>
  <methodparam>
    <type>int</type>
    <parameter>conf</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>directory</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="pspell_config_ignore">
  <type>int</type>
  <methodname>pspell_config_ignore</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>n</parameter>
  </methodparam>
  <desc> pspell_config_ignore ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_mode">
  <type>int</type>
  <methodname>pspell_config_mode</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> The mode parameter is the mode in which spellchecker will work. There are several modes available: PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions) </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_personal">
  <type>int</type>
  <methodname>pspell_config_personal</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <desc> pspell_config_personal ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_repl">
  <type>int</type>
  <methodname>pspell_config_repl</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <desc> pspell_config_repl ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_runtogether">
  <type>int</type>
  <methodname>pspell_config_runtogether</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>flag</parameter>
  </methodparam>
  <desc> pspell_config_runtogether ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_config_save_repl">
  <type>int</type>
  <methodname>pspell_config_save_repl</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>flag</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="pspell_new_config">
  <type>int</type>
  <methodname>pspell_new_config</methodname>
  <methodparam>
    <type>int</type>
    <parameter>config</parameter>
  </methodparam>
  <desc> The config parameter is the one returned by pspell_config_create when the config was created. </desc>
</methodsynopsis>
<methodsynopsis function="pspell_new_personal">
  <type>int</type>
  <methodname>pspell_new_personal</methodname>
  <methodparam>
    <type>string</type>
    <parameter>personal</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>language</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        spelling
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        jargon
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        encoding
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        mode
       </parameter>
  </methodparam>
  <desc> The personal parameter specifies the file where words added to the personal list will be stored. It should be an absolute filename beginning with '/' because otherwise it will be relative to $HOME, which is "/root" for most systems, and is probably not what you want. </desc>
</methodsynopsis>
<methodsynopsis function="pspell_new">
  <type>int</type>
  <methodname>pspell_new</methodname>
  <methodparam>
    <type>string</type>
    <parameter>language</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        spelling
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        jargon
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>
        encoding
       </parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        mode
       </parameter>
  </methodparam>
  <desc> The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.  </desc>
</methodsynopsis>
<methodsynopsis function="pspell_save_wordlist">
  <type>int</type>
  <methodname>pspell_save_wordlist</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <desc> pspell_add_to_personal ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_store_replacement">
  <type>int</type>
  <methodname>pspell_store_replacement</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>misspelled</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>correct</parameter>
  </methodparam>
  <desc> pspell_store_replacement ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="pspell_suggest">
  <type>array</type>
  <methodname>pspell_suggest</methodname>
  <methodparam>
    <type>int</type>
    <parameter>dictionary_link</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>word</parameter>
  </methodparam>
  <desc> pspell_suggest example ";  }
}
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="qdom_error">
  <type>string</type>
  <methodname>qdom_error</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="qdom_tree">
  <type>QDomDocument</type>
  <methodname>qdom_tree</methodname>
  <methodparam>
    <type>string</type>
    <parameter>doc</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="rar_close">
  <type>bool</type>
  <methodname>rar_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rar_file</parameter>
  </methodparam>
  <desc> Close Rar archive and free all allocated resources. </desc>
</methodsynopsis>
<methodsynopsis function="rar_entry_get">
  <type>RarEntry</type>
  <methodname>rar_entry_get</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rar_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>entry_name</parameter>
  </methodparam>
  <desc> Get entry object from the Rar archive. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::extract">
  <type>bool</type>
  <methodname>Rar::extract</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dir</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filepath</parameter>
  </methodparam>
  <desc>Rar::extract extracts entry's data to the dir. It will create new file in the specified dir with the name identical to the entry's name. If parameter filepath is specified instead dir, Rar::extract will extract entry's data to the specified file. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getAttr">
  <type>int</type>
  <methodname>Rar::getAttr</methodname>
  <void/>
  <desc>Rar::getAttr returns attributes of the archive entry.  </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getCrc">
  <type>int</type>
  <methodname>Rar::getCrc</methodname>
  <void/>
  <desc>Rar::getCrc returns CRC of the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getFileTime">
  <type>string</type>
  <methodname>Rar::getFileTime</methodname>
  <void/>
  <desc>Rar::getFileTime returns entry last modification time as string in format YYYY-MM-DD HH:II:SS. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getHostOs">
  <type>int</type>
  <methodname>Rar::getHostOs</methodname>
  <void/>
  <desc>Rar::getHostOs return code of the host OS of the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getMethod">
  <type>int</type>
  <methodname>Rar::getMethod</methodname>
  <void/>
  <desc>Rar::getMethod returns number of the method used when adding current archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getName">
  <type>string</type>
  <methodname>Rar::getName</methodname>
  <void/>
  <desc>Rar::getName returns full name of the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getPackedSize">
  <type>int</type>
  <methodname>Rar::getPackedSize</methodname>
  <void/>
  <desc> Get packed size of the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getUnpackedSize">
  <type>int</type>
  <methodname>Rar::getUnpackedSize</methodname>
  <void/>
  <desc> Get unpacked size of the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="Rar::getVersion">
  <type>int</type>
  <methodname>Rar::getVersion</methodname>
  <void/>
  <desc> Get version of the archiver used to add the archive entry. </desc>
</methodsynopsis>
<methodsynopsis function="rar_list">
  <type>array</type>
  <methodname>rar_list</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>rar_file</parameter>
  </methodparam>
  <desc> Get entries list from the Rar archive. </desc>
</methodsynopsis>
<methodsynopsis function="rar_open">
  <type>resource</type>
  <methodname>rar_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <desc> Open specified Rar archive and return Rar file resource. </desc>
</methodsynopsis>
<methodsynopsis function="readline_add_history">
  <type>void</type>
  <methodname>readline_add_history</methodname>
  <methodparam>
    <type>string</type>
    <parameter>line</parameter>
  </methodparam>
  <desc> This function adds a line to the command line history. </desc>
</methodsynopsis>
<methodsynopsis function="readline_callback_handler_install">
  <type>bool</type>
  <methodname>readline_callback_handler_install</methodname>
  <methodparam>
    <type>string</type>
    <parameter>prompt</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <desc> Sets up a readline callback interface then prints prompt and immediately returns. The callback function takes one parameter; the user input returned. Calling this function twice without removing the previous callback interface will automatically and conveniently overwrite the old interface. </desc>
</methodsynopsis>
<methodsynopsis function="readline_callback_handler_remove">
  <type>bool</type>
  <methodname>readline_callback_handler_remove</methodname>
  <void/>
  <desc> Removes a previously installed callback handler and restores terminal settings. </desc>
</methodsynopsis>
<methodsynopsis function="readline_callback_read_char">
  <type>void</type>
  <methodname>readline_callback_read_char</methodname>
  <void/>
  <desc> Reads a character of user input. When a line is received, this function informs the readline callback interface installed using readline_callback_handler_install that a line is ready for input. </desc>
</methodsynopsis>
<methodsynopsis function="readline_clear_history">
  <type>bool</type>
  <methodname>readline_clear_history</methodname>
  <void/>
  <desc> This function clears the entire command line history. </desc>
</methodsynopsis>
<methodsynopsis function="readline_completion_function">
  <type>bool</type>
  <methodname>readline_completion_function</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>function</parameter>
  </methodparam>
  <desc> This function registers a completion function.  You must supply the name of an existing function which accepts a partial command line and returns an array of possible matches.  This is the same kind of functionality you'd get if you hit your tab key while using Bash. </desc>
</methodsynopsis>
<methodsynopsis function="readline_info">
  <type>mixed</type>
  <methodname>readline_info</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>varname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>newvalue</parameter>
  </methodparam>
  <desc> If called with no parameters, this function returns an array of values for all the setting readline uses.  The elements will be indexed by the following values: done, end, erase_empty_line, library_version, line_buffer, mark, pending_input, point, prompt, readline_name, and terminal_name. </desc>
</methodsynopsis>
<methodsynopsis function="readline_list_history">
  <type>array</type>
  <methodname>readline_list_history</methodname>
  <void/>
  <desc> This function returns an array of the entire command line history.  The elements are indexed by integers starting at zero. </desc>
</methodsynopsis>
<methodsynopsis function="readline_on_new_line">
  <type>void</type>
  <methodname>readline_on_new_line</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="readline_read_history">
  <type>bool</type>
  <methodname>readline_read_history</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> This function reads a command history from a file. </desc>
</methodsynopsis>
<methodsynopsis function="readline_redisplay">
  <type>void</type>
  <methodname>readline_redisplay</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="readline_write_history">
  <type>bool</type>
  <methodname>readline_write_history</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> This function writes the command history to a file. </desc>
</methodsynopsis>
<methodsynopsis function="readline">
  <type>string</type>
  <methodname>readline</methodname>
  <methodparam>
    <type>string</type>
    <parameter>prompt</parameter>
  </methodparam>
  <desc> This function returns a single string from the user.  You may specify a string with which to prompt the user.  The line returned has the ending newline removed.  You must add this line to the history yourself using readline_add_history. </desc>
</methodsynopsis>
<methodsynopsis function="recode_file">
  <type>bool</type>
  <methodname>recode_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>request</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>output</parameter>
  </methodparam>
  <desc> Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request.  Returns &amp;amp;false;, if unable to comply, &amp;amp;true; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="recode_string">
  <type>string</type>
  <methodname>recode_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>request</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Recode the string string according to the recode request request. Returns the recoded string or &amp;amp;false;, if unable to perform the recode request. </desc>
</methodsynopsis>
<methodsynopsis function="ereg_replace">
  <type>string</type>
  <methodname>ereg_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>replacement</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> For example, the following code snippet prints "This was a test" three times: </desc>
</methodsynopsis>
<methodsynopsis function="ereg">
  <type>int</type>
  <methodname>ereg</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">regs</parameter>
  </methodparam>
  <desc>preg_match, which uses a Perl-compatible  regular expression syntax, is often a faster alternative to ereg. </desc>
</methodsynopsis>
<methodsynopsis function="eregi_replace">
  <type>string</type>
  <methodname>eregi_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>replacement</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> This function is identical to ereg_replace except that this ignores case distinction when matching alphabetic characters. </desc>
</methodsynopsis>
<methodsynopsis function="eregi">
  <type>int</type>
  <methodname>eregi</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">regs</parameter>
  </methodparam>
  <desc> This function is identical to ereg except that this ignores case distinction when matching alphabetic characters. </desc>
</methodsynopsis>
<methodsynopsis function="split">
  <type>array</type>
  <methodname>split</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <desc>preg_split, which uses a Perl-compatible regular expression syntax, is often a faster alternative to split.  If you don't require the power of regular expressions, it is faster to use explode, which doesn't incur the overhead of the regular expression engine. </desc>
</methodsynopsis>
<methodsynopsis function="spliti">
  <type>array</type>
  <methodname>spliti</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pattern</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <desc> This function is identical to split except that this ignores case distinction when matching alphabetic characters. </desc>
</methodsynopsis>
<methodsynopsis function="sql_regcase">
  <type>string</type>
  <methodname>sql_regcase</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns a valid regular expression which will match string, ignoring case. This expression is string with each alphabetic character converted to a bracket expression; this bracket expression contains that character's uppercase and lowercase form.  Other characters remain unchanged. </desc>
</methodsynopsis>
<methodsynopsis function="ftok">
  <type>int</type>
  <methodname>ftok</methodname>
  <methodparam>
    <type>string</type>
    <parameter>pathname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>proj</parameter>
  </methodparam>
  <desc> The function converts the pathname of an existing accessible file and a project identifier (proj) into a integer for use with for example shmop_open and other System V IPC keys. The proj parameter should be a one character string. </desc>
</methodsynopsis>
<methodsynopsis function="msg_get_queue">
  <type>resource</type>
  <methodname>msg_get_queue</methodname>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>perms</parameter>
  </methodparam>
  <desc>msg_get_queue returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms (default: 0666). A second call to msg_get_queue for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue. If the message queue already exists, the perms will be ignored. </desc>
</methodsynopsis>
<methodsynopsis function="msg_receive">
  <type>bool</type>
  <methodname>msg_receive</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>queue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>desiredmsgtype</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter role="reference">msgtype</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>maxsize</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>unserialize</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errorcode</parameter>
  </methodparam>
  <desc>msg_receive will receive the first message from the specified queue of the type specified by desiredmsgtype. The type of the message that was received will be stored in msgtype. The maximum size of message to be accepted is specified by the maxsize; if the message in the queue is larger than this size the function will fail (unless you set flags as described below). The received message will be stored in message, unless there were errors receiving the message, in which case the optional errorcode will be set to the value of the system errno variable to help you identify the cause. </desc>
</methodsynopsis>
<methodsynopsis function="msg_remove_queue">
  <type>bool</type>
  <methodname>msg_remove_queue</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>queue</parameter>
  </methodparam>
  <desc>msg_remove_queue destroys the message queue specified by the queue.  Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it. </desc>
</methodsynopsis>
<methodsynopsis function="msg_send">
  <type>bool</type>
  <methodname>msg_send</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>queue</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>msgtype</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>message</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>serialize</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>blocking</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errorcode</parameter>
  </methodparam>
  <desc>msg_send sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue. </desc>
</methodsynopsis>
<methodsynopsis function="msg_set_queue">
  <type>bool</type>
  <methodname>msg_set_queue</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>queue</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>msg_set_queue allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure. You specify the values you require by setting the value of the keys that you require in the data array. </desc>
</methodsynopsis>
<methodsynopsis function="msg_stat_queue">
  <type>array</type>
  <methodname>msg_stat_queue</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>queue</parameter>
  </methodparam>
  <desc>msg_stat_queue returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received. </desc>
</methodsynopsis>
<methodsynopsis function="sem_acquire">
  <type>bool</type>
  <methodname>sem_acquire</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sem_identifier</parameter>
  </methodparam>
  <desc>sem_acquire blocks (if necessary) until the semaphore can be acquired.  A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded. sem_identifier is a semaphore ressource, obtained from sem_get. </desc>
</methodsynopsis>
<methodsynopsis function="sem_get">
  <type>resource</type>
  <methodname>sem_get</methodname>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>max_acquire</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>perm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>auto_release</parameter>
  </methodparam>
  <desc>sem_get returns an id that can be used to access the System V semaphore with the given key. The semaphore is created if necessary using the permission bits specified in perm (defaults to 0666).  The number of processes that can acquire the semaphore simultaneously is set to max_acquire (defaults to 1).  Actually this value is set only if the process finds it is the only process currently attached to the semaphore. </desc>
</methodsynopsis>
<methodsynopsis function="sem_release">
  <type>bool</type>
  <methodname>sem_release</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sem_identifier</parameter>
  </methodparam>
  <desc>sem_release releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated. </desc>
</methodsynopsis>
<methodsynopsis function="sem_remove">
  <type>bool</type>
  <methodname>sem_remove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sem_identifier</parameter>
  </methodparam>
  <desc>sem_remove removes the semaphore sem_identifier if it has been created by sem_get,  otherwise generates a warning. </desc>
</methodsynopsis>
<methodsynopsis function="shm_attach">
  <type>int</type>
  <methodname>shm_attach</methodname>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>memsize</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>perm</parameter>
  </methodparam>
  <desc>shm_attach returns an id that that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize (default: sysvshm.init_mem in the &amp;amp;php.ini;, otherwise 10000 bytes) and the optional perm-bits perm (default: 0666). </desc>
</methodsynopsis>
<methodsynopsis function="shm_detach">
  <type>bool</type>
  <methodname>shm_detach</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shm_identifier</parameter>
  </methodparam>
  <desc>shm_detach disconnects from the shared memory given by the shm_identifier created by shm_attach. Remember, that shared memory still exist in the Unix system and the data is still present. </desc>
</methodsynopsis>
<methodsynopsis function="shm_get_var">
  <type>mixed</type>
  <methodname>shm_get_var</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>variable_key</parameter>
  </methodparam>
  <desc>shm_get_var returns the variable with a given variable_key, in the shared memory segment identified by shm_identifier. shm_identifier was obtained from  shm_attach. The variable is still present in the shared memory. </desc>
</methodsynopsis>
<methodsynopsis function="shm_put_var">
  <type>bool</type>
  <methodname>shm_put_var</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>variable_key</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>variable</parameter>
  </methodparam>
  <desc>shm_put_var inserts or updates the variable with the given variable_key.  All variable-types are supported. </desc>
</methodsynopsis>
<methodsynopsis function="shm_remove_var">
  <type>int</type>
  <methodname>shm_remove_var</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shm_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>variable_key</parameter>
  </methodparam>
  <desc> Removes a variable with a given variable_key and frees the occupied memory. </desc>
</methodsynopsis>
<methodsynopsis function="shm_remove">
  <type>int</type>
  <methodname>shm_remove</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shm_identifier</parameter>
  </methodparam>
  <desc>shm_remove removes the shared memory  shm_identifier. All data will be destroyed. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_affected_rows">
  <type>int</type>
  <methodname>sesam_affected_rows</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>result_id is a valid result id returned by sesam_query. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_commit">
  <type>bool</type>
  <methodname>sesam_commit</methodname>
  <void/>
  <desc> Returns: &amp;amp;true; on success, &amp;amp;false; on errors </desc>
</methodsynopsis>
<methodsynopsis function="sesam_connect">
  <type>bool</type>
  <methodname>sesam_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>catalog</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <desc> Returns &amp;amp;true; if a connection to the SESAM database was made, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_diagnostic">
  <type>array</type>
  <methodname>sesam_diagnostic</methodname>
  <void/>
  <desc> Returns an associative array of status and return codes for the last SQL query/statement/command.  Elements of the array are: Status information returned by sesam_diagnosticElementContents$array["sqlstate"] 5 digit SQL return code (see the SESAM manual for the description of the possible values of SQLSTATE) $array["rowcount"] number of affected rows in last update/insert/delete (set after "immediate" statements only) $array["errmsg"] "human readable" error message string (set after errors only) $array["errcol"] error column number of previous error (0-based; or -1 if undefined. Set after errors only) $array["errlin"] error line number of previous error (0-based; or -1 if undefined. Set after errors only) </desc>
</methodsynopsis>
<methodsynopsis function="sesam_disconnect">
  <type>bool</type>
  <methodname>sesam_disconnect</methodname>
  <void/>
  <desc> Returns: always &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_errormsg">
  <type>string</type>
  <methodname>sesam_errormsg</methodname>
  <void/>
  <desc> Returns the SESAM error message associated with the most recent SESAM error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_execimm">
  <type>string</type>
  <methodname>sesam_execimm</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc> Returns: A SESAM "result identifier" on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_fetch_array">
  <type>array</type>
  <methodname>sesam_fetch_array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_fetch_result">
  <type>mixed</type>
  <methodname>sesam_fetch_result</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>max_rows</parameter>
  </methodparam>
  <desc> Returns a mixed array with the query result entries, optionally limited to a maximum of max_rows rows. Note that both row and column indexes are zero-based. Mixed result set returned by sesam_fetch_resultArray ElementContentsint $arr["count"] number of columns in result set (or zero if this was an "immediate" query) int $arr["rows"] number of rows in result set (between zero and max_rows) bool $arr["truncated"] &amp;amp;true; if the number of rows was at least max_rows, &amp;amp;false; otherwise. Note that even when this is &amp;amp;true;, the next sesam_fetch_result call may return zero rows because there are no more result entries. mixed $arr[col][row] result data for all the fields at row(row) and column(col), (where the integer index row is between 0 and $arr["rows"]-1, and col is between 0 and $arr["count"]-1). Fields may be empty, so you must check for the existence of a field by using the php isset function. The type of the returned fields depend on the respective SQL type declared for its column (see SESAM overview for the conversions applied). SESAM "multiple fields" are "inlined" and treated like a sequence of columns. Note that the amount of memory used up by a large query may be gigantic. Use the max_rows parameter to limit the maximum number of rows returned, unless you are absolutely sure that your result will not use up all available memory. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_fetch_row">
  <type>array</type>
  <methodname>sesam_fetch_row</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_field_array">
  <type>array</type>
  <methodname>sesam_field_array</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>result_id is a valid result id returned by sesam_query. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_field_name">
  <type>int</type>
  <methodname>sesam_field_name</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>index</parameter>
  </methodparam>
  <desc> Returns the name of a field (i.e., the column name) in the result set, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_free_result">
  <type>int</type>
  <methodname>sesam_free_result</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Releases resources for the query associated with result_id.  Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_num_fields">
  <type>int</type>
  <methodname>sesam_num_fields</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> After calling sesam_query with a "select type" query, this function gives you the number of columns in the result.  Returns an integer describing the total number of columns (aka.  fields) in the current result_id result set or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_query">
  <type>string</type>
  <methodname>sesam_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>scrollable</parameter>
  </methodparam>
  <desc> Returns: A SESAM "result identifier" on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sesam_rollback">
  <type>bool</type>
  <methodname>sesam_rollback</methodname>
  <void/>
  <desc> Returns: &amp;amp;true; on success, &amp;amp;false; on errors </desc>
</methodsynopsis>
<methodsynopsis function="sesam_seek_row">
  <type>bool</type>
  <methodname>sesam_seek_row</methodname>
  <methodparam>
    <type>string</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>whence</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>result_id is a valid result id (select type queries only, and only if a "scrollable" cursor was requested when calling sesam_query). </desc>
</methodsynopsis>
<methodsynopsis function="sesam_settransaction">
  <type>bool</type>
  <methodname>sesam_settransaction</methodname>
  <methodparam>
    <type>int</type>
    <parameter>isolation_level</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>read_only</parameter>
  </methodparam>
  <desc> Returns: &amp;amp;true; if the values are valid, and the settransaction operation was successful, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="session_cache_expire">
  <type>int</type>
  <methodname>session_cache_expire</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>new_cache_expire</parameter>
  </methodparam>
  <desc>session_cache_expire returns the current setting of session.cache_expire. The value returned should be read in minutes, defaults to 180. If new_cache_expire is given, the current cache expire is replaced with new_cache_expire. </desc>
</methodsynopsis>
<methodsynopsis function="session_cache_limiter">
  <type>string</type>
  <methodname>session_cache_limiter</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>cache_limiter</parameter>
  </methodparam>
  <desc>session_cache_limiter returns the name of the current cache limiter. If cache_limiter is specified, the name of the current cache limiter is changed to the new value. </desc>
</methodsynopsis>
<methodsynopsis function="session_decode">
  <type>bool</type>
  <methodname>session_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>session_decode decodes the session data in data, setting variables stored in the session. </desc>
</methodsynopsis>
<methodsynopsis function="session_destroy">
  <type>bool</type>
  <methodname>session_destroy</methodname>
  <void/>
  <desc> In order to kill the session altogether, like to log the user out, the session id must also be unset. If a cookie is used to propagate the  session id (default behavior), then the session cookie must be deleted.   setcookie may be used for that. </desc>
</methodsynopsis>
<methodsynopsis function="session_encode">
  <type>string</type>
  <methodname>session_encode</methodname>
  <void/>
  <desc>session_encode returns a string with the contents of the current session encoded within. </desc>
</methodsynopsis>
<methodsynopsis function="session_get_cookie_params">
  <type>array</type>
  <methodname>session_get_cookie_params</methodname>
  <void/>
  <desc> The session_get_cookie_params function returns an array with the current session cookie information, the array contains the following items: "lifetime" -  The lifetime of the cookie in seconds. "path" -  The path where information is stored. "domain" -  The domain of the cookie. "secure" -  The cookie should only be sent over secure connections. (This item was added in PHP 4.0.4.) </desc>
</methodsynopsis>
<methodsynopsis function="session_id">
  <type>string</type>
  <methodname>session_id</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>id</parameter>
  </methodparam>
  <desc>session_id returns the session id for the current session. </desc>
</methodsynopsis>
<methodsynopsis function="session_is_registered">
  <type>bool</type>
  <methodname>session_is_registered</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>session_is_registered returns &amp;amp;true; if there is a global variable with the name name registered in the current session. </desc>
</methodsynopsis>
<methodsynopsis function="session_module_name">
  <type>string</type>
  <methodname>session_module_name</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>module</parameter>
  </methodparam>
  <desc>session_module_name returns the name of the current session module. If module is specified, that module will be used instead. </desc>
</methodsynopsis>
<methodsynopsis function="session_name">
  <type>string</type>
  <methodname>session_name</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>session_name returns the name of the current session. If name is specified, the name of the current session is changed to its value. </desc>
</methodsynopsis>
<methodsynopsis function="session_regenerate_id">
  <type>bool</type>
  <methodname>session_regenerate_id</methodname>
  <void/>
  <desc>session_regenerate_id will replace the current session id with a new one, and keep the current session information. </desc>
</methodsynopsis>
<methodsynopsis function="session_register">
  <type>bool</type>
  <methodname>session_register</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>session_register accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register registers the global variable with that name in the current session. </desc>
</methodsynopsis>
<methodsynopsis function="session_save_path">
  <type>string</type>
  <methodname>session_save_path</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc>session_save_path returns the path of the current directory used to save session data. If path is specified, the path to which data is saved will be changed. session_save_path needs to be called before session_start for that purpose. On some operating systems, you may want to specify a path on a filesystem that handles lots of small files efficiently. For example, on Linux, reiserfs may provide better performance than ext2fs. </desc>
</methodsynopsis>
<methodsynopsis function="session_set_cookie_params">
  <type>void</type>
  <methodname>session_set_cookie_params</methodname>
  <methodparam>
    <type>int</type>
    <parameter>lifetime</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>secure</parameter>
  </methodparam>
  <desc> Set cookie parameters defined in the &amp;amp;php.ini; file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params for every request and before session_start is called. </desc>
</methodsynopsis>
<methodsynopsis function="session_set_save_handler">
  <type>bool</type>
  <methodname>session_set_save_handler</methodname>
  <methodparam>
    <type>string</type>
    <parameter>open</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>close</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>read</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>write</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>destroy</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>gc</parameter>
  </methodparam>
  <desc>session_set_save_handler sets the user-level session storage functions which are used for storing and retrieving data associated with a session.  This is most useful when a storage method other than those supplied by PHP sessions is preferred.  i.e. Storing the session data in a local database. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="session_start">
  <type>bool</type>
  <methodname>session_start</methodname>
  <void/>
  <desc> If you are using cookie-based sessions, you must call session_start before anything is outputted to the browser. </desc>
</methodsynopsis>
<methodsynopsis function="session_unregister">
  <type>bool</type>
  <methodname>session_unregister</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>session_unregister unregisters the global variable named name from the current session. </desc>
</methodsynopsis>
<methodsynopsis function="session_unset">
  <type>void</type>
  <methodname>session_unset</methodname>
  <void/>
  <desc> The session_unset function frees all session variables currently registered. </desc>
</methodsynopsis>
<methodsynopsis function="session_write_close">
  <type>void</type>
  <methodname>session_write_close</methodname>
  <void/>
  <desc> End the current session and store session data. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_close">
  <type>int</type>
  <methodname>shmop_close</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shmid</parameter>
  </methodparam>
  <desc>shmop_close is used to close a shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_delete">
  <type>int</type>
  <methodname>shmop_delete</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shmid</parameter>
  </methodparam>
  <desc>shmop_delete is used to delete a shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_open">
  <type>int</type>
  <methodname>shmop_open</methodname>
  <methodparam>
    <type>int</type>
    <parameter>key</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>size</parameter>
  </methodparam>
  <desc>shmop_open can create or open a shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_read">
  <type>string</type>
  <methodname>shmop_read</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shmid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>count</parameter>
  </methodparam>
  <desc>shmop_read will read a string from shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_size">
  <type>int</type>
  <methodname>shmop_size</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shmid</parameter>
  </methodparam>
  <desc>shmop_size is used to get the size, in bytes of the shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="shmop_write">
  <type>int</type>
  <methodname>shmop_write</methodname>
  <methodparam>
    <type>int</type>
    <parameter>shmid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>shmop_write will write a string into shared memory block. </desc>
</methodsynopsis>
<methodsynopsis function="SimpleXMLElement-&gt;asXML">
  <type>string</type>
  <methodname>SimpleXMLElement-&gt;asXML</methodname>
  <void/>
  <desc> The asXML method formats the parent object's data in XML version 1.0. </desc>
</methodsynopsis>
<methodsynopsis function="simplexml_element-&gt;attributes">
  <type>SimpleXMLElement</type>
  <methodname>simplexml_element-&gt;attributes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function provides the attributes and values defined within an xml tag. </desc>
</methodsynopsis>
<methodsynopsis function="simplexml_element-&gt;children">
  <type>SimpleXMLElement</type>
  <methodname>simplexml_element-&gt;children</methodname>
  <void/>
  <desc> This method finds the children of the element of which it is a member. The result follows normal iteration rules. </desc>
</methodsynopsis>
<methodsynopsis function="SimpleXMLElement-&gt;xpath">
  <type>array</type>
  <methodname>SimpleXMLElement-&gt;xpath</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
  <desc> The xpath method searches the SimpleXML node for children matching the Xpath path. It always returns an array of SimpleXMLElement objects. </desc>
</methodsynopsis>
<methodsynopsis function="simplexml_import_dom">
  <type>SimpleXMLElement</type>
  <methodname>simplexml_import_dom</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>node</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <desc> This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element. If any errors occur,  it returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="simplexml_load_file">
  <type>object</type>
  <methodname>simplexml_load_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function will convert the well-formed XML document in the file specified by filename to an object of class SimpleXMLElement. If any errors occur during file access or interpretation, the function returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="simplexml_load_string">
  <type>object</type>
  <methodname>simplexml_load_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function will take the well-formed xml string  data and return an object of class SimpleXMLElement with properties containing the data held within the xml document. If any errors occur, it returns &amp;amp;false;. </desc>
</methodsynopsis>
<methodsynopsis function="snmp_get_quick_print">
  <type>bool</type>
  <methodname>snmp_get_quick_print</methodname>
  <void/>
  <desc> Returns the current value stored in the UCD Library for quick_print.   quick_print is off by default. snmp_get_quick_print example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="snmp_get_valueretrieval">
  <type>int</type>
  <methodname>snmp_get_valueretrieval</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="snmp_read_mib">
  <type>int</type>
  <methodname>snmp_read_mib</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="snmp_set_enum_print">
  <type>void</type>
  <methodname>snmp_set_enum_print</methodname>
  <methodparam>
    <type>int</type>
    <parameter>enum_print</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="snmp_set_oid_numeric_print">
  <type>void</type>
  <methodname>snmp_set_oid_numeric_print</methodname>
  <methodparam>
    <type>int</type>
    <parameter>oid_numeric_print</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="snmp_set_quick_print">
  <type>void</type>
  <methodname>snmp_set_quick_print</methodname>
  <methodparam>
    <type>bool</type>
    <parameter>quick_print</parameter>
  </methodparam>
  <desc> Sets the value of quick_print within the UCD SNMP library.  When this is set (1), the SNMP library will return 'quick printed' values.  This means that just the value will be printed.  When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID).  Additionally,  if quick_print is not enabled, the library prints additional hex values  for all strings of three characters or less. </desc>
</methodsynopsis>
<methodsynopsis function="snmp_set_valueretrieval">
  <type>int</type>
  <methodname>snmp_set_valueretrieval</methodname>
  <methodparam>
    <type>int</type>
    <parameter>method</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="snmpget">
  <type>string</type>
  <methodname>snmpget</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
  <desc> Returns SNMP object value on success and &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="snmpgetnext">
  <type>string</type>
  <methodname>snmpgetnext</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="snmprealwalk">
  <type>array</type>
  <methodname>snmprealwalk</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="snmpset">
  <type>bool</type>
  <methodname>snmpset</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
  <desc> Sets the specified SNMP object value, returning &amp;amp;true; on success and &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="snmpwalk">
  <type>array</type>
  <methodname>snmpwalk</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
  <desc> Returns an array of SNMP object values starting from the object_id as root and &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="snmpwalkoid">
  <type>array</type>
  <methodname>snmpwalkoid</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>community</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>object_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>retries</parameter>
  </methodparam>
  <desc> Returns an associative array with object ids and their respective object value starting from the object_id as root and &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="is_soap_fault">
  <type>bool</type>
  <methodname>is_soap_fault</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>obj</parameter>
  </methodparam>
  <desc> This function is useful when you like to check if the SOAP call failed, but don't like to use exceptions. To use it you must create a  SoapClient object with the exceptions option set to zero or &amp;amp;false;. In this case, the SOAP method will return a special  SoapFault object which encapsulates the fault  details (faultcode, faultstring, faultactor and faultdetails). </desc>
</methodsynopsis>
<methodsynopsis function="__call">
  <type>mixed</type>
  <methodname>__call</methodname>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>arguments</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>input_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>output_headers</parameter>
  </methodparam>
  <desc> This method is deprecated. Use  instead of it. </desc>
</methodsynopsis>
<methodsynopsis function="__doRequest">
  <type>string</type>
  <methodname>__doRequest</methodname>
  <methodparam>
    <type>string</type>
    <parameter>request</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>location</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>action</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>version</parameter>
  </methodparam>
  <desc> Performs SOAP request over HTTP. </desc>
</methodsynopsis>
<methodsynopsis function="__getFunctions">
  <type>array</type>
  <methodname>__getFunctions</methodname>
  <void/>
  <desc> Returns the list of SOAP functions. </desc>
</methodsynopsis>
<methodsynopsis function="__getLastRequest">
  <type>string</type>
  <methodname>__getLastRequest</methodname>
  <void/>
  <desc> This method works only if the SoapClient object was created with the trace option. </desc>
</methodsynopsis>
<methodsynopsis function="__getLastRequestHeaders">
  <type>string</type>
  <methodname>__getLastRequestHeaders</methodname>
  <void/>
  <desc> This method works only if the SoapClient object was created with the trace option. </desc>
</methodsynopsis>
<methodsynopsis function="__getLastResponse">
  <type>string</type>
  <methodname>__getLastResponse</methodname>
  <void/>
  <desc> This method works only if the SoapClient object was created with the trace option. </desc>
</methodsynopsis>
<methodsynopsis function="__getLastResponseHeaders">
  <type>string</type>
  <methodname>__getLastResponseHeaders</methodname>
  <void/>
  <desc> This method works only if the SoapClient object was created with the trace option. </desc>
</methodsynopsis>
<methodsynopsis function="__getTypes">
  <type>array</type>
  <methodname>__getTypes</methodname>
  <void/>
  <desc> This function works only in WSDL mode. </desc>
</methodsynopsis>
<methodsynopsis function="__setCookie">
  <type>void</type>
  <methodname>__setCookie</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Defines a cookie to be sent along with the SOAP requests. </desc>
</methodsynopsis>
<methodsynopsis function="__soapCall">
  <type>mixed</type>
  <methodname>__soapCall</methodname>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>arguments</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>input_headers</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>output_headers</parameter>
  </methodparam>
  <desc> This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, you can simply call SOAP functions as SoapClient  methods. This method useful in non-WSDL mode when soapaction  is unknown, uri differs from the default or when sending and/or receiving SOAP Headers. </desc>
</methodsynopsis>
<methodsynopsis function="addFunction">
  <type>void</type>
  <methodname>addFunction</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>functions</parameter>
  </methodparam>
  <desc> Exports one or more functions for remote clients. </desc>
</methodsynopsis>
<methodsynopsis function="fault">
  <type>void</type>
  <methodname>fault</methodname>
  <methodparam>
    <type>string</type>
    <parameter>code</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>actor</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>details</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> </desc>
</methodsynopsis>
<methodsynopsis function="getFunctions">
  <type>array</type>
  <methodname>getFunctions</methodname>
  <void/>
  <desc> This method returns the list of all functions added by  or  . </desc>
</methodsynopsis>
<methodsynopsis function="handle">
  <type>void</type>
  <methodname>handle</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>soap_request</parameter>
  </methodparam>
  <desc> Processes a SOAP request, calls necessary functions, and sends a response  back. </desc>
</methodsynopsis>
<methodsynopsis function="setClass">
  <type>void</type>
  <methodname>setClass</methodname>
  <methodparam>
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <desc> Exports all methods from specified class. </desc>
</methodsynopsis>
<methodsynopsis function="setPersistence">
  <type>void</type>
  <methodname>setPersistence</methodname>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> This function allows saving data between requests in a PHP session. It works only with a server that exports functions from a class with . </desc>
</methodsynopsis>
<methodsynopsis function="use_soap_error_handler">
  <type>void</type>
  <methodname>use_soap_error_handler</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>handler</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="socket_accept">
  <type>resource</type>
  <methodname>socket_accept</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc> After the socket socket has been created using socket_create, bound to a name with socket_bind, and told to listen for connections with socket_listen, this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking or socket_set_nonblock, &amp;amp;false; will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="socket_bind">
  <type>bool</type>
  <methodname>socket_bind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc> Binds the name given in address to the socket described by socket. </desc>
</methodsynopsis>
<methodsynopsis function="socket_clear_error">
  <type>void</type>
  <methodname>socket_clear_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc> This function clears the error code on the given socket or the global last socket error. </desc>
</methodsynopsis>
<methodsynopsis function="socket_close">
  <type>void</type>
  <methodname>socket_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc>socket_close closes the socket resource given by socket. </desc>
</methodsynopsis>
<methodsynopsis function="socket_connect">
  <type>bool</type>
  <methodname>socket_connect</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc> Initiates a connection using the socket resource socket, which must be a valid socket resource created with socket_create. </desc>
</methodsynopsis>
<methodsynopsis function="socket_create_listen">
  <type>resource</type>
  <methodname>socket_create_listen</methodname>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>backlog</parameter>
  </methodparam>
  <desc> This function is meant to ease the task of creating a new socket which only listens to accept new connections. </desc>
</methodsynopsis>
<methodsynopsis function="socket_create_pair">
  <type>bool</type>
  <methodname>socket_create_pair</methodname>
  <methodparam>
    <type>int</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>protocol</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">fd</parameter>
  </methodparam>
  <desc>socket_create_pair creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication). </desc>
</methodsynopsis>
<methodsynopsis function="socket_create">
  <type>resource</type>
  <methodname>socket_create</methodname>
  <methodparam>
    <type>int</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc> Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server. </desc>
</methodsynopsis>
<methodsynopsis function="socket_get_option">
  <type>mixed</type>
  <methodname>socket_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>optname</parameter>
  </methodparam>
  <desc> The socket_get_option function retrieves the value for the option specified by the optname parameter for the socket specified by the socket parameter. socket_get_option will return &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="socket_getpeername">
  <type>bool</type>
  <methodname>socket_getpeername</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">addr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">port</parameter>
  </methodparam>
  <desc> If the given socket is of type AF_INET or AF_INET6, socket_getpeername  will return the peers (remote) IP address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in the  address parameter and, if the optional  port parameter is present, also the associated port. </desc>
</methodsynopsis>
<methodsynopsis function="socket_getsockname">
  <type>bool</type>
  <methodname>socket_getsockname</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">addr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">port</parameter>
  </methodparam>
  <desc> If the given socket is of type AF_INET or AF_INET6, socket_getsockname  will return the local IP address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in the  address parameter and, if the optional  port parameter is present, also the associated port. </desc>
</methodsynopsis>
<methodsynopsis function="socket_last_error">
  <type>int</type>
  <methodname>socket_last_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc> This function returns a socket error code. </desc>
</methodsynopsis>
<methodsynopsis function="socket_listen">
  <type>bool</type>
  <methodname>socket_listen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>backlog</parameter>
  </methodparam>
  <desc> After the socket socket has been created using socket_create and bound to a name with socket_bind, it may be told to listen for incoming connections on socket. </desc>
</methodsynopsis>
<methodsynopsis function="socket_read">
  <type>string</type>
  <methodname>socket_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> The function socket_read reads from the socket resource socket created by the socket_create or  socket_accept functions. The maximum number of bytes read is specified by the length parameter. Otherwise you can use \r, \n, or \0 to end reading  (depending on the type parameter, see below). </desc>
</methodsynopsis>
<methodsynopsis function="socket_recv">
  <type>int</type>
  <methodname>socket_recv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">buf</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="socket_recvfrom">
  <type>int</type>
  <methodname>socket_recvfrom</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">buf</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">port</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="socket_select">
  <type>int</type>
  <methodname>socket_select</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">read</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">write</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">except</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tv_sec</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>tv_usec</parameter>
  </methodparam>
  <desc>socket_select accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched. </desc>
</methodsynopsis>
<methodsynopsis function="socket_send">
  <type>int</type>
  <methodname>socket_send</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>buf</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> The function socket_send sends len bytes to the socket  socket from buf</desc>
</methodsynopsis>
<methodsynopsis function="socket_sendto">
  <type>int</type>
  <methodname>socket_sendto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>buf</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>addr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <desc> The function socket_sendto sends  len bytes from buf  through the socket socket to the  port at the address addr</desc>
</methodsynopsis>
<methodsynopsis function="socket_set_block">
  <type>bool</type>
  <methodname>socket_set_block</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc> The socket_set_block function removes the O_NONBLOCK flag  on the socket specified by the socket parameter. </desc>
</methodsynopsis>
<methodsynopsis function="socket_set_nonblock">
  <type>bool</type>
  <methodname>socket_set_nonblock</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <desc> The socket_set_nonblock function sets the O_NONBLOCK flag  on the socket specified by the socket parameter. </desc>
</methodsynopsis>
<methodsynopsis function="socket_set_option">
  <type>bool</type>
  <methodname>socket_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>optname</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>optval</parameter>
  </methodparam>
  <desc> The socket_set_option function sets the option specified by the optname parameter, at the protocol level specified by the level parameter, to the value pointed to by the optval parameter for the socket specified by the socket parameter. socket_set_option will return &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="socket_shutdown">
  <type>bool</type>
  <methodname>socket_shutdown</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>how</parameter>
  </methodparam>
  <desc> The socket_shutdown function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket</desc>
</methodsynopsis>
<methodsynopsis function="socket_strerror">
  <type>string</type>
  <methodname>socket_strerror</methodname>
  <methodparam>
    <type>int</type>
    <parameter>errno</parameter>
  </methodparam>
  <desc>socket_strerror takes as its errno parameter a socket error code as returned by socket_last_error and returns the corresponding explanatory text. This makes it a bit more pleasant to figure out why something didn't work; for instance, instead of having to track down a system include file to find out what '-111' means, you just pass it to socket_strerror, and it tells you what happened. </desc>
</methodsynopsis>
<methodsynopsis function="socket_write">
  <type>int</type>
  <methodname>socket_write</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>buffer</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> The function socket_write writes to the socket  socket from buffer. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::current">
  <type>mixed</type>
  <methodname>ArrayIterator::current</methodname>
  <void/>
  <desc> This function returns the current array entry </desc>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::key">
  <type>mixed</type>
  <methodname>ArrayIterator::key</methodname>
  <void/>
  <desc> This function returns the current array key </desc>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::next">
  <type>void</type>
  <methodname>ArrayIterator::next</methodname>
  <void/>
  <desc> This function moves the iterator to the next entry. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::rewind">
  <type>void</type>
  <methodname>ArrayIterator::rewind</methodname>
  <void/>
  <desc> This function rewinds the iterator to the beginning. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::seek">
  <type>void</type>
  <methodname>ArrayIterator::seek</methodname>
  <methodparam>
    <type>int</type>
    <parameter>position</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayIterator::valid">
  <type>bool</type>
  <methodname>ArrayIterator::valid</methodname>
  <void/>
  <desc> This function checks if the array contains any more entries. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayObject::append">
  <type>void</type>
  <methodname>ArrayObject::append</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>newval</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayObject::__construct">
  <type>ArrayObject</type>
  <methodname>ArrayObject::__construct</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>input</parameter>
  </methodparam>
  <desc> This constructs a new array object. The input parameter accepts an array or another ArrayObject. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayObject::count">
  <type>int</type>
  <methodname>ArrayObject::count</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ArrayObject::getIterator">
  <type>ArrayIterator</type>
  <methodname>ArrayObject::getIterator</methodname>
  <void/>
  <desc> This function will return an iterator from an ArrayObject. </desc>
</methodsynopsis>
<methodsynopsis function="ArrayObject::offsetExists">
  <type>bool</type>
  <methodname>ArrayObject::offsetExists</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>index</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayObject::offsetGet">
  <type>bool</type>
  <methodname>ArrayObject::offsetGet</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>index</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayObject::offsetSet">
  <type>void</type>
  <methodname>ArrayObject::offsetSet</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>index</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>newval</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayObject::offsetUnset">
  <type>void</type>
  <methodname>ArrayObject::offsetUnset</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>index</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="CachingIterator::hasNext">
  <type>boolean</type>
  <methodname>CachingIterator::hasNext</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingIterator::next">
  <type>void</type>
  <methodname>CachingIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingIterator::rewind">
  <type>void</type>
  <methodname>CachingIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingIterator::__toString">
  <type>string</type>
  <methodname>CachingIterator::__toString</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingIterator::valid">
  <type>boolean</type>
  <methodname>CachingIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingRecursiveIterator::getChildren">
  <type>CachingRecursiveIterator</type>
  <methodname>CachingRecursiveIterator::getChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="CachingRecursiveIterator::hasChildren">
  <type>bolean</type>
  <methodname>CachingRecursiveIterator::hasChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="class_implements">
  <type>array</type>
  <methodname>class_implements</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>class</parameter>
  </methodparam>
  <desc> This function returns an array with the names of the interfaces that the given class implements. </desc>
</methodsynopsis>
<methodsynopsis function="class_parents">
  <type>array</type>
  <methodname>class_parents</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>class</parameter>
  </methodparam>
  <desc> This function returns an array with the name of the parent classes of the given class. </desc>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::__construct">
  <type>DirectoryIterator</type>
  <methodname>DirectoryIterator::__construct</methodname>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::current">
  <type>DirectoryIterator</type>
  <methodname>DirectoryIterator::current</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getATime">
  <type>int</type>
  <methodname>DirectoryIterator::getATime</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getChildren">
  <type>RecursiveDirectoryIterator</type>
  <methodname>DirectoryIterator::getChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getCTime">
  <type>int</type>
  <methodname>DirectoryIterator::getCTime</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getFilename">
  <type>string</type>
  <methodname>DirectoryIterator::getFilename</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getGroup">
  <type>int</type>
  <methodname>DirectoryIterator::getGroup</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getInode">
  <type>int</type>
  <methodname>DirectoryIterator::getInode</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getMTime">
  <type>int</type>
  <methodname>DirectoryIterator::getMTime</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getOwner">
  <type>int</type>
  <methodname>DirectoryIterator::getOwner</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getPath">
  <type>string</type>
  <methodname>DirectoryIterator::getPath</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getPathname">
  <type>string</type>
  <methodname>DirectoryIterator::getPathname</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getPerms">
  <type>int</type>
  <methodname>DirectoryIterator::getPerms</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getSize">
  <type>int</type>
  <methodname>DirectoryIterator::getSize</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::getType">
  <type>string</type>
  <methodname>DirectoryIterator::getType</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isDir">
  <type>bool</type>
  <methodname>DirectoryIterator::isDir</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isDot">
  <type>bool</type>
  <methodname>DirectoryIterator::isDot</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isExecutable">
  <type>bool</type>
  <methodname>DirectoryIterator::isExecutable</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isFile">
  <type>bool</type>
  <methodname>DirectoryIterator::isFile</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isLink">
  <type>bool</type>
  <methodname>DirectoryIterator::isLink</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isReadable">
  <type>bool</type>
  <methodname>DirectoryIterator::isReadable</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::isWritable">
  <type>bool</type>
  <methodname>DirectoryIterator::isWritable</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::key">
  <type>string</type>
  <methodname>DirectoryIterator::key</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::next">
  <type>void</type>
  <methodname>DirectoryIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::rewind">
  <type>void</type>
  <methodname>DirectoryIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="DirectoryIterator::valid">
  <type>string</type>
  <methodname>DirectoryIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::current">
  <type>mixed</type>
  <methodname>FilterIterator::current</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::getInnerIterator">
  <type>Iterator</type>
  <methodname>FilterIterator::getInnerIterator</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::key">
  <type>mixed</type>
  <methodname>FilterIterator::key</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::next">
  <type>void</type>
  <methodname>FilterIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::rewind">
  <type>void</type>
  <methodname>FilterIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="FilterIterator::valid">
  <type>boolean</type>
  <methodname>FilterIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="iterator_count">
  <type>int</type>
  <methodname>iterator_count</methodname>
  <methodparam>
    <type>IteratorAggregate</type>
    <parameter>iterator</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="iterator_to_array">
  <type>array</type>
  <methodname>iterator_to_array</methodname>
  <methodparam>
    <type>IteratorAggregate</type>
    <parameter>iterator</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="LimitIterator::getPosition">
  <type>int</type>
  <methodname>LimitIterator::getPosition</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="LimitIterator::next">
  <type>void</type>
  <methodname>LimitIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="LimitIterator::rewind">
  <type>void</type>
  <methodname>LimitIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="LimitIterator::seek">
  <type>void</type>
  <methodname>LimitIterator::seek</methodname>
  <methodparam>
    <type>int</type>
    <parameter>position</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="LimitIterator::valid">
  <type>boolean</type>
  <methodname>LimitIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ParentIterator::getChildren">
  <type>ParentIterator</type>
  <methodname>ParentIterator::getChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ParentIterator::hasChildren">
  <type>boolean</type>
  <methodname>ParentIterator::hasChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ParentIterator::next">
  <type>void</type>
  <methodname>ParentIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="ParentIterator::rewind">
  <type>void</type>
  <methodname>ParentIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveDirectoryIterator::getChildren">
  <type>object</type>
  <methodname>RecursiveDirectoryIterator::getChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveDirectoryIterator::hasChildren">
  <type>bool</type>
  <methodname>RecursiveDirectoryIterator::hasChildren</methodname>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>allow_links</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="RecursiveDirectoryIterator::key">
  <type>string</type>
  <methodname>RecursiveDirectoryIterator::key</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveDirectoryIterator::next">
  <type>void</type>
  <methodname>RecursiveDirectoryIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveDirectoryIterator::rewind">
  <type>void</type>
  <methodname>RecursiveDirectoryIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::current">
  <type>mixed</type>
  <methodname>RecursiveIteratorIterator::current</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::getDepth">
  <type>int</type>
  <methodname>RecursiveIteratorIterator::getDepth</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::getSubIterator">
  <type>RecursiveIterator</type>
  <methodname>RecursiveIteratorIterator::getSubIterator</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::key">
  <type>mixed</type>
  <methodname>RecursiveIteratorIterator::key</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::next">
  <type>void</type>
  <methodname>RecursiveIteratorIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::rewind">
  <type>void</type>
  <methodname>RecursiveIteratorIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="RecursiveIteratorIterator::valid">
  <type>bolean</type>
  <methodname>RecursiveIteratorIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::current">
  <type>mixed</type>
  <methodname>SimpleXMLIterator::current</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::getChildren">
  <type>object</type>
  <methodname>SimpleXMLIterator::getChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::hasChildren">
  <type>bool</type>
  <methodname>SimpleXMLIterator::hasChildren</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::key">
  <type>mixed</type>
  <methodname>SimpleXMLIterator::key</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::next">
  <type>void</type>
  <methodname>SimpleXMLIterator::next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::rewind">
  <type>void</type>
  <methodname>SimpleXMLIterator::rewind</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="SimpleXMLIterator::valid">
  <type>bool</type>
  <methodname>SimpleXMLIterator::valid</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="spl_classes">
  <type>array</type>
  <methodname>spl_classes</methodname>
  <void/>
  <desc> This function returns an array with the current available SPL classes. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_array_query">
  <type>array</type>
  <methodname>sqlite_array_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_busy_timeout">
  <type>void</type>
  <methodname>sqlite_busy_timeout</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>milliseconds</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_changes">
  <type>int</type>
  <methodname>sqlite_changes</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_close">
  <type>void</type>
  <methodname>sqlite_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <desc> Closes the given database handle. If the database was persistent, it will be closed and removed from the persistent list. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_column">
  <type>mixed</type>
  <methodname>sqlite_column</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>index_or_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc> Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_create_aggregate">
  <type>bool</type>
  <methodname>sqlite_create_aggregate</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>step_func</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>finalize_func</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>num_args</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_create_function">
  <type>bool</type>
  <methodname>sqlite_create_function</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>callback</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>num_args</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_current">
  <type>array</type>
  <methodname>sqlite_current</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_error_string">
  <type>string</type>
  <methodname>sqlite_error_string</methodname>
  <methodparam>
    <type>int</type>
    <parameter>error_code</parameter>
  </methodparam>
  <desc> Returns a human readable description of the error_code returned from sqlite_last_error. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_escape_string">
  <type>string</type>
  <methodname>sqlite_escape_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>item</parameter>
  </methodparam>
  <desc>sqlite_escape_string will correctly quote the string specified by item for use in an SQLite SQL statement.  This includes doubling up single-quote characters (') and checking for binary-unsafe characters in the query string. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_exec">
  <type>bool</type>
  <methodname>sqlite_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_factory">
  <type>SQLiteDatabase</type>
  <methodname>sqlite_factory</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error_message</parameter>
  </methodparam>
  <desc>sqlite_factory behaves similarly to sqlite_open in that it opens an SQLite database or attempts to create it if it does not exist.  However, a SQLiteDatabase object is returned rather than a resource.  Please see the sqlite_open reference page for further usage and caveats. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_fetch_all">
  <type>array</type>
  <methodname>sqlite_fetch_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_fetch_array">
  <type>array</type>
  <methodname>sqlite_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_fetch_column_types">
  <type>array</type>
  <methodname>sqlite_fetch_column_types</methodname>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>result_type</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_fetch_object">
  <type>object</type>
  <methodname>sqlite_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>class_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>ctor_params</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_fetch_single">
  <type>string</type>
  <methodname>sqlite_fetch_single</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_field_name">
  <type>string</type>
  <methodname>sqlite_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_index</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_has_more">
  <type>bool</type>
  <methodname>sqlite_has_more</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Finds whether more rows are available from the given result set. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_has_prev">
  <type>bool</type>
  <methodname>sqlite_has_prev</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_key">
  <type>int</type>
  <methodname>sqlite_key</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_last_error">
  <type>int</type>
  <methodname>sqlite_last_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_last_insert_rowid">
  <type>int</type>
  <methodname>sqlite_last_insert_rowid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_libencoding">
  <type>string</type>
  <methodname>sqlite_libencoding</methodname>
  <void/>
  <desc> The SQLite library may be compiled in either ISO-8859-1 or UTF-8 compatible modes.  This function allows you to determine which encoding scheme is used by your version of the library. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_libversion">
  <type>string</type>
  <methodname>sqlite_libversion</methodname>
  <void/>
  <desc> Returns the version of the linked SQLite library. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_next">
  <type>bool</type>
  <methodname>sqlite_next</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_num_fields">
  <type>int</type>
  <methodname>sqlite_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_num_rows">
  <type>int</type>
  <methodname>sqlite_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_open">
  <type>resource</type>
  <methodname>sqlite_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error_message</parameter>
  </methodparam>
  <desc>Object oriented style (constructor):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_popen">
  <type>resource</type>
  <methodname>sqlite_popen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error_message</parameter>
  </methodparam>
  <desc>sqlite_popen will first check to see if a persistent handle has already been opened for the given filename.  If it finds one, it returns that handle to your script, otherwise it opens a fresh handle to the database. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_prev">
  <type>bool</type>
  <methodname>sqlite_prev</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_query">
  <type>resource</type>
  <methodname>sqlite_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_rewind">
  <type>bool</type>
  <methodname>sqlite_rewind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_seek">
  <type>bool</type>
  <methodname>sqlite_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>rownum</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_single_query">
  <type>mixed</type>
  <methodname>sqlite_single_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>db</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>first_row_only</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>decode_binary</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_udf_decode_binary">
  <type>string</type>
  <methodname>sqlite_udf_decode_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>sqlite_udf_decode_binary decodes the binary encoding that was applied to the parameter by either sqlite_udf_encode_binary or sqlite_escape_string. </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_udf_encode_binary">
  <type>string</type>
  <methodname>sqlite_udf_encode_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>sqlite_udf_encode_binary applies a binary encoding to the data so that it can be safely returned from queries (since the underlying libsqlite API is not binary safe). </desc>
</methodsynopsis>
<methodsynopsis function="sqlite_unbuffered_query">
  <type>resource</type>
  <methodname>sqlite_unbuffered_query</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>dbhandle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="sqlite_valid">
  <type>bool</type>
  <methodname>sqlite_valid</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>Object oriented style (method):</desc>
</methodsynopsis>
<methodsynopsis function="ssh2_auth_hostbased_file">
  <type>bool</type>
  <methodname>ssh2_auth_hostbased_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pubkeyfile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>privkeyfile</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>local_username</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_auth_none">
  <type>array</type>
  <methodname>ssh2_auth_none</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_auth_password">
  <type>bool</type>
  <methodname>ssh2_auth_password</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_auth_pubkey_file">
  <type>bool</type>
  <methodname>ssh2_auth_pubkey_file</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pubkeyfile</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>privkeyfile</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>passphrase</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_connect">
  <type>resource</type>
  <methodname>ssh2_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>methods</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>callbacks</parameter>
  </methodparam>
  <desc> methods may be an associative array with any or all of the following parameters. Index Meaning Supported Values* kex List of key exchange methods to advertise, coma separated in order of preference. diffie-hellman-group1-sha1, diffie-hellman-group14-sha1, and diffie-hellman-group-exchange-sha1 hostkey List of hostkey methods to advertise, come separated in order of preference. ssh-rsa and ssh-dss client_to_server Associative array containing crypt, compression, and message authentication code (MAC) method preferences for messages sent from client to server. server_to_client Associative array containing crypt, compression, and message authentication code (MAC) method preferences for messages sent from client to server. </desc>
</methodsynopsis>
<methodsynopsis function="ssh2_exec">
  <type>stream</type>
  <methodname>ssh2_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>command</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>env</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_fetch_stream">
  <type>stream</type>
  <methodname>ssh2_fetch_stream</methodname>
  <methodparam>
    <type>stream</type>
    <parameter>channel</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>streamid</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_fingerprint">
  <type>string</type>
  <methodname>ssh2_fingerprint</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_methods_negotiated">
  <type>array</type>
  <methodname>ssh2_methods_negotiated</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_scp_recv">
  <type>bool</type>
  <methodname>ssh2_scp_recv</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_scp_send">
  <type>stream</type>
  <methodname>ssh2_scp_send</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>local_file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>remote_file</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>create_mode</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_lstat">
  <type>array</type>
  <methodname>ssh2_sftp_lstat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_mkdir">
  <type>bool</type>
  <methodname>ssh2_sftp_mkdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dirname</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>recursive</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_readlink">
  <type>string</type>
  <methodname>ssh2_sftp_readlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_realpath">
  <type>string</type>
  <methodname>ssh2_sftp_realpath</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_rename">
  <type>bool</type>
  <methodname>ssh2_sftp_rename</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>from</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_rmdir">
  <type>bool</type>
  <methodname>ssh2_sftp_rmdir</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dirname</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_stat">
  <type>array</type>
  <methodname>ssh2_sftp_stat</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>path</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_symlink">
  <type>bool</type>
  <methodname>ssh2_sftp_symlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>link</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp_unlink">
  <type>bool</type>
  <methodname>ssh2_sftp_unlink</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>sftp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_sftp">
  <type>resource</type>
  <methodname>ssh2_sftp</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_shell">
  <type>stream</type>
  <methodname>ssh2_shell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>term_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>env</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>width_height_type</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="ssh2_tunnel">
  <type>stream</type>
  <methodname>ssh2_tunnel</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>session</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>host</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>port</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_context_create">
  <type>resource</type>
  <methodname>stream_context_create</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_context_get_default">
  <type>resource</type>
  <methodname>stream_context_get_default</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>options</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_context_get_options">
  <type>array</type>
  <methodname>stream_context_get_options</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_or_context</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_context_set_option">
  <type>bool</type>
  <methodname>stream_context_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_or_context</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>wrapper</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_context_set_params">
  <type>bool</type>
  <methodname>stream_context_set_params</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_or_context</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>params</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="stream_copy_to_stream">
  <type>int</type>
  <methodname>stream_copy_to_stream</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>source</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>dest</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlength</parameter>
  </methodparam>
  <desc> Makes a copy of up to maxlength bytes of data from the current position in source to dest. If maxlength is not specified, all remaining content in source will be copied.  Returns the total count of bytes copied. stream_copy_to_stream example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="stream_filter_append">
  <type>resource</type>
  <methodname>stream_filter_append</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filtername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>read_write</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Adds filtername to the list of filters  attached to stream.  This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations.  To add a filter to the beginning of the list, use  stream_filter_prepend. </desc>
</methodsynopsis>
<methodsynopsis function="stream_filter_prepend">
  <type>resource</type>
  <methodname>stream_filter_prepend</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>filtername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>read_write</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>params</parameter>
  </methodparam>
  <desc> Adds filtername to the list of filters attached to stream.  This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations.  To add a filter to the end of the list, use stream_filter_append. </desc>
</methodsynopsis>
<methodsynopsis function="stream_filter_register">
  <type>bool</type>
  <methodname>stream_filter_register</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filtername</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <desc>stream_filter_register allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen, fread etc.). </desc>
</methodsynopsis>
<methodsynopsis function="stream_filter_remove">
  <type>bool</type>
  <methodname>stream_filter_remove</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream_filter</parameter>
  </methodparam>
  <desc> Dynamicly refiltering a stream ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_contents">
  <type>string</type>
  <methodname>stream_get_contents</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>maxlength</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc>  Identical to file_get_contents, except that stream_get_contents operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset. </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_filters">
  <type>array</type>
  <methodname>stream_get_filters</methodname>
  <void/>
  <desc> Using stream_get_filters ]]&amp;gt; Output will be similar to the following. Note: there may be more or fewer filters in your version of PHP. string.rot13 [1] =&amp;gt; string.toupper [2] =&amp;gt; string.tolower [3] =&amp;gt; string.base64 [4] =&amp;gt; string.quoted-printable
)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_line">
  <type>string</type>
  <methodname>stream_get_line</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>ending</parameter>
  </methodparam>
  <desc> Returns a string of up to length bytes read from the file pointed to by handle. Reading ends when length bytes have been read, when the string specified by ending is found (which is not included in the return value), or on EOF (whichever comes first).  </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_meta_data">
  <type>array</type>
  <methodname>stream_get_meta_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <desc>timed_out (bool) - &amp;amp;true; if the stream timed out while waiting for data on the last call to fread or fgets. </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_transports">
  <type>array</type>
  <methodname>stream_get_transports</methodname>
  <void/>
  <desc> Using stream_get_transports ]]&amp;gt; Output will be similar to the following. Note: there may be more or fewer transports in your version of PHP. tcp [1] =&amp;gt; udp [2] =&amp;gt; unix [3] =&amp;gt; udg
)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="stream_get_wrappers">
  <type>array</type>
  <methodname>stream_get_wrappers</methodname>
  <void/>
  <desc> Returns an indexed array containing the name of all stream wrappers available on the running system. </desc>
</methodsynopsis>
<methodsynopsis function="stream_select">
  <type>int</type>
  <methodname>stream_select</methodname>
  <methodparam>
    <type>array</type>
    <parameter role="reference">read</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">write</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">except</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>tv_sec</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>tv_usec</parameter>
  </methodparam>
  <desc> When stream_select returns, the arrays read, write and except are modified to indicate which stream resource(s) actually changed status. </desc>
</methodsynopsis>
<methodsynopsis function="stream_set_blocking">
  <type>bool</type>
  <methodname>stream_set_blocking</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> If mode is 0, the given stream will be switched to non-blocking mode, and if 1, it will be switched to blocking mode.  This affects calls like fgets and fread that read from the stream.  In non-blocking mode an fgets call will always return right away while in blocking mode it will wait for data to become available on the stream. </desc>
</methodsynopsis>
<methodsynopsis function="stream_set_timeout">
  <type>bool</type>
  <methodname>stream_set_timeout</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>seconds</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>microseconds</parameter>
  </methodparam>
  <desc> Sets the timeout value on stream, expressed in the sum of seconds and microseconds. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="stream_set_write_buffer">
  <type>int</type>
  <methodname>stream_set_write_buffer</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>buffer</parameter>
  </methodparam>
  <desc> The following example demonstrates how to use stream_set_write_buffer to create an unbuffered stream. stream_set_write_buffer example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_accept">
  <type>resource</type>
  <methodname>stream_socket_accept</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server_socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">peername</parameter>
  </methodparam>
  <desc> Accept a connection on a socket previously created by stream_socket_server.  If timeout is specified, the default socket accept timeout will be overridden with the time  specified in seconds.  The name (address) of the client which connected will be passed back in peername if included and available from the selected transport. </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_client">
  <type>resource</type>
  <methodname>stream_socket_client</methodname>
  <methodparam>
    <type>string</type>
    <parameter>remote_socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errno</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">errstr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter>timeout</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Initiates a stream or datagram connection to the destination specified by remote_socket.  The type of socket created is determined by the transport specified using standard URL formatting: transport://target.  For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number.  For Unix domain sockets, the target portion should point to the socket file on the filesystem. The optional timeout can be used to set a timeout in seconds for the connect system call. flags is a bitmask field which may be set to any combination of connection flags.  Currently the selection of connection flags is limited to STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and STREAM_CLIENT_PERSISTENT. </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_enable_crypto">
  <type>mixed</type>
  <methodname>stream_socket_enable_crypto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>stream</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>enable</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>crypto_type</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>session_stream</parameter>
  </methodparam>
  <desc> Valid values for crypto_typeSTREAM_CRYPTO_METHOD_SSLv2_CLIENTSTREAM_CRYPTO_METHOD_SSLv3_CLIENTSTREAM_CRYPTO_METHOD_SSLv23_CLIENTSTREAM_CRYPTO_METHOD_TLS_CLIENTSTREAM_CRYPTO_METHOD_SSLv2_SERVERSTREAM_CRYPTO_METHOD_SSLv3_SERVERSTREAM_CRYPTO_METHOD_SSLv23_SERVERSTREAM_CRYPTO_METHOD_TLS_SERVER</desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_get_name">
  <type>string</type>
  <methodname>stream_socket_get_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>bool</type>
    <parameter>want_peer</parameter>
  </methodparam>
  <desc> Returns the local or remote name of a given socket connection. If want_peer is set to &amp;amp;true; the remote socket name will be returned, if it is set to &amp;amp;false; the local socket name will be returned. </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_pair">
  <type>array</type>
  <methodname>stream_socket_pair</methodname>
  <methodparam>
    <type>int</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc>stream_socket_pair creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).      </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_recvfrom">
  <type>string</type>
  <methodname>stream_socket_recvfrom</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">address</parameter>
  </methodparam>
  <desc> The function stream_socket_recvfrom accepts data from a remote socket up to length bytes. If address is provided it will be populated with the address of the remote socket. </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_sendto">
  <type>int</type>
  <methodname>stream_socket_sendto</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>socket</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <desc> The function stream_socket_sendto sends  the data specified by data through the socket specified by socket.  The address specified when the socket stream was created will be used unless an alternate address is specified in address. </desc>
</methodsynopsis>
<methodsynopsis function="stream_socket_server">
  <type>resource</type>
  <methodname>stream_socket_server</methodname>
  <methodparam>
    <type>string</type>
    <parameter>local_socket</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">errno</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">errstr</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>context</parameter>
  </methodparam>
  <desc> Creates a stream or datagram socket on the specified  local_socket.  The type of socket created is determined by the transport specified using standard URL formatting: transport://target.  For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number.  For Unix domain sockets, the target portion should point to the socket file on the filesystem. flags is a bitmask field which may be set to any combination of socket creation flags.  The default value of flags is STREAM_SERVER_BIND | STREAM_SERVER_LISTEN. </desc>
</methodsynopsis>
<methodsynopsis function="stream_wrapper_register">
  <type>bool</type>
  <methodname>stream_wrapper_register</methodname>
  <methodparam>
    <type>string</type>
    <parameter>protocol</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>classname</parameter>
  </methodparam>
  <desc>stream_wrapper_register allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen, fread etc.). </desc>
</methodsynopsis>
<methodsynopsis function="stream_wrapper_restore">
  <type>bool</type>
  <methodname>stream_wrapper_restore</methodname>
  <methodparam>
    <type>string</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc> Restores a built-in wrapper previously unregistered with stream_wrapper_unregister. </desc>
</methodsynopsis>
<methodsynopsis function="stream_wrapper_unregister">
  <type>bool</type>
  <methodname>stream_wrapper_unregister</methodname>
  <methodparam>
    <type>string</type>
    <parameter>protocol</parameter>
  </methodparam>
  <desc>stream_wrapper_unregister allows you to disable an already defined stream wrapper.  Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register or reenable it later on with stream_wrapper_restore. </desc>
</methodsynopsis>
<methodsynopsis function="addcslashes">
  <type>string</type>
  <methodname>addcslashes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>charlist</parameter>
  </methodparam>
  <desc> Returns a string with backslashes before characters that are listed in charlist parameter. It escapes \n, \r etc. in C-like style, characters with ASCII code lower than 32 and higher than 126 are converted to octal representation.  </desc>
</methodsynopsis>
<methodsynopsis function="addslashes">
  <type>string</type>
  <methodname>addslashes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string with backslashes before characters that need to be quoted in database queries etc.  These characters are single quote ('), double quote ("), backslash (\) and NUL (the &amp;amp;null; byte). </desc>
</methodsynopsis>
<methodsynopsis function="bin2hex">
  <type>string</type>
  <methodname>bin2hex</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first. </desc>
</methodsynopsis>
<methodsynopsis function="chr">
  <type>string</type>
  <methodname>chr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>ascii</parameter>
  </methodparam>
  <desc> Returns a one-character string containing the character specified by ascii. chr example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="chunk_split">
  <type>string</type>
  <methodname>chunk_split</methodname>
  <methodparam>
    <type>string</type>
    <parameter>body</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>chunklen</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>end</parameter>
  </methodparam>
  <desc> Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode output to match RFC 2045 semantics. It inserts end (defaults to "\r\n") every chunklen characters (defaults to 76). It returns the new string leaving the original string untouched. chunk_split example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="convert_cyr_string">
  <type>string</type>
  <methodname>convert_cyr_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>from</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
  <desc> This function returns the given string converted from one Cyrillic character set to another.  The from and to arguments are single characters that represent the source and target Cyrillic character sets.  The supported types are: k - koi8-r w - windows-1251 i - iso8859-5 a - x-cp866 d - x-cp866 m - x-mac-cyrillic </desc>
</methodsynopsis>
<methodsynopsis function="convert_uudecode">
  <type>string</type>
  <methodname>convert_uudecode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>convert_uudecode decodes a uuencoded string. </desc>
</methodsynopsis>
<methodsynopsis function="convert_uuencode">
  <type>string</type>
  <methodname>convert_uuencode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>convert_uuencode encodes a string using the uuencode algorithm. </desc>
</methodsynopsis>
<methodsynopsis function="count_chars">
  <type>mixed</type>
  <methodname>count_chars</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways. The optional parameter mode defaults to 0. Depending on modecount_chars returns one of the following: 0 - an array with the byte-value as key and the frequency of every byte as value. 1 - same as 0 but only byte-values with a frequency greater than zero are listed. 2 - same as 0 but only byte-values with a frequency equal to zero are listed. 3 - a string containing all used byte-values is returned. 4 - a string containing all not used byte-values is returned. </desc>
</methodsynopsis>
<methodsynopsis function="crc32">
  <type>int</type>
  <methodname>crc32</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted. </desc>
</methodsynopsis>
<methodsynopsis function="crypt">
  <type>string</type>
  <methodname>crypt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>salt</parameter>
  </methodparam>
  <desc>crypt will return an encrypted string using the standard Unix DES-based encryption algorithm or alternative algorithms that may be available on the system.  Arguments are a string to be encrypted and an optional salt string to base the encryption on.  See the Unix man page for your crypt function for more information. </desc>
</methodsynopsis>
<methodsynopsis function="echo">
  <type>void</type>
  <methodname>echo</methodname>
  <methodparam>
    <type>string</type>
    <parameter>arg1</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>echo is not actually a function (it is a language construct) so you are not required to use parentheses with it. In fact, if you want to pass more than one parameter to echo, you must not enclose the parameters within parentheses. </desc>
</methodsynopsis>
<methodsynopsis function="explode">
  <type>array</type>
  <methodname>explode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>separator</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>limit</parameter>
  </methodparam>
  <desc> Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string separator. If limit is set, the returned array will contain a maximum of limit elements with the last element containing the rest of string. </desc>
</methodsynopsis>
<methodsynopsis function="fprintf">
  <type>int</type>
  <methodname>fprintf</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> fprintf: zero-padded integers ]]&amp;gt; fprintf: formatting currency ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="get_html_translation_table">
  <type>array</type>
  <methodname>get_html_translation_table</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>table</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quote_style</parameter>
  </methodparam>
  <desc>get_html_translation_table will return the translation table that is used internally for htmlspecialchars and htmlentities.  </desc>
</methodsynopsis>
<methodsynopsis function="hebrev">
  <type>string</type>
  <methodname>hebrev</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hebrew_text</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>max_chars_per_line</parameter>
  </methodparam>
  <desc> The optional parameter max_chars_per_line indicates maximum number of characters per line that will be returned. The function tries to avoid breaking words. </desc>
</methodsynopsis>
<methodsynopsis function="hebrevc">
  <type>string</type>
  <methodname>hebrevc</methodname>
  <methodparam>
    <type>string</type>
    <parameter>hebrew_text</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>max_chars_per_line</parameter>
  </methodparam>
  <desc> This function is similar to hebrev with the difference that it converts newlines (\n) to "&amp;lt;br&amp;gt;\n".  The optional parameter max_chars_per_line indicates maximum number of characters per line that will be returned. The function tries to avoid breaking words. </desc>
</methodsynopsis>
<methodsynopsis function="html_entity_decode">
  <type>string</type>
  <methodname>html_entity_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quote_style</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc>html_entity_decode is the opposite of htmlentities in that it converts all HTML entities to their applicable characters from string. </desc>
</methodsynopsis>
<methodsynopsis function="htmlentities">
  <type>string</type>
  <methodname>htmlentities</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quote_style</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> This function is identical to htmlspecialchars in all ways, except with htmlentities, all characters which have HTML  character entity equivalents are translated into these entities. </desc>
</methodsynopsis>
<methodsynopsis function="htmlspecialchars_decode">
  <type>string</type>
  <methodname>htmlspecialchars_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quote_style</parameter>
  </methodparam>
  <desc> This function is the opposite of htmlspecialchars. It converts special HTML entities back to characters. </desc>
</methodsynopsis>
<methodsynopsis function="htmlspecialchars">
  <type>string</type>
  <methodname>htmlspecialchars</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>quote_style</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <desc> Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming. If you require all HTML character entities to be translated, use htmlentities instead. </desc>
</methodsynopsis>
<methodsynopsis function="implode">
  <type>string</type>
  <methodname>implode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>glue</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>pieces</parameter>
  </methodparam>
  <desc> Returns a string containing a string representation of all the array elements in the same order, with the glue string between each element. implode example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="levenshtein">
  <type>int</type>
  <methodname>levenshtein</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cost_ins</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cost_rep</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>cost_del</parameter>
  </methodparam>
  <desc> This function returns the Levenshtein-Distance between the two argument strings or -1, if one of the argument strings is longer than the limit of 255 characters. </desc>
</methodsynopsis>
<methodsynopsis function="localeconv">
  <type>array</type>
  <methodname>localeconv</methodname>
  <void/>
  <desc> Returns an associative array containing localized numeric and monetary formatting information. </desc>
</methodsynopsis>
<methodsynopsis function="ltrim">
  <type>string</type>
  <methodname>ltrim</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charlist</parameter>
  </methodparam>
  <desc> This function returns a string with whitespace stripped from the beginning of str. Without the second parameter, ltrim will strip these characters: " " (ASCII 32  (0x20)), an ordinary space. "\t" (ASCII 9  (0x09)), a tab. "\n" (ASCII 10  (0x0A)), a new line (line feed). "\r" (ASCII 13  (0x0D)), a carriage return. "\0" (ASCII 0  (0x00)), the NUL-byte. "\x0B" (ASCII 11  (0x0B)), a vertical tab. </desc>
</methodsynopsis>
<methodsynopsis function="md5_file">
  <type>string</type>
  <methodname>md5_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>raw_output</parameter>
  </methodparam>
  <desc> Calculates the MD5 hash of the file specified by the filename parameter using the RSA Data Security, Inc.  MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.  If the optional raw_output is set to &amp;amp;true;, then the md5 digest is instead returned in raw binary format with a length of 16. </desc>
</methodsynopsis>
<methodsynopsis function="md5">
  <type>string</type>
  <methodname>md5</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>raw_output</parameter>
  </methodparam>
  <desc> Calculates the MD5 hash of str using the RSA Data Security, Inc.  MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.  If the optional raw_output is set to &amp;amp;true;, then the md5 digest is instead returned in raw binary format with a length of 16. </desc>
</methodsynopsis>
<methodsynopsis function="metaphone">
  <type>string</type>
  <methodname>metaphone</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>phones</parameter>
  </methodparam>
  <desc> Calculates the metaphone key of str. </desc>
</methodsynopsis>
<methodsynopsis function="money_format">
  <type>string</type>
  <methodname>money_format</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <desc>money_format returns a formatted version of number.  This function wraps the C library function strfmon, with the difference that this implementation converts only one number at a time. </desc>
</methodsynopsis>
<methodsynopsis function="nl_langinfo">
  <type>string</type>
  <methodname>nl_langinfo</methodname>
  <methodparam>
    <type>int</type>
    <parameter>item</parameter>
  </methodparam>
  <desc>nl_langinfo is used to access individual elements of the locale categories.  Unlike localeconv, which returns all of the elements, nl_langinfo allows you to select any specific element. </desc>
</methodsynopsis>
<methodsynopsis function="nl2br">
  <type>string</type>
  <methodname>nl2br</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns string with '&amp;lt;br /&amp;gt;' inserted before all newlines. </desc>
</methodsynopsis>
<methodsynopsis function="number_format">
  <type>string</type>
  <methodname>number_format</methodname>
  <methodparam>
    <type>float</type>
    <parameter>number</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>decimals</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>dec_point</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>thousands_sep</parameter>
  </methodparam>
  <desc>number_format returns a formatted version of number.  This function accepts either one, two or four parameters (not three): </desc>
</methodsynopsis>
<methodsynopsis function="ord">
  <type>int</type>
  <methodname>ord</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns the ASCII value of the first character of string.  This function complements chr. ord example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="parse_str">
  <type>void</type>
  <methodname>parse_str</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">arr</parameter>
  </methodparam>
  <desc> Parses str as if it were the query string passed via a URL and sets variables in the current scope. If  the second parameter arr is present,  variables are stored in this variable as array elements instead.  </desc>
</methodsynopsis>
<methodsynopsis function="print">
  <type>int</type>
  <methodname>print</methodname>
  <methodparam>
    <type>string</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>print is not actually a real function (it is a language construct) so you are not required to use parentheses with its argument list.  </desc>
</methodsynopsis>
<methodsynopsis function="printf">
  <type>int</type>
  <methodname>printf</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="quoted_printable_decode">
  <type>string</type>
  <methodname>quoted_printable_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="quotemeta">
  <type>string</type>
  <methodname>quotemeta</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a version of str with a backslash character (\) before every character that is among these: . \ + * ? [ ^ ] ( $ )</desc>
</methodsynopsis>
<methodsynopsis function="rtrim">
  <type>string</type>
  <methodname>rtrim</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charlist</parameter>
  </methodparam>
  <desc> This function returns a string with whitespace stripped from the end of str. Without the second parameter, rtrim will strip these characters: " " (ASCII 32  (0x20)), an ordinary space. "\t" (ASCII 9  (0x09)), a tab. "\n" (ASCII 10  (0x0A)), a new line (line feed). "\r" (ASCII 13  (0x0D)), a carriage return. "\0" (ASCII 0  (0x00)), the NUL-byte. "\x0B" (ASCII 11  (0x0B)), a vertical tab. </desc>
</methodsynopsis>
<methodsynopsis function="setlocale">
  <type>string</type>
  <methodname>setlocale</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>category</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>locale</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>category is a named constant (or string) specifying the category of the functions affected by the locale setting: LC_ALL for all of the below LC_COLLATE for string comparison, see strcoll LC_CTYPE for character classification and conversion, for example strtoupper LC_MONETARY for localeconv LC_NUMERIC for decimal separator (See also localeconv) LC_TIME for date and time formatting with strftime</desc>
</methodsynopsis>
<methodsynopsis function="sha1_file">
  <type>string</type>
  <methodname>sha1_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>raw_output</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="sha1">
  <type>string</type>
  <methodname>sha1</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>raw_output</parameter>
  </methodparam>
  <desc> A sha1 example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="similar_text">
  <type>int</type>
  <methodname>similar_text</methodname>
  <methodparam>
    <type>string</type>
    <parameter>first</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>second</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>float</type>
    <parameter role="reference">percent</parameter>
  </methodparam>
  <desc> This calculates the similarity between two strings as described in Oliver [1993]. Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string. </desc>
</methodsynopsis>
<methodsynopsis function="soundex">
  <type>string</type>
  <methodname>soundex</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Calculates the soundex key of str. </desc>
</methodsynopsis>
<methodsynopsis function="sprintf">
  <type>string</type>
  <methodname>sprintf</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>args</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> Each conversion specification consists of a percent sign (%), followed by one or more of these elements, in order: An optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well, and was added in PHP 4.3.0. An optional padding specifier that says what character will be used for padding the results to the right string size.  This may be a space character or a 0 (zero character).  The default is to pad with spaces.  An alternate padding character can be specified by prefixing it with a single quote ('). See the examples below. An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified. An optional number, a width specifier that says how many characters (minimum) this conversion should result in. An optional precision specifier that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string. A type specifier that says what type the argument data should be treated as.  Possible types: % - a literal percent character. No argument is required. b - the argument is treated as an integer, and presented as a binary number. c - the argument is treated as an integer, and presented as the character with that ASCII value. d - the argument is treated as an integer, and presented as a (signed) decimal number. e - the argument is treated as scientific notation (e.g. 1.2e+2). u - the argument is treated as an integer, and presented as an unsigned decimal number. f - the argument is treated as a float, and presented as a floating-point number (locale aware). F - the argument is treated as a float, and presented as a floating-point number (non-locale aware). Available since PHP 4.3.10 and PHP 5.0.3. o - the argument is treated as an integer, and presented as an octal number. s - the argument is treated as and presented as a string. x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters). X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters). </desc>
</methodsynopsis>
<methodsynopsis function="sscanf">
  <type>mixed</type>
  <methodname>sscanf</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter role="reference">...</parameter>
  </methodparam>
  <desc> The function sscanf is the input analog of printf. sscanf reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf. If only two parameters were passed to this function, the values parsed will be returned as an array. Otherwise, if optional parameters are passed, the function will return the number of assigned values. The optional parameters must be passed by reference. </desc>
</methodsynopsis>
<methodsynopsis function="str_ireplace">
  <type>mixed</type>
  <methodname>str_ireplace</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>search</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>replace</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">count</parameter>
  </methodparam>
  <desc> This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace  value.  If you don't need fancy replacing rules, you should generally use this function instead of eregi_replace or preg_replace with the i modifier. </desc>
</methodsynopsis>
<methodsynopsis function="str_pad">
  <type>string</type>
  <methodname>str_pad</methodname>
  <methodparam>
    <type>string</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pad_length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>pad_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>pad_type</parameter>
  </methodparam>
  <desc> This functions returns the input string  padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit. </desc>
</methodsynopsis>
<methodsynopsis function="str_repeat">
  <type>string</type>
  <methodname>str_repeat</methodname>
  <methodparam>
    <type>string</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>multiplier</parameter>
  </methodparam>
  <desc> Returns input_str repeated multiplier times. multiplier has to be greater than or equal to 0. If the multiplier is set to 0, the function will return an empty string. </desc>
</methodsynopsis>
<methodsynopsis function="str_replace">
  <type>mixed</type>
  <methodname>str_replace</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>search</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>replace</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>subject</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter role="reference">count</parameter>
  </methodparam>
  <desc> This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.  If you don't need fancy replacing rules (like regular expressions), you should always use this function instead of ereg_replace or preg_replace. </desc>
</methodsynopsis>
<methodsynopsis function="str_rot13">
  <type>string</type>
  <methodname>str_rot13</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> This function performs the ROT13 encoding on the str argument and returns the resulting string. The ROT13 encoding simply shifts every letter by 13 places in the alphabet while leaving non-alpha characters untouched. Encoding and decoding are done by the same function, passing an encoded string as argument will return the original version. </desc>
</methodsynopsis>
<methodsynopsis function="str_shuffle">
  <type>string</type>
  <methodname>str_shuffle</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> str_shuffle example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="str_split">
  <type>array</type>
  <methodname>str_split</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>split_length</parameter>
  </methodparam>
  <desc> Converts a string to an array. If the optional split_length parameter is specified, the returned array will be broken down into chunks with each being split_length in length, otherwise each chunk will be one character in length. </desc>
</methodsynopsis>
<methodsynopsis function="str_word_count">
  <type>mixed</type>
  <methodname>str_word_count</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charlist</parameter>
  </methodparam>
  <desc> Counts the number of words inside string.  If the optional format is not specified, then  the return value will be an integer representing the number of words  found. In the event the format is specified, the return value will be an array, content of which is dependent on the  format. The possible value for the  format and the resultant outputs are listed below. </desc>
</methodsynopsis>
<methodsynopsis function="strcasecmp">
  <type>int</type>
  <methodname>strcasecmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc> Returns &amp;lt; 0 if str1 is less than str2; &amp;gt; 0 if str1 is greater than str2, and 0 if they are equal. strcasecmp example
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="strcmp">
  <type>int</type>
  <methodname>strcmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="strcoll">
  <type>int</type>
  <methodname>strcoll</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc>strcoll was added in PHP 4.0.5, but was not enabled for win32 until 4.2.3. </desc>
</methodsynopsis>
<methodsynopsis function="strcspn">
  <type>int</type>
  <methodname>strcspn</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="strip_tags">
  <type>string</type>
  <methodname>strip_tags</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>allowable_tags</parameter>
  </methodparam>
  <desc> This function tries to return a string with all HTML and PHP tags stripped from a given str.  It uses the same tag stripping state machine as the fgetss function. </desc>
</methodsynopsis>
<methodsynopsis function="stripcslashes">
  <type>string</type>
  <methodname>stripcslashes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation. </desc>
</methodsynopsis>
<methodsynopsis function="stripos">
  <type>int</type>
  <methodname>stripos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the first occurrence of needle in the haystackstring.  Unlike  strpos,  stripos is case-insensitive. </desc>
</methodsynopsis>
<methodsynopsis function="stripslashes">
  <type>string</type>
  <methodname>stripslashes</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string with backslashes stripped off. (\' becomes ' and so on.) Double backslashes (\\) are made into a single backslash (\).  </desc>
</methodsynopsis>
<methodsynopsis function="stristr">
  <type>string</type>
  <methodname>stristr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <desc> Returns all of haystack from the first occurrence of needle to the end. needle and haystack are examined in a case-insensitive manner. </desc>
</methodsynopsis>
<methodsynopsis function="strlen">
  <type>int</type>
  <methodname>strlen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns the length of the given string. </desc>
</methodsynopsis>
<methodsynopsis function="strnatcasecmp">
  <type>int</type>
  <methodname>strnatcasecmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc> This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would.  The behaviour of this function is similar to strnatcmp, except that the comparison is not case sensitive.  For more information see: Martin Pool's Natural Order String Comparison page. </desc>
</methodsynopsis>
<methodsynopsis function="strnatcmp">
  <type>int</type>
  <methodname>strnatcmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc> This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a "natural ordering".  An example of the difference between this algorithm and the regular computer string sorting algorithms (used in strcmp) can be seen below: ]]&amp;gt; The code above will generate the following output: img1.png [1] =&amp;gt; img10.png [2] =&amp;gt; img12.png [3] =&amp;gt; img2.png
) Natural order string comparison
Array
( [0] =&amp;gt; img1.png [1] =&amp;gt; img2.png [2] =&amp;gt; img10.png [3] =&amp;gt; img12.png
)
]]&amp;gt; For more information see: Martin Pool's Natural Order String Comparison page. </desc>
</methodsynopsis>
<methodsynopsis function="strncasecmp">
  <type>int</type>
  <methodname>strncasecmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc> This function is similar to strcasecmp, with the difference that you can specify the (upper limit of the) number of characters (len) from each string to be used in the comparison. </desc>
</methodsynopsis>
<methodsynopsis function="strncmp">
  <type>int</type>
  <methodname>strncmp</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>len</parameter>
  </methodparam>
  <desc> This function is similar to strcmp, with the difference that you can specify the (upper limit of the) number of characters (len) from each string to be used in the comparison. </desc>
</methodsynopsis>
<methodsynopsis function="strpbrk">
  <type>string</type>
  <methodname>strpbrk</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>char_list</parameter>
  </methodparam>
  <desc>strpbrk searches the haystack string for a char_list, and returns a string starting from the character found (or &amp;amp;false; if it is not found). </desc>
</methodsynopsis>
<methodsynopsis function="strpos">
  <type>int</type>
  <methodname>strpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the first occurrence of needle in the haystack string.  Unlike the strrpos, this function can take a full string as the needle parameter and the entire string will be used. </desc>
</methodsynopsis>
<methodsynopsis function="strrchr">
  <type>string</type>
  <methodname>strrchr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <desc> This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack. </desc>
</methodsynopsis>
<methodsynopsis function="strrev">
  <type>string</type>
  <methodname>strrev</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns string, reversed. Reversing a string with strrev
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="strripos">
  <type>int</type>
  <methodname>strripos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the last occurrence of needle in the haystack string.  Unlike strrpos, strripos is case-insensitive.  Also note that string positions start at 0, and not 1.  </desc>
</methodsynopsis>
<methodsynopsis function="strrpos">
  <type>int</type>
  <methodname>strrpos</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Returns the numeric position of the last occurrence of needle in the haystack string.  Note that the needle in this case can only be a single character in PHP 4.  If a string is passed as the needle, then only the first character of that string will be used. </desc>
</methodsynopsis>
<methodsynopsis function="strspn">
  <type>int</type>
  <methodname>strspn</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> The line of code: ]]&amp;gt; will assign 2 to $var, because the string "42" will be the longest segment containing characters from "1234567890". </desc>
</methodsynopsis>
<methodsynopsis function="strstr">
  <type>string</type>
  <methodname>strstr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <desc> Returns part of haystack string from the first occurrence of needle to the end of haystack. </desc>
</methodsynopsis>
<methodsynopsis function="strtok">
  <type>string</type>
  <methodname>strtok</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>token</parameter>
  </methodparam>
  <desc>strtok splits a string (str) into smaller strings (tokens), with each token being delimited by any  character from token. That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token. strtok example"; $tok = strtok(" \n\t");
}
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="strtolower">
  <type>string</type>
  <methodname>strtolower</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns string with all alphabetic characters converted to lowercase. </desc>
</methodsynopsis>
<methodsynopsis function="strtoupper">
  <type>string</type>
  <methodname>strtoupper</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <desc> Returns string with all alphabetic characters converted to uppercase. </desc>
</methodsynopsis>
<methodsynopsis function="strtr">
  <type>string</type>
  <methodname>strtr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>from</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>to</parameter>
  </methodparam>
  <desc> This function returns a copy of str, translating all occurrences of each character in from to the corresponding character in to. </desc>
</methodsynopsis>
<methodsynopsis function="substr_compare">
  <type>int</type>
  <methodname>substr_compare</methodname>
  <methodparam>
    <type>string</type>
    <parameter>main_str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>case_insensitivity</parameter>
  </methodparam>
  <desc>substr_compare compares main_str from position offset with str up to length characters. </desc>
</methodsynopsis>
<methodsynopsis function="substr_count">
  <type>int</type>
  <methodname>substr_count</methodname>
  <methodparam>
    <type>string</type>
    <parameter>haystack</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>needle</parameter>
  </methodparam>
  <desc>substr_count returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive. </desc>
</methodsynopsis>
<methodsynopsis function="substr_replace">
  <type>string</type>
  <methodname>substr_replace</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>replacement</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>substr_replace replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement. The result is returned. </desc>
</methodsynopsis>
<methodsynopsis function="substr">
  <type>string</type>
  <methodname>substr</methodname>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>substr returns the portion of string specified by the start and length parameters. </desc>
</methodsynopsis>
<methodsynopsis function="trim">
  <type>string</type>
  <methodname>trim</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charlist</parameter>
  </methodparam>
  <desc> This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim will strip these characters: " " (ASCII 32  (0x20)), an ordinary space. "\t" (ASCII 9  (0x09)), a tab. "\n" (ASCII 10  (0x0A)), a new line (line feed). "\r" (ASCII 13  (0x0D)), a carriage return. "\0" (ASCII 0  (0x00)), the NUL-byte. "\x0B" (ASCII 11  (0x0B)), a vertical tab. </desc>
</methodsynopsis>
<methodsynopsis function="ucfirst">
  <type>string</type>
  <methodname>ucfirst</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string with the first character of str capitalized, if that character is alphabetic. </desc>
</methodsynopsis>
<methodsynopsis function="ucwords">
  <type>string</type>
  <methodname>ucwords</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string with the first character of each word in str capitalized, if that character is alphabetic. </desc>
</methodsynopsis>
<methodsynopsis function="vfprintf">
  <type>int</type>
  <methodname>vfprintf</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>args</parameter>
  </methodparam>
  <desc> vfprintf: zero-padded integers ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="vprintf">
  <type>int</type>
  <methodname>vprintf</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>args</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="vsprintf">
  <type>string</type>
  <methodname>vsprintf</methodname>
  <methodparam>
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>args</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="wordwrap">
  <type>string</type>
  <methodname>wordwrap</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>break</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>cut</parameter>
  </methodparam>
  <desc> Returns a string with str wrapped at the column number specified by the optional width parameter.  The line is broken using the (optional) break parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actiongeturl">
  <type>void</type>
  <methodname>swf_actiongeturl</methodname>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <desc> The swf_actiongeturl function gets the URL specified by the parameter url with the target  target. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actiongotoframe">
  <type>void</type>
  <methodname>swf_actiongotoframe</methodname>
  <methodparam>
    <type>int</type>
    <parameter>framenumber</parameter>
  </methodparam>
  <desc> The swf_actiongotoframe function will go to the frame specified by framenumber, play it, and then stop. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actiongotolabel">
  <type>void</type>
  <methodname>swf_actiongotolabel</methodname>
  <methodparam>
    <type>string</type>
    <parameter>label</parameter>
  </methodparam>
  <desc> The swf_actiongotolabel function displays the frame with the label given by the label parameter and then stops. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actionnextframe">
  <type>void</type>
  <methodname>swf_actionnextframe</methodname>
  <void/>
  <desc> Go forward one frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actionplay">
  <type>void</type>
  <methodname>swf_actionplay</methodname>
  <void/>
  <desc> Start playing the flash movie from the current frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actionprevframe">
  <type>void</type>
  <methodname>swf_actionprevframe</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="swf_actionsettarget">
  <type>void</type>
  <methodname>swf_actionsettarget</methodname>
  <methodparam>
    <type>string</type>
    <parameter>target</parameter>
  </methodparam>
  <desc> The swf_actionsettarget function sets the context for all actions.  You can use this to control other flash movies that are currently playing. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actionstop">
  <type>void</type>
  <methodname>swf_actionstop</methodname>
  <void/>
  <desc> Stop playing the flash movie at the current frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actiontogglequality">
  <type>void</type>
  <methodname>swf_actiontogglequality</methodname>
  <void/>
  <desc> Toggle the flash movie between high and low quality. </desc>
</methodsynopsis>
<methodsynopsis function="swf_actionwaitforframe">
  <type>void</type>
  <methodname>swf_actionwaitforframe</methodname>
  <methodparam>
    <type>int</type>
    <parameter>framenumber</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>skipcount</parameter>
  </methodparam>
  <desc> The swf_actionwaitforframe function will check to see if the frame, specified by the framenumber parameter has been loaded, if not it will skip the number of actions specified by the skipcount parameter.  This can be useful for "Loading..." type animations. </desc>
</methodsynopsis>
<methodsynopsis function="swf_addbuttonrecord">
  <type>void</type>
  <methodname>swf_addbuttonrecord</methodname>
  <methodparam>
    <type>int</type>
    <parameter>states</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>shapeid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>depth</parameter>
  </methodparam>
  <desc> The swf_addbuttonrecord function allows you to define the specifics of using a button.  The first parameter, states, defines what states the button can have, these can be any or all of the following constants: BSHitTest, BSDown, BSOver or BSUp.  The second parameter, the shapeid is the look of the button, this is usually the object id of the shape of the button.  The depth parameter is the placement of the button in the current frame. swf_addbuttonrecord example ]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="swf_addcolor">
  <type>void</type>
  <methodname>swf_addcolor</methodname>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> The swf_addcolor function sets the global add color to the rgba color specified. This color is then used (implicitly) by the swf_placeobject, swf_modifyobject and the swf_addbuttonrecord functions.  The color of the object will be add by the rgba values when the object is written to the screen. </desc>
</methodsynopsis>
<methodsynopsis function="swf_closefile">
  <type>void</type>
  <methodname>swf_closefile</methodname>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>
        return_file
       </parameter>
  </methodparam>
  <desc> Close a file that was opened by the swf_openfile function.  If the  return_file parameter is set then the contents of the SWF file are returned from the function. </desc>
</methodsynopsis>
<methodsynopsis function="swf_definebitmap">
  <type>void</type>
  <methodname>swf_definebitmap</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>image_name</parameter>
  </methodparam>
  <desc> The swf_definebitmap function defines a bitmap given a GIF, JPEG, RGB or FI image.  The image will be converted into a Flash JPEG or Flash color map format. </desc>
</methodsynopsis>
<methodsynopsis function="swf_definefont">
  <type>void</type>
  <methodname>swf_definefont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fontid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fontname</parameter>
  </methodparam>
  <desc> The swf_definefont function defines a font given by the fontname parameter and gives it the id specified by the fontid parameter.  It then sets the font given by  fontname to the current font. </desc>
</methodsynopsis>
<methodsynopsis function="swf_defineline">
  <type>void</type>
  <methodname>swf_defineline</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> The swf_defineline defines a line starting from the x coordinate given by x1 and the y coordinate given by y1  parameter.  Up to the x coordinate given by the x2 parameter and the y coordinate given by the y2 parameter.  It will have a width defined by the width parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_definepoly">
  <type>void</type>
  <methodname>swf_definepoly</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>coords</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>npoints</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> The swf_definepoly function defines a polygon given an array of x, y coordinates (the coordinates are defined in the parameter coords).  The parameter npoints is the number of overall points that are contained in the array given by coords.  The width is the width of the polygon's border, if set to 0.0 the polygon is filled. </desc>
</methodsynopsis>
<methodsynopsis function="swf_definerect">
  <type>void</type>
  <methodname>swf_definerect</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> The swf_definerect defines a rectangle with an upper left hand coordinate given by the x, x1, and the y, y1. And a lower right hand coordinate given by the x coordinate, x2, and the y coordinate, y2 .  Width of the rectangles border is given by the width parameter, if the width is 0.0 then the rectangle is filled. </desc>
</methodsynopsis>
<methodsynopsis function="swf_definetext">
  <type>void</type>
  <methodname>swf_definetext</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>docenter</parameter>
  </methodparam>
  <desc> Define a text string (the str parameter) using the current font and font size.  The docenter is where the word is centered, if docenter is 1, then the word is centered in x. </desc>
</methodsynopsis>
<methodsynopsis function="swf_endbutton">
  <type>void</type>
  <methodname>swf_endbutton</methodname>
  <void/>
  <desc> The swf_endbutton function ends the definition of the current button. </desc>
</methodsynopsis>
<methodsynopsis function="swf_enddoaction">
  <type>void</type>
  <methodname>swf_enddoaction</methodname>
  <void/>
  <desc> Ends the current action started by the swf_startdoaction function. </desc>
</methodsynopsis>
<methodsynopsis function="swf_endshape">
  <type>void</type>
  <methodname>swf_endshape</methodname>
  <void/>
  <desc> The swf_endshape completes the definition of the current shape. </desc>
</methodsynopsis>
<methodsynopsis function="swf_endsymbol">
  <type>void</type>
  <methodname>swf_endsymbol</methodname>
  <void/>
  <desc> The swf_endsymbol function ends the definition of a symbol that was started by the swf_startsymbol function. </desc>
</methodsynopsis>
<methodsynopsis function="swf_fontsize">
  <type>void</type>
  <methodname>swf_fontsize</methodname>
  <methodparam>
    <type>float</type>
    <parameter>size</parameter>
  </methodparam>
  <desc> The swf_fontsize function changes the font size to the value given by the size parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_fontslant">
  <type>void</type>
  <methodname>swf_fontslant</methodname>
  <methodparam>
    <type>float</type>
    <parameter>slant</parameter>
  </methodparam>
  <desc> Set the current font slant to the angle indicated by the slant parameter.  Positive values create a forward slant, negative values create a negative slant. </desc>
</methodsynopsis>
<methodsynopsis function="swf_fonttracking">
  <type>void</type>
  <methodname>swf_fonttracking</methodname>
  <methodparam>
    <type>float</type>
    <parameter>tracking</parameter>
  </methodparam>
  <desc> Set the font tracking to the value specified by the tracking parameter.  This function is used to increase the spacing between letters and text, positive values increase the space and negative values decrease the space between letters. </desc>
</methodsynopsis>
<methodsynopsis function="swf_getbitmapinfo">
  <type>array</type>
  <methodname>swf_getbitmapinfo</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bitmapid</parameter>
  </methodparam>
  <desc> The swf_getbitmapinfo function returns an array of information about a bitmap given by the bitmapid parameter.  The returned array has the following elements: "size" -  The size in bytes of the bitmap. "width" -  The width in pixels of the bitmap. "height" -  The height in pixels of the bitmap. </desc>
</methodsynopsis>
<methodsynopsis function="swf_getfontinfo">
  <type>array</type>
  <methodname>swf_getfontinfo</methodname>
  <void/>
  <desc> The swf_getfontinfo function returns an associative array with the following parameters: Aheight -  The height in pixels of a capital A. xheight -  The height in pixels of a lowercase x. </desc>
</methodsynopsis>
<methodsynopsis function="swf_getframe">
  <type>int</type>
  <methodname>swf_getframe</methodname>
  <void/>
  <desc> The swf_getframe function gets the number of the current frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_labelframe">
  <type>void</type>
  <methodname>swf_labelframe</methodname>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Label the current frame with the name given by the name parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_lookat">
  <type>void</type>
  <methodname>swf_lookat</methodname>
  <methodparam>
    <type>float</type>
    <parameter>view_x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>view_y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>view_z</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>reference_x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>reference_y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>reference_z</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>twist</parameter>
  </methodparam>
  <desc> The swf_lookat function defines a viewing transformation by giving the viewing position (the parameters view_x, view_y, and view_z) and the coordinates of a reference point in the scene, the reference point is defined by the reference_x, reference_y , and reference_z parameters. The twist  controls the rotation along with viewer's z axis. </desc>
</methodsynopsis>
<methodsynopsis function="swf_modifyobject">
  <type>void</type>
  <methodname>swf_modifyobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>depth</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>how</parameter>
  </methodparam>
  <desc> Updates the position and/or color of the object at the specified depth, depth.  The parameter how determines what is updated. how can either be the constant MOD_MATRIX or MOD_COLOR or it can be a combination of both (MOD_MATRIX|MOD_COLOR). </desc>
</methodsynopsis>
<methodsynopsis function="swf_mulcolor">
  <type>void</type>
  <methodname>swf_mulcolor</methodname>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> The swf_mulcolor function sets the global multiply color to the rgba color specified.  This color is then used (implicitly) by the swf_placeobject, swf_modifyobject and the swf_addbuttonrecord functions.  The color of the object will be multiplied by the rgba values when the object is written to the screen. </desc>
</methodsynopsis>
<methodsynopsis function="swf_nextid">
  <type>int</type>
  <methodname>swf_nextid</methodname>
  <void/>
  <desc> The swf_nextid function returns the next available object id. </desc>
</methodsynopsis>
<methodsynopsis function="swf_oncondition">
  <type>void</type>
  <methodname>swf_oncondition</methodname>
  <methodparam>
    <type>int</type>
    <parameter>transition</parameter>
  </methodparam>
  <desc> The swf_oncondition function describes a transition that will trigger an action list.  There are several types of possible transitions, the following are for buttons defined as TYPE_MENUBUTTON: IdletoOverUp OverUptoIdle OverUptoOverDown OverDowntoOverUp IdletoOverDown OutDowntoIdle MenuEnter (IdletoOverUp|IdletoOverDown) MenuExit (OverUptoIdle|OverDowntoIdle) For TYPE_PUSHBUTTON there are the following options: IdletoOverUp OverUptoIdle OverUptoOverDown OverDowntoOverUp OverDowntoOutDown OutDowntoOverDown OutDowntoIdle ButtonEnter (IdletoOverUp|OutDowntoOverDown) ButtonExit  (OverUptoIdle|OverDowntoOutDown) </desc>
</methodsynopsis>
<methodsynopsis function="swf_openfile">
  <type>void</type>
  <methodname>swf_openfile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>height</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>framerate</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <desc> The swf_openfile function opens a new file named filename with a width of width and a height of height a frame rate of framerate and background with a red color of r a green color of g and a blue color of b. </desc>
</methodsynopsis>
<methodsynopsis function="swf_ortho">
  <type>void</type>
  <methodname>swf_ortho</methodname>
  <methodparam>
    <type>float</type>
    <parameter>xmin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xmax</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymax</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>zmin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>zmax</parameter>
  </methodparam>
  <desc> The swf_ortho function defines an orthographic mapping of user coordinates onto the current viewport. </desc>
</methodsynopsis>
<methodsynopsis function="swf_ortho2">
  <type>void</type>
  <methodname>swf_ortho2</methodname>
  <methodparam>
    <type>float</type>
    <parameter>xmin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xmax</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymax</parameter>
  </methodparam>
  <desc> The swf_ortho2 function defines a two dimensional orthographic mapping of user coordinates onto the current viewport, this defaults to one to one mapping of the area of the Flash movie.  If a perspective transformation is desired, the swf_perspective  function can be used. </desc>
</methodsynopsis>
<methodsynopsis function="swf_perspective">
  <type>void</type>
  <methodname>swf_perspective</methodname>
  <methodparam>
    <type>float</type>
    <parameter>fovy</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>aspect</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>near</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>far</parameter>
  </methodparam>
  <desc> The swf_perspective function defines a perspective projection transformation.  The fovy parameter is field-of-view angle in the y direction.  The aspect parameter should be set to the aspect ratio of the viewport that is being drawn onto.  The near parameter is the near clipping plane and the far parameter is the far clipping plane. </desc>
</methodsynopsis>
<methodsynopsis function="swf_placeobject">
  <type>void</type>
  <methodname>swf_placeobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>depth</parameter>
  </methodparam>
  <desc> Places the object specified by objid in the current frame at a depth of depth. The objid parameter and the depth must be between 1 and 65535. </desc>
</methodsynopsis>
<methodsynopsis function="swf_polarview">
  <type>void</type>
  <methodname>swf_polarview</methodname>
  <methodparam>
    <type>float</type>
    <parameter>dist</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>azimuth</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>incidence</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>twist</parameter>
  </methodparam>
  <desc> The swf_polarview function defines the viewer's position in polar coordinates.  The dist parameter gives the distance between the viewpoint to the world space origin.  The azimuth parameter defines the azimuthal angle in the x,y coordinate plane, measured in distance from the y axis.  The incidence parameter defines the angle of incidence in the y,z plane, measured in distance from the z axis.  The incidence angle is defined as the angle of the viewport relative to the z axis.  Finally the twist specifies the amount that the viewpoint is to be rotated about the line of sight using the right hand rule. </desc>
</methodsynopsis>
<methodsynopsis function="swf_popmatrix">
  <type>void</type>
  <methodname>swf_popmatrix</methodname>
  <void/>
  <desc> The swf_popmatrix function pushes the current transformation matrix back onto the stack. </desc>
</methodsynopsis>
<methodsynopsis function="swf_posround">
  <type>void</type>
  <methodname>swf_posround</methodname>
  <methodparam>
    <type>int</type>
    <parameter>round</parameter>
  </methodparam>
  <desc> The swf_posround function enables or disables the rounding of the translation when objects are placed or moved, there are times when text becomes more readable because rounding has been enabled.  The round is whether to enable rounding or not, if set to the value of 1, then rounding is enabled, if set to 0 then rounding is disabled. </desc>
</methodsynopsis>
<methodsynopsis function="swf_pushmatrix">
  <type>void</type>
  <methodname>swf_pushmatrix</methodname>
  <void/>
  <desc> The swf_pushmatrix function pushes the current transformation matrix back onto the stack. </desc>
</methodsynopsis>
<methodsynopsis function="swf_removeobject">
  <type>void</type>
  <methodname>swf_removeobject</methodname>
  <methodparam>
    <type>int</type>
    <parameter>depth</parameter>
  </methodparam>
  <desc> Removes the object at the depth specified by depth. </desc>
</methodsynopsis>
<methodsynopsis function="swf_rotate">
  <type>void</type>
  <methodname>swf_rotate</methodname>
  <methodparam>
    <type>float</type>
    <parameter>angle</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>axis</parameter>
  </methodparam>
  <desc> The swf_rotate rotates the current transformation by the angle given by the angle parameter around the axis given by the axis parameter.  Valid values for the axis are 'x' (the x axis), 'y' (the y axis) or 'z' (the z axis). </desc>
</methodsynopsis>
<methodsynopsis function="swf_scale">
  <type>void</type>
  <methodname>swf_scale</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>z</parameter>
  </methodparam>
  <desc> The swf_scale scales the x coordinate of the curve by the value of the x parameter, the y coordinate of the curve by the value of the y parameter, and the z coordinate of the curve by the value of the z parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_setfont">
  <type>void</type>
  <methodname>swf_setfont</methodname>
  <methodparam>
    <type>int</type>
    <parameter>fontid</parameter>
  </methodparam>
  <desc> The swf_setfont sets the current font to the value given by the fontid parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_setframe">
  <type>void</type>
  <methodname>swf_setframe</methodname>
  <methodparam>
    <type>int</type>
    <parameter>framenumber</parameter>
  </methodparam>
  <desc> The swf_setframe changes the active frame to the frame specified by framenumber. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapearc">
  <type>void</type>
  <methodname>swf_shapearc</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ang1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ang2</parameter>
  </methodparam>
  <desc> The swf_shapearc function draws a circular arc from angle A given by the ang1 parameter to angle B given by the ang2 parameter.  The center of the circle has an x coordinate given by the x parameter and a y coordinate given by the y, the radius of the circle is given by the r parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapecurveto">
  <type>void</type>
  <methodname>swf_shapecurveto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <desc> The swf_shapecurveto function draws a quadratic bezier curve from the current location, though the x coordinate given by x1 and the y  coordinate given by y1 to the x coordinate given by x2 and the y coordinate given by y2.  The current position is then set to the x,y coordinates given by the x2 and y2 parameters </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapecurveto3">
  <type>void</type>
  <methodname>swf_shapecurveto3</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y1</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y2</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>x3</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y3</parameter>
  </methodparam>
  <desc> Draw a cubic bezier curve using the x,y coordinate pairs x1, y1 and x2,y2 as off curve control points and the x,y coordinate x3, y3 as an endpoint.  The current position is then set to the x,y coordinate pair given by x3,y3. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapefillbitmapclip">
  <type>void</type>
  <methodname>swf_shapefillbitmapclip</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bitmapid</parameter>
  </methodparam>
  <desc> Sets the fill to bitmap clipped, empty spaces will be filled by the bitmap given by the bitmapid parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapefillbitmaptile">
  <type>void</type>
  <methodname>swf_shapefillbitmaptile</methodname>
  <methodparam>
    <type>int</type>
    <parameter>bitmapid</parameter>
  </methodparam>
  <desc> Sets the fill to bitmap tile, empty spaces will be filled by the bitmap given by the bitmapid parameter (tiled). </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapefilloff">
  <type>void</type>
  <methodname>swf_shapefilloff</methodname>
  <void/>
  <desc> The swf_shapefilloff function turns off filling for the current shape. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapefillsolid">
  <type>void</type>
  <methodname>swf_shapefillsolid</methodname>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <desc> The swf_shapefillsolid function sets the current fill style to solid, and then sets the fill color to the values of the rgba parameters. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapelinesolid">
  <type>void</type>
  <methodname>swf_shapelinesolid</methodname>
  <methodparam>
    <type>float</type>
    <parameter>r</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>g</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>b</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>a</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>width</parameter>
  </methodparam>
  <desc> The swf_shapelinesolid function sets the current line style to the color of the rgba parameters and width to the width parameter.  If 0.0 is given as a width then no lines are drawn. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapelineto">
  <type>void</type>
  <methodname>swf_shapelineto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> The swf_shapelineto draws a line to the x,y coordinates given by the x parameter &amp;amp; the y parameter.  The current position is then set to the x,y parameters. </desc>
</methodsynopsis>
<methodsynopsis function="swf_shapemoveto">
  <type>void</type>
  <methodname>swf_shapemoveto</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <desc> The swf_shapemoveto function moves the current position to the x coordinate given by the x parameter and the y position given by the y parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_showframe">
  <type>void</type>
  <methodname>swf_showframe</methodname>
  <void/>
  <desc> The swf_showframe function will output the current frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_startbutton">
  <type>void</type>
  <methodname>swf_startbutton</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> The swf_startbutton function starts off the definition of a button.  The type parameter can either be TYPE_MENUBUTTON or TYPE_PUSHBUTTON.  The TYPE_MENUBUTTON constant allows the focus to travel from the button when the mouse is down, TYPE_PUSHBUTTON does not allow the focus to travel when the mouse is down. </desc>
</methodsynopsis>
<methodsynopsis function="swf_startdoaction">
  <type>void</type>
  <methodname>swf_startdoaction</methodname>
  <void/>
  <desc> The swf_startdoaction function starts the description of an action list for the current frame.  This must be called before actions are defined for the current frame. </desc>
</methodsynopsis>
<methodsynopsis function="swf_startshape">
  <type>void</type>
  <methodname>swf_startshape</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <desc> The swf_startshape function starts a complex shape, with an object id given by the objid parameter. </desc>
</methodsynopsis>
<methodsynopsis function="swf_startsymbol">
  <type>void</type>
  <methodname>swf_startsymbol</methodname>
  <methodparam>
    <type>int</type>
    <parameter>objid</parameter>
  </methodparam>
  <desc> Define an object id as a symbol.  Symbols are tiny flash movies that can be played simultaneously.  The objid parameter is the object id you want to define as a symbol. </desc>
</methodsynopsis>
<methodsynopsis function="swf_textwidth">
  <type>float</type>
  <methodname>swf_textwidth</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> The swf_textwidth function gives the width of the string, str, in pixels, using the current font and font size. </desc>
</methodsynopsis>
<methodsynopsis function="swf_translate">
  <type>void</type>
  <methodname>swf_translate</methodname>
  <methodparam>
    <type>float</type>
    <parameter>x</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>y</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>z</parameter>
  </methodparam>
  <desc> The swf_translate function translates the current transformation by the x, y, and z values given. </desc>
</methodsynopsis>
<methodsynopsis function="swf_viewport">
  <type>void</type>
  <methodname>swf_viewport</methodname>
  <methodparam>
    <type>float</type>
    <parameter>xmin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>xmax</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymin</parameter>
  </methodparam>
  <methodparam>
    <type>float</type>
    <parameter>ymax</parameter>
  </methodparam>
  <desc> The swf_viewport function selects an area for future drawing for xmin to xmax and ymin to ymax, if this function is not called the area defaults to the size of the screen. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_affected_rows">
  <type>int</type>
  <methodname>sybase_affected_rows</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>sybase_affected_rows returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier.  If the link identifier isn't specified, the last opened link is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_close">
  <type>bool</type>
  <methodname>sybase_close</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>sybase_close closes the link to a Sybase database that's associated with the specified link  link_identifier. If the link identifier isn't specified, the last opened link is assumed. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_connect">
  <type>resource</type>
  <methodname>sybase_connect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>servername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>appname</parameter>
  </methodparam>
  <desc>  Returns a positive Sybase link identifier on success, or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_data_seek">
  <type>bool</type>
  <methodname>sybase_data_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_identifier</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="sybase_deadlock_retry_count">
  <type>void</type>
  <methodname>sybase_deadlock_retry_count</methodname>
  <methodparam>
    <type>int</type>
    <parameter>retry_count</parameter>
  </methodparam>
  <desc>  Using sybase_deadlock_retry_count, the number of retries can be defined in cases of deadlocks. By default, every deadlock is retried an infinite number of times or until the process is killed by Sybase, the  executing script is killed (for instance, by set_time_limit) or the query succeeds. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_fetch_array">
  <type>array</type>
  <methodname>sybase_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_fetch_assoc">
  <type>array</type>
  <methodname>sybase_fetch_assoc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_fetch_field">
  <type>object</type>
  <methodname>sybase_fetch_field</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Returns an object containing field information.   </desc>
</methodsynopsis>
<methodsynopsis function="sybase_fetch_object">
  <type>object</type>
  <methodname>sybase_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>object</parameter>
  </methodparam>
  <desc> Returns an object with properties that correspond to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_fetch_row">
  <type>array</type>
  <methodname>sybase_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc> Returns an array that corresponds to the fetched row, or &amp;amp;false; if there are no more rows. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_field_seek">
  <type>bool</type>
  <methodname>sybase_field_seek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_offset</parameter>
  </methodparam>
  <desc> Seeks to the specified field offset.  If the next call to sybase_fetch_field won't include a field offset, this field would be returned. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_free_result">
  <type>bool</type>
  <methodname>sybase_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>sybase_free_result only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call sybase_free_result with the result identifier as an argument and the associated result memory will be freed. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_get_last_message">
  <type>string</type>
  <methodname>sybase_get_last_message</methodname>
  <void/>
  <desc>sybase_get_last_message returns the last message reported by the server. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_min_client_severity">
  <type>void</type>
  <methodname>sybase_min_client_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
  <desc>sybase_min_client_severity sets the minimum client severity level. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_min_error_severity">
  <type>void</type>
  <methodname>sybase_min_error_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
  <desc>sybase_min_error_severity sets the minimum error severity level. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_min_message_severity">
  <type>void</type>
  <methodname>sybase_min_message_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
  <desc>sybase_min_message_severity sets the minimum message severity level. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_min_server_severity">
  <type>void</type>
  <methodname>sybase_min_server_severity</methodname>
  <methodparam>
    <type>int</type>
    <parameter>severity</parameter>
  </methodparam>
  <desc>sybase_min_server_severity sets the minimum server severity level. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_num_fields">
  <type>int</type>
  <methodname>sybase_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>sybase_num_fields returns the number of fields in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_num_rows">
  <type>int</type>
  <methodname>sybase_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <desc>sybase_num_rows returns the number of rows in a result set. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_pconnect">
  <type>resource</type>
  <methodname>sybase_pconnect</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>servername</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>username</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>charset</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>appname</parameter>
  </methodparam>
  <desc>  Returns a positive Sybase persistent link identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_query">
  <type>resource</type>
  <methodname>sybase_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc> Returns a positive Sybase result identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_result">
  <type>string</type>
  <methodname>sybase_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>row</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc>  Returns the contents of the cell at the row and offset in the specified Sybase result set. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_select_db">
  <type>bool</type>
  <methodname>sybase_select_db</methodname>
  <methodparam>
    <type>string</type>
    <parameter>database_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <desc>sybase_select_db sets the current active database on the server that's associated with the specified link identifier.  If no link identifier is specified, the last opened link is assumed. If no link is open, the function will try to establish a link as if sybase_connect was called, and use it. </desc>
</methodsynopsis>
<methodsynopsis function="sybase_set_message_handler">
  <type>bool</type>
  <methodname>sybase_set_message_handler</methodname>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection</parameter>
  </methodparam>
  <desc>sybase_set_message_handler sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name.  </desc>
</methodsynopsis>
<methodsynopsis function="sybase_unbuffered_query">
  <type>resource</type>
  <methodname>sybase_unbuffered_query</methodname>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>link_identifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>store_result</parameter>
  </methodparam>
  <desc> Returns a positive Sybase result identifier on success, or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="tcpwrap_check">
  <type>bool</type>
  <methodname>tcpwrap_check</methodname>
  <methodparam>
    <type>string</type>
    <parameter>daemon</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>address</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>nodns</parameter>
  </methodparam>
  <desc> This function consults the /etc/hosts.allow and  /etc/hosts.deny files to check if access to service  daemon should be granted or denied for a client. </desc>
</methodsynopsis>
<methodsynopsis function="ob_tidyhandler">
  <type>string</type>
  <methodname>ob_tidyhandler</methodname>
  <methodparam>
    <type>string</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc>ob_tidyhandler is intended to be used as a callback function for ob_start to repair the buffer. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_access_count">
  <type>int</type>
  <methodname>tidy_access_count</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>tidy_access_count returns the number of accessibility warnings found for the specified document. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_clean_repair">
  <type>bool</type>
  <methodname>tidy_clean_repair</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_config_count">
  <type>int</type>
  <methodname>tidy_config_count</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>tidy_config_count returns the number of errors encountered in the configuration of the specified tidy object. </desc>
</methodsynopsis>
<methodsynopsis function="tidy::__construct">
  <type>tidy</type>
  <methodname>tidy::__construct</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>config</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc>tidy::__construct constructs a new tidy object. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_diagnose">
  <type>bool</type>
  <methodname>tidy_diagnose</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_error_count">
  <type>int</type>
  <methodname>tidy_error_count</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>tidy_error_count returns the number of Tidy errors encountered for the specified document. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_body">
  <type>tidyNode</type>
  <methodname>tidy_get_body</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_config">
  <type>array</type>
  <methodname>tidy_get_config</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_error_buffer">
  <type>string</type>
  <methodname>tidy_get_error_buffer</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_head">
  <type>tidyNode</type>
  <methodname>tidy_get_head</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_html_ver">
  <type>int</type>
  <methodname>tidy_get_html_ver</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_html">
  <type>tidyNode</type>
  <methodname>tidy_get_html</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_output">
  <type>string</type>
  <methodname>tidy_get_output</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>tidy_get_output returns a string with the repaired html. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_release">
  <type>string</type>
  <methodname>tidy_get_release</methodname>
  <void/>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_root">
  <type>tidyNode</type>
  <methodname>tidy_get_root</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_get_status">
  <type>int</type>
  <methodname>tidy_get_status</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_getopt">
  <type>mixed</type>
  <methodname>tidy_getopt</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_is_xhtml">
  <type>bool</type>
  <methodname>tidy_is_xhtml</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_is_xml">
  <type>bool</type>
  <methodname>tidy_is_xml</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_load_config">
  <type>void</type>
  <methodname>tidy_load_config</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> This function loads a Tidy configuration file, with the specified encoding. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_node-&gt;children">
  <type>array</type>
  <methodname>tidy_node-&gt;children</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="tidy_node-&gt;get_attr">
  <type>tidy_attr</type>
  <methodname>tidy_node-&gt;get_attr</methodname>
  <methodparam>
    <type>int</type>
    <parameter>attrib_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="tidy_node-&gt;get_nodes">
  <type>array</type>
  <methodname>tidy_node-&gt;get_nodes</methodname>
  <methodparam>
    <type>int</type>
    <parameter>node_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="tidy_node-&gt;next">
  <type>tidy_node</type>
  <methodname>tidy_node-&gt;next</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="tidy_node-&gt;prev">
  <type>tidy_node</type>
  <methodname>tidy_node-&gt;prev</methodname>
  <void/>
</methodsynopsis>
<methodsynopsis function="tidy_parse_file">
  <type>tidy</type>
  <methodname>tidy_parse_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>config</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_parse_string">
  <type>tidy</type>
  <methodname>tidy_parse_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>input</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>config</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>Procedural style:</desc>
</methodsynopsis>
<methodsynopsis function="tidy_repair_file">
  <type>string</type>
  <methodname>tidy_repair_file</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>config</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc> This function repairs the given file and returns it as a string. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_repair_string">
  <type>string</type>
  <methodname>tidy_repair_string</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>config</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> This function repairs the given string. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_reset_config">
  <type>bool</type>
  <methodname>tidy_reset_config</methodname>
  <void/>
  <desc> This function restores the Tidy configuration to the default values. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_save_config">
  <type>bool</type>
  <methodname>tidy_save_config</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc>tidy_save_config saves current settings to the specified file. Only non-default values are written. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_set_encoding">
  <type>bool</type>
  <methodname>tidy_set_encoding</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> Sets the encoding for input/output documents. &amp;amp;return.success; Possible values for encoding are ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5 and shiftjis </desc>
</methodsynopsis>
<methodsynopsis function="tidy_setopt">
  <type>bool</type>
  <methodname>tidy_setopt</methodname>
  <methodparam>
    <type>string</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>tidy_setopt updates the specified option with a new value. </desc>
</methodsynopsis>
<methodsynopsis function="tidy_warning_count">
  <type>int</type>
  <methodname>tidy_warning_count</methodname>
  <methodparam>
    <type>tidy</type>
    <parameter>object</parameter>
  </methodparam>
  <desc>tidy_warning_count returns the number of Tidy warnings encountered for the specified document. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;hasChildren">
  <type>bool</type>
  <methodname>tidyNode-&gt;hasChildren</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;has_children in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;hasSiblings">
  <type>bool</type>
  <methodname>tidyNode-&gt;hasSiblings</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;has_siblings in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isAsp">
  <type>bool</type>
  <methodname>tidyNode-&gt;isAsp</methodname>
  <void/>
  <desc> This functions returns &amp;amp;true; if the current node is ASP, or &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isComment">
  <type>bool</type>
  <methodname>tidyNode-&gt;isComment</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;is_comment in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isHtml">
  <type>bool</type>
  <methodname>tidyNode-&gt;isHtml</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;is_html in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isJste">
  <type>bool</type>
  <methodname>tidyNode-&gt;isJste</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;is_jste in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isPhp">
  <type>bool</type>
  <methodname>tidyNode-&gt;isPhp</methodname>
  <void/>
  <desc> Returns &amp;amp;true; if the current node is PHP code, &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="tidyNode-&gt;isText">
  <type>bool</type>
  <methodname>tidyNode-&gt;isText</methodname>
  <void/>
  <desc> This function was named tidy_node-&amp;gt;is_text in PHP 4/Tidy 1. </desc>
</methodsynopsis>
<methodsynopsis function="token_get_all">
  <type>array</type>
  <methodname>token_get_all</methodname>
  <methodparam>
    <type>string</type>
    <parameter>source</parameter>
  </methodparam>
  <desc>token_get_all parses the given source  string into PHP language tokens using the Zend engine's lexical scanner. </desc>
</methodsynopsis>
<methodsynopsis function="token_name">
  <type>string</type>
  <methodname>token_name</methodname>
  <methodparam>
    <type>int</type>
    <parameter>token</parameter>
  </methodparam>
  <desc>token_name gets the symbolic name for a PHP  token value.  </desc>
</methodsynopsis>
<methodsynopsis function="odbc_autocommit">
  <type>bool</type>
  <methodname>odbc_autocommit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>OnOff</parameter>
  </methodparam>
  <desc> Without the OnOff parameter, this function returns auto-commit status for connection_id.  &amp;amp;true; is returned if auto-commit is on, &amp;amp;false; if it is off or an error occurs. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_binmode">
  <type>bool</type>
  <methodname>odbc_binmode</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> (ODBC SQL types affected: BINARY, VARBINARY, LONGVARBINARY) </desc>
</methodsynopsis>
<methodsynopsis function="odbc_close_all">
  <type>void</type>
  <methodname>odbc_close_all</methodname>
  <void/>
  <desc>odbc_close_all will close down all connections to database server(s). This function will fail if there are open transactions on a connection. This connection will remain open in this case. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_close">
  <type>void</type>
  <methodname>odbc_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc>odbc_close will close down the connection to the database server associated with the given connection identifier. This function will fail if there are open transactions on this connection.  The connection will remain open in this case. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_columnprivileges">
  <type>resource</type>
  <methodname>odbc_columnprivileges</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> Lists columns and associated privileges for the given table. Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_columns">
  <type>resource</type>
  <methodname>odbc_columns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>column_name</parameter>
  </methodparam>
  <desc> Lists all columns in the requested range.  Returns an ODBC result identifier containing the information or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_commit">
  <type>bool</type>
  <methodname>odbc_commit</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc>odbc_commit commits all pending transactions  on the connection_id connection. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="odbc_connect">
  <type>resource</type>
  <methodname>odbc_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dsn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_type</parameter>
  </methodparam>
  <desc> Returns an ODBC connection id or 0 (&amp;amp;false;) on error. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_cursor">
  <type>string</type>
  <methodname>odbc_cursor</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> odbc_cursor will return a cursorname for the given result_id. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_data_source">
  <type>array</type>
  <methodname>odbc_data_source</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>fetch_type</parameter>
  </methodparam>
  <desc> Returns &amp;amp;false; on error, and an array upon success. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_do">
  <type>resource</type>
  <methodname>odbc_do</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>conn_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>odbc_do will execute a query on the given connection. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_error">
  <type>string</type>
  <methodname>odbc_error</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="odbc_errormsg">
  <type>string</type>
  <methodname>odbc_errormsg</methodname>
  <methodparam choice="opt">
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="odbc_exec">
  <type>resource</type>
  <methodname>odbc_exec</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query_string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> Returns &amp;amp;false; on error.  Returns an ODBC result identifier if the SQL command was executed successfully. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_execute">
  <type>bool</type>
  <methodname>odbc_execute</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>parameters_array</parameter>
  </methodparam>
  <desc> Executes a statement prepared with odbc_prepare.&amp;amp;return.success; The array parameters_array only needs to be given if you really have parameters in your statement. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_fetch_array">
  <type>array</type>
  <methodname>odbc_fetch_array</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>rownumber</parameter>
  </methodparam>
  <desc> Fetch an associative array from an ODBC query. See the  changelog below for when this function is available. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_fetch_into">
  <type>int</type>
  <methodname>odbc_fetch_into</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result_array</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>rownumber</parameter>
  </methodparam>
  <desc> Returns the number of columns in the result; &amp;amp;false; on error. result_array must be passed by reference, but it can be of any type since it will be converted to type array. The array will contain the column values starting at array index 0. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_fetch_object">
  <type>object</type>
  <methodname>odbc_fetch_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>rownumber</parameter>
  </methodparam>
  <desc> Fetch an object from an ODBC query. See the changelog below for when this function is available. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_fetch_row">
  <type>bool</type>
  <methodname>odbc_fetch_row</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>row_number</parameter>
  </methodparam>
  <desc> If odbc_fetch_row was successful (there was a row), &amp;amp;true; is returned.  If there are no more rows, &amp;amp;false; is returned. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_len">
  <type>int</type>
  <methodname>odbc_field_len</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>odbc_field_len will return the length of the field referenced by number in the given ODBC result identifier.  Field numbering starts at 1. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_name">
  <type>string</type>
  <methodname>odbc_field_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>odbc_field_name will return the name of the field occupying the given column number in the given ODBC result identifier.  Field numbering starts at 1. &amp;amp;false; is returned on error. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_num">
  <type>int</type>
  <methodname>odbc_field_num</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>field_name</parameter>
  </methodparam>
  <desc>odbc_field_num will return the number of the column slot that corresponds to the named field in the given ODBC result identifier.  Field numbering starts at 1. &amp;amp;false; is returned on error. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_precision">
  <type>int</type>
  <methodname>odbc_field_precision</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>odbc_field_precision will return the precision of the field referenced by number in the given ODBC result identifier. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_scale">
  <type>int</type>
  <methodname>odbc_field_scale</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>odbc_field_scale will return the scale of the field referenced by number in the given ODBC result identifier. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_field_type">
  <type>string</type>
  <methodname>odbc_field_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>field_number</parameter>
  </methodparam>
  <desc>odbc_field_type will return the SQL type of the field referenced by number in the given ODBC result identifier.  Field numbering starts at 1. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_foreignkeys">
  <type>resource</type>
  <methodname>odbc_foreignkeys</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pk_qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pk_owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>pk_table</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fk_qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fk_owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>fk_table</parameter>
  </methodparam>
  <desc>odbc_foreignkeys retrieves information about foreign keys. Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_free_result">
  <type>bool</type>
  <methodname>odbc_free_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc> Always returns &amp;amp;true;. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_gettypeinfo">
  <type>resource</type>
  <methodname>odbc_gettypeinfo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>data_type</parameter>
  </methodparam>
  <desc> Retrieves information about data types supported by the data source.  Returns an ODBC result identifier or &amp;amp;false; on failure.  The optional argument data_type can be used to restrict the information to a single data type. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_longreadlen">
  <type>bool</type>
  <methodname>odbc_longreadlen</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> (ODBC SQL types affected: LONG, LONGVARBINARY) The number of bytes returned to PHP is controlled by the parameter length. If it is set to 0, Long column data is passed through to the client. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_next_result">
  <type>bool</type>
  <methodname>odbc_next_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="odbc_num_fields">
  <type>int</type>
  <methodname>odbc_num_fields</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>odbc_num_fields will return the number of fields (columns) in an ODBC result.  This function will return -1 on error.  The argument is a valid result identifier returned by odbc_exec. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_num_rows">
  <type>int</type>
  <methodname>odbc_num_rows</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <desc>odbc_num_rows will return the number of rows in an ODBC result.  This function will return -1 on error.  For INSERT, UPDATE and DELETE statements odbc_num_rows returns the number of rows affected.  For a SELECT clause this can be  the number of rows available. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_pconnect">
  <type>resource</type>
  <methodname>odbc_pconnect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>dsn</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>cursor_type</parameter>
  </methodparam>
  <desc> Returns an ODBC connection id or 0 (&amp;amp;false;) on error.  This function is much like odbc_connect, except that the connection is not really closed when the script has finished.  Future requests for a connection with the same dsn, user, password combination (via odbc_connect and odbc_pconnect) can reuse the persistent connection. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_prepare">
  <type>resource</type>
  <methodname>odbc_prepare</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query_string</parameter>
  </methodparam>
  <desc> Returns &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_primarykeys">
  <type>resource</type>
  <methodname>odbc_primarykeys</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table</parameter>
  </methodparam>
  <desc> Returns the column names that comprise the primary key for a table.  Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_procedurecolumns">
  <type>resource</type>
  <methodname>odbc_procedurecolumns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>proc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>column</parameter>
  </methodparam>
  <desc> Returns the list of input and output parameters, as well as the  columns that make up the result set for the specified procedures. Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_procedures">
  <type>resource</type>
  <methodname>odbc_procedures</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc>  Lists all procedures in the requested range.  Returns an ODBC result identifier containing the information or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_result_all">
  <type>int</type>
  <methodname>odbc_result_all</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>format</parameter>
  </methodparam>
  <desc> Returns the number of rows in the result or &amp;amp;false; on error. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_result">
  <type>string</type>
  <methodname>odbc_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>result_id</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>field</parameter>
  </methodparam>
  <desc> Returns the contents of the field. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_rollback">
  <type>bool</type>
  <methodname>odbc_rollback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <desc> Rolls back all pending statements on connection_id.  Returns &amp;amp;true; on success, &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_setoption">
  <type>bool</type>
  <methodname>odbc_setoption</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>function</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>param</parameter>
  </methodparam>
  <desc> This function allows fiddling with the ODBC options for a particular connection or query result.  It was written to help find work around to problems in quirky ODBC drivers.  You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have.  You will certainly need a good ODBC reference to explain all the different options and values that can be used.  Different driver versions support different options. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_specialcolumns">
  <type>resource</type>
  <methodname>odbc_specialcolumns</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>scope</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>nullable</parameter>
  </methodparam>
  <desc> The result set has the following columns: SCOPECOLUMN_NAMEDATA_TYPETYPE_NAMEPRECISIONLENGTHSCALEPSEUDO_COLUMN</desc>
</methodsynopsis>
<methodsynopsis function="odbc_statistics">
  <type>resource</type>
  <methodname>odbc_statistics</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>table_name</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>unique</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>accuracy</parameter>
  </methodparam>
  <desc> Get statistics about a table and its indexes. Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_tableprivileges">
  <type>resource</type>
  <methodname>odbc_tableprivileges</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Lists tables in the requested range and the privileges associated with each table.  Returns an ODBC result identifier or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="odbc_tables">
  <type>resource</type>
  <methodname>odbc_tables</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>connection_id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>qualifier</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>owner</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>types</parameter>
  </methodparam>
  <desc> Lists all tables in the requested range.  Returns an ODBC result identifier containing the information or &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="base64_decode">
  <type>string</type>
  <methodname>base64_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>encoded_data</parameter>
  </methodparam>
  <desc>base64_decode decodes encoded_data and returns the original data or &amp;amp;false; on failure. The returned data may be binary. </desc>
</methodsynopsis>
<methodsynopsis function="base64_encode">
  <type>string</type>
  <methodname>base64_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc>base64_encode returns data encoded with base64.  This encoding is designed to make binary data survive transport through transport layers that are not 8-bit clean, such as mail bodies. </desc>
</methodsynopsis>
<methodsynopsis function="get_headers">
  <type>array</type>
  <methodname>get_headers</methodname>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>format</parameter>
  </methodparam>
  <desc>get_headers returns an array with the headers sent by the server in response to a HTTP request. Returns &amp;amp;false; on failure. </desc>
</methodsynopsis>
<methodsynopsis function="get_meta_tags">
  <type>array</type>
  <methodname>get_meta_tags</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc> Opens filename and parses it line by line for &amp;lt;meta&amp;gt; tags in the file.  This can be a local file or an URL.  The parsing stops at  &amp;lt;/head&amp;gt;. </desc>
</methodsynopsis>
<methodsynopsis function="http_build_query">
  <type>string</type>
  <methodname>http_build_query</methodname>
  <methodparam>
    <type>array</type>
    <parameter>formdata</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>numeric_prefix</parameter>
  </methodparam>
  <desc>arg_separator.output is used to separate arguments. </desc>
</methodsynopsis>
<methodsynopsis function="parse_url">
  <type>array</type>
  <methodname>parse_url</methodname>
  <methodparam>
    <type>string</type>
    <parameter>url</parameter>
  </methodparam>
  <desc> This function returns an associative array containing any of the various components of the URL that are present. If one of them is missing, no entry will be created for it. The components are : scheme - e.g. http hostportuserpasspathquery  - after the question mark ?fragment -  after the hashmark #</desc>
</methodsynopsis>
<methodsynopsis function="rawurldecode">
  <type>string</type>
  <methodname>rawurldecode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters. </desc>
</methodsynopsis>
<methodsynopsis function="rawurlencode">
  <type>string</type>
  <methodname>rawurlencode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string in which all non-alphanumeric characters except -_. have been replaced with a percent (%) sign followed by two hex digits.  This is the encoding described in RFC 1738 for protecting literal characters from being interpreted as special URL delimiters, and for protecting URL's from being mangled by transmission media with character conversions (like some email systems). For example, if you want to include a password in an FTP URL: </desc>
</methodsynopsis>
<methodsynopsis function="urldecode">
  <type>string</type>
  <methodname>urldecode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Decodes any %## encoding in the given string.  The decoded string is returned. urldecode example\n"; $i++;
}
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="urlencode">
  <type>string</type>
  <methodname>urlencode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> Returns a string in which all non-alphanumeric characters except -_. have been replaced with a percent (%) sign followed by two hex digits and spaces encoded as plus (+) signs.  It is encoded the same way that the posted data from a WWW form is encoded, that is the same way as in application/x-www-form-urlencoded media type. This differs from the RFC1738 encoding (see rawurlencode) in that for historical reasons, spaces are encoded as plus (+) signs.  This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page: urlencode example';
?&amp;gt;
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="debug_zval_dump">
  <type>void</type>
  <methodname>debug_zval_dump</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>variable</parameter>
  </methodparam>
  <desc> Dumps a string representation of an internal zend value to output. </desc>
</methodsynopsis>
<methodsynopsis function="empty">
  <type>bool</type>
  <methodname>empty</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Determine whether a variable is considered to be empty. </desc>
</methodsynopsis>
<methodsynopsis function="floatval">
  <type>float</type>
  <methodname>floatval</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Gets the float value of var. </desc>
</methodsynopsis>
<methodsynopsis function="get_defined_vars">
  <type>array</type>
  <methodname>get_defined_vars</methodname>
  <void/>
  <desc> This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars is called.  </desc>
</methodsynopsis>
<methodsynopsis function="get_resource_type">
  <type>string</type>
  <methodname>get_resource_type</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>handle</parameter>
  </methodparam>
  <desc> This function gets the type of the given resource. </desc>
</methodsynopsis>
<methodsynopsis function="gettype">
  <type>string</type>
  <methodname>gettype</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Returns the type of the PHP variable var. </desc>
</methodsynopsis>
<methodsynopsis function="import_request_variables">
  <type>bool</type>
  <methodname>import_request_variables</methodname>
  <methodparam>
    <type>string</type>
    <parameter>types</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>prefix</parameter>
  </methodparam>
  <desc> Although the prefix parameter is optional, you will get an  E_NOTICE level error if  you specify no prefix, or specify an empty string as a prefix. This is a possible security hazard. Notice level errors are not displayed using the default error reporting level. </desc>
</methodsynopsis>
<methodsynopsis function="intval">
  <type>int</type>
  <methodname>intval</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>base</parameter>
  </methodparam>
  <desc> Returns the integer value of var, using the specified base for the conversion  (the default is base 10). </desc>
</methodsynopsis>
<methodsynopsis function="is_array">
  <type>bool</type>
  <methodname>is_array</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is an array. </desc>
</methodsynopsis>
<methodsynopsis function="is_bool">
  <type>bool</type>
  <methodname>is_bool</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is a boolean. </desc>
</methodsynopsis>
<methodsynopsis function="is_callable">
  <type>bool</type>
  <methodname>is_callable</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>syntax_only</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">callable_name</parameter>
  </methodparam>
  <desc> Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name. </desc>
</methodsynopsis>
<methodsynopsis function="is_float">
  <type>bool</type>
  <methodname>is_float</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is a float. </desc>
</methodsynopsis>
<methodsynopsis function="is_int">
  <type>bool</type>
  <methodname>is_int</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is an integer. </desc>
</methodsynopsis>
<methodsynopsis function="is_null">
  <type>bool</type>
  <methodname>is_null</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is &amp;amp;null;. </desc>
</methodsynopsis>
<methodsynopsis function="is_numeric">
  <type>bool</type>
  <methodname>is_numeric</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is numeric. </desc>
</methodsynopsis>
<methodsynopsis function="is_object">
  <type>bool</type>
  <methodname>is_object</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is an object. </desc>
</methodsynopsis>
<methodsynopsis function="is_resource">
  <type>bool</type>
  <methodname>is_resource</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is a resource. </desc>
</methodsynopsis>
<methodsynopsis function="is_scalar">
  <type>bool</type>
  <methodname>is_scalar</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is a scalar. </desc>
</methodsynopsis>
<methodsynopsis function="is_string">
  <type>bool</type>
  <methodname>is_string</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <desc> Finds whether the given variable is a string. </desc>
</methodsynopsis>
<methodsynopsis function="isset">
  <type>bool</type>
  <methodname>isset</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <parameter>...</parameter>
  </methodparam>
  <desc> If a variable has been unset with unset, it will no longer be set. isset will return &amp;amp;false; if testing a variable that has been set to &amp;amp;null;. Also note that a &amp;amp;null; byte ("\0") is not equivalent to the PHP &amp;amp;null; constant. </desc>
</methodsynopsis>
<methodsynopsis function="print_r">
  <type>bool</type>
  <methodname>print_r</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return</parameter>
  </methodparam>
  <desc> </desc>
</methodsynopsis>
<methodsynopsis function="serialize">
  <type>string</type>
  <methodname>serialize</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> In PHP 3, object properties will be serialized, but methods are lost.  That limitation was removed in PHP 4 as both properties and methods are now restored.  Please see the Serializing Objects section of Classes and Objects for more information. </desc>
</methodsynopsis>
<methodsynopsis function="settype">
  <type>bool</type>
  <methodname>settype</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter role="reference">var</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> Set the type of variable var to type. </desc>
</methodsynopsis>
<methodsynopsis function="strval">
  <type>string</type>
  <methodname>strval</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
</methodsynopsis>
<methodsynopsis function="unserialize">
  <type>mixed</type>
  <methodname>unserialize</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <desc> &amp;amp;false; is returned both in the case of an error and if unserializing the serialized &amp;amp;false; value. This special case can be catched by comparing str with serialize(false) or by catching the issued E_NOTICE. </desc>
</methodsynopsis>
<methodsynopsis function="unset">
  <type>void</type>
  <methodname>unset</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>unset destroys the specified variables. Note that in PHP 3, unset will always return &amp;amp;true; (actually, the integer value 1). In PHP 4, however, unset is no longer a true function: it is now a statement. As such no value is returned, and attempting to take the value of unset results in a parse error. </desc>
</methodsynopsis>
<methodsynopsis function="var_dump">
  <type>void</type>
  <methodname>var_dump</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <parameter>...</parameter>
  </methodparam>
  <desc> expression The variable you want to export. </desc>
</methodsynopsis>
<methodsynopsis function="var_export">
  <type>mixed</type>
  <methodname>var_export</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>expression</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>return</parameter>
  </methodparam>
  <desc> expression The variable you want to export. return If used and set to &amp;amp;true;, var_export will return the variable representation instead of outputing it. </desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_add_alias_domain_ex">
  <type>bool</type>
  <methodname>vpopmail_add_alias_domain_ex</methodname>
  <methodparam>
    <type>string</type>
    <parameter>olddomain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>newdomain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_add_alias_domain">
  <type>bool</type>
  <methodname>vpopmail_add_alias_domain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>aliasdomain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_add_domain_ex">
  <type>bool</type>
  <methodname>vpopmail_add_domain_ex</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>passwd</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>quota</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>bounce</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>apop</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_add_domain">
  <type>bool</type>
  <methodname>vpopmail_add_domain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dir</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>uid</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>gid</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_add_user">
  <type>bool</type>
  <methodname>vpopmail_add_user</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>gecos</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>apop</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_alias_add">
  <type>bool</type>
  <methodname>vpopmail_alias_add</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>alias</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_alias_del_domain">
  <type>bool</type>
  <methodname>vpopmail_alias_del_domain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_alias_del">
  <type>bool</type>
  <methodname>vpopmail_alias_del</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_alias_get_all">
  <type>array</type>
  <methodname>vpopmail_alias_get_all</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_alias_get">
  <type>array</type>
  <methodname>vpopmail_alias_get</methodname>
  <methodparam>
    <type>string</type>
    <parameter>alias</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_auth_user">
  <type>bool</type>
  <methodname>vpopmail_auth_user</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>apop</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_del_domain_ex">
  <type>bool</type>
  <methodname>vpopmail_del_domain_ex</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_del_domain">
  <type>bool</type>
  <methodname>vpopmail_del_domain</methodname>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_del_user">
  <type>bool</type>
  <methodname>vpopmail_del_user</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_error">
  <type>string</type>
  <methodname>vpopmail_error</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_passwd">
  <type>bool</type>
  <methodname>vpopmail_passwd</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>password</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>apop</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="vpopmail_set_user_quota">
  <type>bool</type>
  <methodname>vpopmail_set_user_quota</methodname>
  <methodparam>
    <type>string</type>
    <parameter>user</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>domain</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>quota</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="w32api_deftype">
  <type>bool</type>
  <methodname>w32api_deftype</methodname>
  <methodparam>
    <type>string</type>
    <parameter>typename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>member1_type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>member1_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> If you would like to define a type for a w32api call, you need to call w32api_deftype. This function takes 2n+1 arguments, where n is the number of members the type has. The first argument is the name of the type. After that is the type of the member followed by the members name (in pairs). A member type can be a user defined type. All the type names are case sensitive. Built in type names should be provided in lowercase. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="w32api_init_dtype">
  <type>resource</type>
  <methodname>w32api_init_dtype</methodname>
  <methodparam>
    <type>string</type>
    <parameter>typename</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc> This function creates an instance of the data type named typename, filling in the values of the data type. The typename parameter is case sensitive. You should give the values in the same order as you defined the data type with w32api_deftype. The type of the resource returned is dynaparm. </desc>
</methodsynopsis>
<methodsynopsis function="w32api_invoke_function">
  <type>mixed</type>
  <methodname>w32api_invoke_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>funcname</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>argument</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>w32api_invoke_function tries to find the previously registered function, named funcname, passing the parameters you provided. The return type is the one you set when you registered the function, the value is the one returned by the function itself. Any of the arguments can be of any PHP type or w32api_deftype defined type, as needed. </desc>
</methodsynopsis>
<methodsynopsis function="w32api_register_function">
  <type>bool</type>
  <methodname>w32api_register_function</methodname>
  <methodparam>
    <type>string</type>
    <parameter>library</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>return_type</parameter>
  </methodparam>
  <desc> This function tries to find the function_name function in libary, and tries to import it into PHP. The function will be registered with the given return_type. This type can be a generic PHP type, or a type defined with w32api_deftype. All type names are case sensitive. Built in type names should be provided in lowercase. &amp;amp;return.success; </desc>
</methodsynopsis>
<methodsynopsis function="w32api_set_call_method">
  <type>void</type>
  <methodname>w32api_set_call_method</methodname>
  <methodparam>
    <type>int</type>
    <parameter>method</parameter>
  </methodparam>
  <desc> This function sets the method call type. The parameter can be one of the constants DC_CALL_CDECL or DC_CALL_STD. The extension default is DC_CALL_STD. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_add_vars">
  <type>bool</type>
  <methodname>wddx_add_vars</methodname>
  <methodparam>
    <type>int</type>
    <parameter>packet_id</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>name_var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>wddx_add_vars is used to serialize passed variables and add the result to the packet specified by the packet_id.  The variables to be serialized are specified in exactly the same way as wddx_serialize_vars. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_deserialize">
  <type>mixed</type>
  <methodname>wddx_deserialize</methodname>
  <methodparam>
    <type>string</type>
    <parameter>packet</parameter>
  </methodparam>
  <desc>wddx_deserialize takes a packet string and deserializes it.  It returns the result which can be string, number, or array.  Note that structures are deserialized into associative arrays. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_packet_end">
  <type>string</type>
  <methodname>wddx_packet_end</methodname>
  <methodparam>
    <type>int</type>
    <parameter>packet_id</parameter>
  </methodparam>
  <desc>wddx_packet_end ends the WDDX packet specified by the packet_id and returns the string with the packet. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_packet_start">
  <type>int</type>
  <methodname>wddx_packet_start</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>comment</parameter>
  </methodparam>
  <desc> Use wddx_packet_start to start a new WDDX packet for incremental addition of variables.  It takes an optional comment string and returns a packet ID for use in later functions.  It automatically creates a structure definition inside the packet to contain the variables. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_serialize_value">
  <type>string</type>
  <methodname>wddx_serialize_value</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>comment</parameter>
  </methodparam>
  <desc>wddx_serialize_value is used to create a WDDX packet from a single given value.  It takes the value contained in var, and an optional comment string that appears in the packet header, and returns the WDDX packet. </desc>
</methodsynopsis>
<methodsynopsis function="wddx_serialize_vars">
  <type>string</type>
  <methodname>wddx_serialize_vars</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>var_name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>...</parameter>
  </methodparam>
  <desc>wddx_serialize_vars is used to create a WDDX packet with a structure that contains the serialized representation of the passed variables. </desc>
</methodsynopsis>
<methodsynopsis function="xattr_get">
  <type>string</type>
  <methodname>xattr_get</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This function gets the value of an extended attribute of a file. </desc>
</methodsynopsis>
<methodsynopsis function="xattr_list">
  <type>array</type>
  <methodname>xattr_list</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This functions gets a list of names of extended attributes of a file.  </desc>
</methodsynopsis>
<methodsynopsis function="xattr_remove">
  <type>bool</type>
  <methodname>xattr_remove</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This function removes an extended attribute of a file. </desc>
</methodsynopsis>
<methodsynopsis function="xattr_set">
  <type>bool</type>
  <methodname>xattr_set</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This function sets the value of an extended attribute of a file. </desc>
</methodsynopsis>
<methodsynopsis function="xattr_supported">
  <type>bool</type>
  <methodname>xattr_supported</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This functions checks if the filesystem holding the given file supports  extended attributes. Read access to the file is required. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_file_diff_binary">
  <type>bool</type>
  <methodname>xdiff_file_diff_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file2</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc>xdiff_file_diff_binary makes binary diff of files file1 and file2 and stores result in file dest. This function works with both text   and binary files. Resulting file is in binary format. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_file_diff">
  <type>bool</type>
  <methodname>xdiff_file_diff</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file2</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>context</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>minimal</parameter>
  </methodparam>
  <desc>xdiff_file_diff makes unified diff of files file1 and file2 and stores result in file dest. context indicated how many lines of context you want to include in diff result. Set minimal to &amp;amp;true; if you want to minimalize size of diff (can take a long time). Resulting file is human-readable. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_file_merge3">
  <type>mixed</type>
  <methodname>xdiff_file_merge3</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file2</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>file3</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc>xdiff_file_merge3 merges files  file1, file2 and  file3 into one and stores result in file dest. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_file_patch_binary">
  <type>bool</type>
  <methodname>xdiff_file_patch_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>patch</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <desc>xdiff_file_patch_binary patches file file with binary patch in file  patch and stores result in file dest. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_file_patch">
  <type>mixed</type>
  <methodname>xdiff_file_patch</methodname>
  <methodparam>
    <type>string</type>
    <parameter>file</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>patch</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>dest</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc>xdiff_file_patch patches file file with unified patch in file  patch and stores result in file dest. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_string_diff_binary">
  <type>mixed</type>
  <methodname>xdiff_string_diff_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <desc>xdiff_string_diff_binary makes binary diff of  strings str1 and str2. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_string_diff">
  <type>mixed</type>
  <methodname>xdiff_string_diff</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>context</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>minimal</parameter>
  </methodparam>
  <desc>xdiff_string_diff makes unified diff of strings str1 and str2. context indicated how many lines of context you want to include in diff result. Set minimal to &amp;amp;true; if you want to minimalize size of diff (can take a long time). </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_string_merge3">
  <type>string</type>
  <methodname>xdiff_string_merge3</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str1</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str2</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>str3</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error</parameter>
  </methodparam>
  <desc>xdiff_string_merge3 merges strings  str1, str2 and  str3 into one. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_string_patch_binary">
  <type>string</type>
  <methodname>xdiff_string_patch_binary</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>patch</parameter>
  </methodparam>
  <desc>xdiff_string_patch_binary patches string str with binary patch in string  patch. </desc>
</methodsynopsis>
<methodsynopsis function="xdiff_string_patch">
  <type>string</type>
  <methodname>xdiff_string_patch</methodname>
  <methodparam>
    <type>string</type>
    <parameter>str</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>patch</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>flags</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter role="reference">error</parameter>
  </methodparam>
  <desc>xdiff_string_patch patches string str with unified patch in string  patch. </desc>
</methodsynopsis>
<methodsynopsis function="utf8_decode">
  <type>string</type>
  <methodname>utf8_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1. </desc>
</methodsynopsis>
<methodsynopsis function="utf8_encode">
  <type>string</type>
  <methodname>utf8_encode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <desc> This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such.  PHP encodes UTF-8 characters in up to four bytes, like this: UTF-8 encodingbytesbitsrepresentation170bbbbbbb211110bbbbb 10bbbbbb3161110bbbb 10bbbbbb 10bbbbbb42111110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each b represents a bit that can be used to store character data. </desc>
</methodsynopsis>
<methodsynopsis function="xml_error_string">
  <type>string</type>
  <methodname>xml_error_string</methodname>
  <methodparam>
    <type>int</type>
    <parameter>code</parameter>
  </methodparam>
  <desc> Gets the XML parser error string associated with the given  code. </desc>
</methodsynopsis>
<methodsynopsis function="xml_get_current_byte_index">
  <type>int</type>
  <methodname>xml_get_current_byte_index</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <desc> Gets the current byte index of the given XML parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_get_current_column_number">
  <type>int</type>
  <methodname>xml_get_current_column_number</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <desc> Gets the current column number of the given XML parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_get_current_line_number">
  <type>int</type>
  <methodname>xml_get_current_line_number</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <desc> Gets the current line number for the given XML parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_get_error_code">
  <type>int</type>
  <methodname>xml_get_error_code</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <desc> Gets the XML parser error code. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parse_into_struct">
  <type>int</type>
  <methodname>xml_parse_into_struct</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">values</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">index</parameter>
  </methodparam>
  <desc> This function parses an XML file into 2 parallel array structures, one (index) containing pointers  to the location of the appropriate values in the values array. These last two parameters must be passed by reference. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parse">
  <type>bool</type>
  <methodname>xml_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>bool</type>
    <parameter>is_final</parameter>
  </methodparam>
  <desc>xml_parse parses an XML document. The handlers for the configured events are called as many times as necessary. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parser_create_ns">
  <type>resource</type>
  <methodname>xml_parser_create_ns</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>separator</parameter>
  </methodparam>
  <desc>xml_parser_create_ns creates a new XML parser with XML namespace support and returns a resource handle referencing  it to be used by the other XML functions. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parser_create">
  <type>resource</type>
  <methodname>xml_parser_create</methodname>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>xml_parser_create creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parser_free">
  <type>bool</type>
  <methodname>xml_parser_free</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <desc> parser A reference to the XML parser to free. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parser_get_option">
  <type>mixed</type>
  <methodname>xml_parser_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <desc> parser A reference to the XML parser to get an option from. option Which option to fetch.  See xml_parser_set_option for a list of options. </desc>
</methodsynopsis>
<methodsynopsis function="xml_parser_set_option">
  <type>bool</type>
  <methodname>xml_parser_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>option</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> parser A reference to the XML parser to set an option in. option Which option to set.  See below. value The option's new value. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_character_data_handler">
  <type>bool</type>
  <methodname>xml_set_character_data_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the character data handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_default_handler">
  <type>bool</type>
  <methodname>xml_set_default_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the default handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_element_handler">
  <type>bool</type>
  <methodname>xml_set_element_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>start_element_handler</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>end_element_handler</parameter>
  </methodparam>
  <desc> Sets the element handler functions for the XML parser parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_end_namespace_decl_handler">
  <type>bool</type>
  <methodname>xml_set_end_namespace_decl_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xml_set_external_entity_ref_handler">
  <type>bool</type>
  <methodname>xml_set_external_entity_ref_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the external entity reference handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_notation_decl_handler">
  <type>bool</type>
  <methodname>xml_set_notation_decl_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the notation declaration handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_object">
  <type>void</type>
  <methodname>xml_set_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter role="reference">object</parameter>
  </methodparam>
  <desc> This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler etc and assumed to be methods of object. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_processing_instruction_handler">
  <type>bool</type>
  <methodname>xml_set_processing_instruction_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the processing instruction (PI) handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xml_set_start_namespace_decl_handler">
  <type>bool</type>
  <methodname>xml_set_start_namespace_decl_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xml_set_unparsed_entity_decl_handler">
  <type>bool</type>
  <methodname>xml_set_unparsed_entity_decl_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>parser</parameter>
  </methodparam>
  <methodparam>
    <type>callback</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Sets the unparsed entity declaration handler function for the XML parser parser.  handler is a string containing the name of a function that must exist when xml_parse is called for parser. </desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_decode_request">
  <type>array</type>
  <methodname>xmlrpc_decode_request</methodname>
  <methodparam>
    <type>string</type>
    <parameter>xml</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter role="reference">method</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_decode">
  <type>array</type>
  <methodname>xmlrpc_decode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>xml</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_encode_request">
  <type>string</type>
  <methodname>xmlrpc_encode_request</methodname>
  <methodparam>
    <type>string</type>
    <parameter>method</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>params</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>output_options</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_encode">
  <type>string</type>
  <methodname>xmlrpc_encode</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_get_type">
  <type>string</type>
  <methodname>xmlrpc_get_type</methodname>
  <methodparam>
    <type>mixed</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> This function is especially useful for base64 and datetime strings. </desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_is_fault">
  <type>bool</type>
  <methodname>xmlrpc_is_fault</methodname>
  <methodparam>
    <type>array</type>
    <parameter>arg</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_parse_method_descriptions">
  <type>array</type>
  <methodname>xmlrpc_parse_method_descriptions</methodname>
  <methodparam>
    <type>string</type>
    <parameter>xml</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_add_introspection_data">
  <type>int</type>
  <methodname>xmlrpc_server_add_introspection_data</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>desc</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_call_method">
  <type>mixed</type>
  <methodname>xmlrpc_server_call_method</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>xml</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>user_data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>output_options</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_create">
  <type>resource</type>
  <methodname>xmlrpc_server_create</methodname>
  <void/>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_destroy">
  <type>int</type>
  <methodname>xmlrpc_server_destroy</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_register_introspection_callback">
  <type>bool</type>
  <methodname>xmlrpc_server_register_introspection_callback</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_server_register_method">
  <type>bool</type>
  <methodname>xmlrpc_server_register_method</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>server</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>method_name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>function</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xmlrpc_set_type">
  <type>bool</type>
  <methodname>xmlrpc_set_type</methodname>
  <methodparam>
    <type>string</type>
    <parameter role="reference">value</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="getParameter">
  <type>string</type>
  <methodname>getParameter</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Gets a parameter if previously set by . </desc>
</methodsynopsis>
<methodsynopsis function="hasExsltSupport">
  <type>bool</type>
  <methodname>hasExsltSupport</methodname>
  <void/>
  <desc> This method determine if PHP was built with the EXSLT library. </desc>
</methodsynopsis>
<methodsynopsis function="importStylesheet">
  <type>void</type>
  <methodname>importStylesheet</methodname>
  <methodparam>
    <type>DOMDocument</type>
    <parameter>stylesheet</parameter>
  </methodparam>
  <desc> This method import the stylesheet into the  XSLTProcessor for transformations. </desc>
</methodsynopsis>
<methodsynopsis function="registerPHPFunctions">
  <type>void</type>
  <methodname>registerPHPFunctions</methodname>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>restrict</parameter>
  </methodparam>
  <desc> This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets. </desc>
</methodsynopsis>
<methodsynopsis function="removeParameter">
  <type>bool</type>
  <methodname>removeParameter</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespaceURI</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>localName</parameter>
  </methodparam>
  <desc> Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet. </desc>
</methodsynopsis>
<methodsynopsis function="setParameter">
  <type>bool</type>
  <methodname>setParameter</methodname>
  <methodparam>
    <type>string</type>
    <parameter>namespace</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets the value of one or more parameters to be used in subsequent  transformations with XSLTProcessor. If the  parameter doesn't exist in the stylesheet it will be ignored. </desc>
</methodsynopsis>
<methodsynopsis function="transformToDoc">
  <type>DOMDocument</type>
  <methodname>transformToDoc</methodname>
  <methodparam>
    <type>DOMNode</type>
    <parameter>doc</parameter>
  </methodparam>
  <desc> Transforms the source node to a DOMDocument applying the stylesheet given by the  method. </desc>
</methodsynopsis>
<methodsynopsis function="transformToURI">
  <type>int</type>
  <methodname>transformToURI</methodname>
  <methodparam>
    <type>DOMDocument</type>
    <parameter>doc</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <desc> Transforms the source node to an URI applying the stylesheet given by the method. </desc>
</methodsynopsis>
<methodsynopsis function="transformToXML">
  <type>string</type>
  <methodname>transformToXML</methodname>
  <methodparam>
    <type>DOMDocument</type>
    <parameter>doc</parameter>
  </methodparam>
  <desc> Transforms the source node to a string applying the stylesheet given by the  method. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_backend_info">
  <type>string</type>
  <methodname>xslt_backend_info</methodname>
  <void/>
  <desc>xslt_backend_info returns a string with  information about the compilation setting of the backend or an error string when no information available. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_backend_name">
  <type>string</type>
  <methodname>xslt_backend_name</methodname>
  <void/>
  <desc>xslt_backend_name will always return Sablotron. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_backend_version">
  <type>string</type>
  <methodname>xslt_backend_version</methodname>
  <void/>
  <desc>xslt_backend_version returns the version number of Sablotron if available,  &amp;amp;false; otherwise. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_create">
  <type>resource</type>
  <methodname>xslt_create</methodname>
  <void/>
  <desc> Create and return a new XSLT processor resource for manipulation by the other XSLT functions. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_errno">
  <type>int</type>
  <methodname>xslt_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <desc> Returns an error code describing the last error that occurred on the  passed XSLT processor. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_error">
  <type>mixed</type>
  <methodname>xslt_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <desc> Returns a string describing the last error that occurred on the  passed XSLT processor. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_free">
  <type>void</type>
  <methodname>xslt_free</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <desc> Free the XSLT processor identified by the given handle. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_getopt">
  <type>int</type>
  <methodname>xslt_getopt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>processor</parameter>
  </methodparam>
  <desc>xslt_getopt returns the options on the given  processor. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_process">
  <type>mixed</type>
  <methodname>xslt_process</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>xmlcontainer</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>xslcontainer</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>resultcontainer</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>arguments</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>parameters</parameter>
  </methodparam>
  <desc> The xslt_process function is the crux of the new XSLT extension.  It allows you to perform an XSLT transformation using almost any type of input source - the containers.  This is accomplished through the use of argument buffers -- a concept taken from the Sablotron XSLT processor (currently the only XSLT processor this extension supports). The input containers default to a filename 'containing' the document to be processed. The result container defaults to a filename for the transformed document. If the result container is not specified - i.e. &amp;amp;null; - than the result is returned. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_base">
  <type>void</type>
  <methodname>xslt_set_base</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>uri</parameter>
  </methodparam>
  <desc> Sets the base URI for all XSLT transformations, the base URI is used  with Xpath instructions to resolve document() and other commands which  access external resources. It is also used to resolve URIs for the &amp;lt;xsl:include&amp;gt; and &amp;lt;xsl:import&amp;gt; elements.  </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_encoding">
  <type>void</type>
  <methodname>xslt_set_encoding</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>encoding</parameter>
  </methodparam>
  <desc> Set the output encoding for the XSLT transformations.  When using the  Sablotron backend, this option is only  available when you compile Sablotron with  encoding support. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_error_handler">
  <type>void</type>
  <methodname>xslt_set_error_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>mixed</type>
    <parameter>handler</parameter>
  </methodparam>
  <desc> Set an error handler function for the XSLT processor given by  xh, this function will be called whenever an  error occurs in the XSLT transformation (this function is also called for notices). </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_log">
  <type>void</type>
  <methodname>xslt_set_log</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>log</parameter>
  </methodparam>
  <desc> xh A reference to the XSLT parser. log This parameter is either a boolean value which toggles logging on and off, or a string containing the logfile in which log errors too. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_object">
  <type>int</type>
  <methodname>xslt_set_object</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>processor</parameter>
  </methodparam>
  <methodparam>
    <type>object</type>
    <parameter role="reference">obj</parameter>
  </methodparam>
  <desc> This function allows to use the processor inside an object and to resolve all callback functions  in it. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_sax_handler">
  <type>void</type>
  <methodname>xslt_set_sax_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>handlers</parameter>
  </methodparam>
  <desc> Set SAX handlers on the resource handle given by  xh. SAX handlers should be a two dimensional array  with the format (all top level elements are optional): array( start document handler, end document handler ),
[element] =&amp;gt;  array( start element handler, end element handler ),
[namespace] =&amp;gt;  array( start namespace handler, end namespace handler ),
[comment] =&amp;gt; comment handler,
[pi] =&amp;gt; processing instruction handler,
[character] =&amp;gt; character data handler
)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_sax_handlers">
  <type>void</type>
  <methodname>xslt_set_sax_handlers</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>processor</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>handlers</parameter>
  </methodparam>
  <desc>xslt_set_sax_handlers registers the SAX  handlers for the document, given a XSLT  processor resource. </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_scheme_handler">
  <type>void</type>
  <methodname>xslt_set_scheme_handler</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>xh</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>handlers</parameter>
  </methodparam>
  <desc> Set Scheme handlers on the resource handle given by  xh. Scheme handlers should be an array with the format (all elements are optional): get all handler,
[open] =&amp;gt; open handler,
[get] =&amp;gt; get handler,
[put] =&amp;gt; put handler,
[close] =&amp;gt; close handler
)
]]&amp;gt; </desc>
</methodsynopsis>
<methodsynopsis function="xslt_set_scheme_handlers">
  <type>void</type>
  <methodname>xslt_set_scheme_handlers</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>processor</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>handlers</parameter>
  </methodparam>
  <desc>Undocumented</desc>
</methodsynopsis>
<methodsynopsis function="xslt_setopt">
  <type>int</type>
  <methodname>xslt_setopt</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>processor</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>newmask</parameter>
  </methodparam>
  <desc>xslt_setopt sets the options specified by  newmask on the given processor. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_addinfo">
  <type>string</type>
  <methodname>yaz_addinfo</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> Returns additional error information for the last request on the server. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_ccl_conf">
  <void/>
  <methodname>yaz_ccl_conf</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>config</parameter>
  </methodparam>
  <desc> This function configures the CCL query parser for a server with  definitions of access points (CCL qualifiers) and their mapping to RPN. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_ccl_parse">
  <type>bool</type>
  <methodname>yaz_ccl_parse</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <desc> This function invokes a CCL parser. It converts a given CCL FIND query to an RPN query which may be passed to the yaz_search  function to perform a search. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_close">
  <type>bool</type>
  <methodname>yaz_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> Closes the connection given by parameter id. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_connect">
  <type>resource</type>
  <methodname>yaz_connect</methodname>
  <methodparam>
    <type>string</type>
    <parameter>zurl</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>mixed</type>
    <parameter>options</parameter>
  </methodparam>
  <desc> This function returns a connection resource on success, zero on failure. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_database">
  <type>bool</type>
  <methodname>yaz_database</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>databases</parameter>
  </methodparam>
  <desc> This function allows you to change databases within a session by  specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to  yaz_connect. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_element">
  <type>bool</type>
  <methodname>yaz_element</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>elementset</parameter>
  </methodparam>
  <desc> This function sets the element set name for retrieval. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_errno">
  <type>int</type>
  <methodname>yaz_errno</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> Returns an error number for the server (last request) identified by id. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_error">
  <type>string</type>
  <methodname>yaz_error</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc>yaz_error returns an English text message corresponding to the last error number as returned by yaz_errno. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_es_result">
  <type>array</type>
  <methodname>yaz_es_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> id The connection resource returned by yaz_connect. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_get_option">
  <type>string</type>
  <methodname>yaz_get_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <desc> Returns the value of the option specified with name. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_hits">
  <type>int</type>
  <methodname>yaz_hits</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc>yaz_hits returns the number of hits for the last search. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_itemorder">
  <void/>
  <methodname>yaz_itemorder</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>array</type>
    <parameter>args</parameter>
  </methodparam>
  <desc> This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See this and the specification. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_present">
  <type>bool</type>
  <methodname>yaz_present</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <desc> This function prepares for retrieval of records after a successful search. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_range">
  <void/>
  <methodname>yaz_range</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>start</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>number</parameter>
  </methodparam>
  <desc> Specifies a range of records to retrieve. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_record">
  <type>string</type>
  <methodname>yaz_record</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>pos</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <desc> The yaz_record function inspects a record in the current result set at the position specified by parameter pos.  </desc>
</methodsynopsis>
<methodsynopsis function="yaz_scan_result">
  <type>array</type>
  <methodname>yaz_scan_result</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">result</parameter>
  </methodparam>
  <desc>yaz_scan_result returns terms and associated information as received from the server in the last performed yaz_scan. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_scan">
  <void/>
  <methodname>yaz_scan</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>startterm</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>array</type>
    <parameter>flags</parameter>
  </methodparam>
  <desc> This function prepares for a Z39.50 Scan Request on the specified  connection. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_schema">
  <void/>
  <methodname>yaz_schema</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>schema</parameter>
  </methodparam>
  <desc>yaz_schema specifies the schema for retrieval. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_search">
  <type>bool</type>
  <methodname>yaz_search</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>type</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>query</parameter>
  </methodparam>
  <desc>yaz_search prepares for a search on the given  connection. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_set_option">
  <void/>
  <methodname>yaz_set_option</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>name</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>value</parameter>
  </methodparam>
  <desc> Sets one or more options on the given connection. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_sort">
  <void/>
  <methodname>yaz_sort</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>criteria</parameter>
  </methodparam>
  <desc> This function sets sorting criteria and enables Z39.50 Sort. </desc>
</methodsynopsis>
<methodsynopsis function="yaz_syntax">
  <void/>
  <methodname>yaz_syntax</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>id</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>syntax</parameter>
  </methodparam>
  <desc>yaz_syntax specifies the preferred record syntax for retrieval </desc>
</methodsynopsis>
<methodsynopsis function="yaz_wait">
  <type>bool</type>
  <methodname>yaz_wait</methodname>
  <methodparam choice="opt">
    <type>array</type>
    <parameter role="reference">options</parameter>
  </methodparam>
  <desc> This function carries out networked (blocked) activity for outstanding requests which have been prepared by the functions  yaz_connect, yaz_search,  yaz_present, yaz_scan and  yaz_itemorder. </desc>
</methodsynopsis>
<methodsynopsis function="zip_close">
  <type>void</type>
  <methodname>zip_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip</parameter>
  </methodparam>
  <desc> Closes the given ZIP file archive. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_close">
  <type>void</type>
  <methodname>zip_entry_close</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <desc> Closes the specified directory entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_compressedsize">
  <type>int</type>
  <methodname>zip_entry_compressedsize</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <desc> Returns the compressed size of the specified directory entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_compressionmethod">
  <type>string</type>
  <methodname>zip_entry_compressionmethod</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <desc> Returns the compression method of the directory entry specified by zip_entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_filesize">
  <type>int</type>
  <methodname>zip_entry_filesize</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <desc> Returns the actual size of the specified directory entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_name">
  <type>string</type>
  <methodname>zip_entry_name</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <desc> Returns the name of the specified directory entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_open">
  <type>bool</type>
  <methodname>zip_entry_open</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip</parameter>
  </methodparam>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <desc> Opens a directory entry in a zip file for reading. </desc>
</methodsynopsis>
<methodsynopsis function="zip_entry_read">
  <type>string</type>
  <methodname>zip_entry_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip_entry</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Reads from an open directory entry. </desc>
</methodsynopsis>
<methodsynopsis function="zip_open">
  <type>resource</type>
  <methodname>zip_open</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <desc> Opens a new zip archive for reading.  </desc>
</methodsynopsis>
<methodsynopsis function="zip_read">
  <type>resource</type>
  <methodname>zip_read</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zip</parameter>
  </methodparam>
  <desc> Reads the next entry in a zip file archive. </desc>
</methodsynopsis>
<methodsynopsis function="gzclose">
  <type>bool</type>
  <methodname>gzclose</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc> Closes the given gz-file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="gzcompress">
  <type>string</type>
  <methodname>gzcompress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <desc> This function compress the given string using the ZLIB data format. </desc>
</methodsynopsis>
<methodsynopsis function="gzdeflate">
  <type>string</type>
  <methodname>gzdeflate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <desc> This function compress the given string using the DEFLATE data format. </desc>
</methodsynopsis>
<methodsynopsis function="gzencode">
  <type>string</type>
  <methodname>gzencode</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>level</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>encoding_mode</parameter>
  </methodparam>
  <desc>    This function returns a compressed version of the input data compatible with the output of the gzip program. </desc>
</methodsynopsis>
<methodsynopsis function="gzeof">
  <type>int</type>
  <methodname>gzeof</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc> Tests the given GZ file pointer for EOF (end-of-file). </desc>
</methodsynopsis>
<methodsynopsis function="gzfile">
  <type>array</type>
  <methodname>gzfile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc>  This function is identical to readgzfile, except that it returns the file in an array. </desc>
</methodsynopsis>
<methodsynopsis function="gzgetc">
  <type>string</type>
  <methodname>gzgetc</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc> Returns a string containing a single (uncompressed) character read from the given gz-file pointer. </desc>
</methodsynopsis>
<methodsynopsis function="gzgets">
  <type>string</type>
  <methodname>gzgets</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc> Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a  newline, or on EOF (whichever comes first). </desc>
</methodsynopsis>
<methodsynopsis function="gzgetss">
  <type>string</type>
  <methodname>gzgetss</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>string</type>
    <parameter>allowable_tags</parameter>
  </methodparam>
  <desc> Identical to gzgets, except that gzgetss attempts to strip any HTML and PHP tags from the text it reads. </desc>
</methodsynopsis>
<methodsynopsis function="gzinflate">
  <type>string</type>
  <methodname>gzinflate</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>    This function inflate a deflated string.   </desc>
</methodsynopsis>
<methodsynopsis function="gzopen">
  <type>resource</type>
  <methodname>gzopen</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>mode</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc> Opens a gzip (.gz) file for reading or writing.  </desc>
</methodsynopsis>
<methodsynopsis function="gzpassthru">
  <type>int</type>
  <methodname>gzpassthru</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc> Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output. </desc>
</methodsynopsis>
<methodsynopsis function="gzread">
  <type>string</type>
  <methodname>gzread</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>gzread reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first. </desc>
</methodsynopsis>
<methodsynopsis function="gzrewind">
  <type>bool</type>
  <methodname>gzrewind</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc>     Sets the file position indicator of the given gz-file pointer to the  beginning of the file stream. </desc>
</methodsynopsis>
<methodsynopsis function="gzseek">
  <type>int</type>
  <methodname>gzseek</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <methodparam>
    <type>int</type>
    <parameter>offset</parameter>
  </methodparam>
  <desc> Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET). </desc>
</methodsynopsis>
<methodsynopsis function="gztell">
  <type>int</type>
  <methodname>gztell</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <desc> Gets the position of the given file pointer; i.e., its offset into the file stream. </desc>
</methodsynopsis>
<methodsynopsis function="gzuncompress">
  <type>string</type>
  <methodname>gzuncompress</methodname>
  <methodparam>
    <type>string</type>
    <parameter>data</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>    This function uncompress a compressed string.   </desc>
</methodsynopsis>
<methodsynopsis function="gzwrite">
  <type>int</type>
  <methodname>gzwrite</methodname>
  <methodparam>
    <type>resource</type>
    <parameter>zp</parameter>
  </methodparam>
  <methodparam>
    <type>string</type>
    <parameter>string</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>length</parameter>
  </methodparam>
  <desc>gzwrite writes the contents of string to the given gz-file. </desc>
</methodsynopsis>
<methodsynopsis function="readgzfile">
  <type>int</type>
  <methodname>readgzfile</methodname>
  <methodparam>
    <type>string</type>
    <parameter>filename</parameter>
  </methodparam>
  <methodparam choice="opt">
    <type>int</type>
    <parameter>use_include_path</parameter>
  </methodparam>
  <desc>  Reads a file, decompresses it and writes it to standard output. </desc>
</methodsynopsis>
<methodsynopsis function="zlib_get_coding_type">
  <type>string</type>
  <methodname>zlib_get_coding_type</methodname>
  <void/>
  <desc> Returns the coding type used for output compression.   </desc>
</methodsynopsis>
</manual>