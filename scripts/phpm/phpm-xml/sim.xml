<?xml version="1.0" encoding="iso-8859-1"?>
<manual>
	<methodsynopsis function="TestOfFrameAuthentication-&gt;TestOfFrameAuthentication">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFrameAuthentication</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameAuthentication-&gt;testCanAuthenticateFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameAuthentication-&gt;testCanAuthenticateRedirectedFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameAuthentication-&gt;testCanReadFrameFromAlreadyAuthenticatedRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameAuthentication-&gt;testUnauthenticatedFrameSendsChallenge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;TestOfLiveAuthentication">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveAuthentication</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;testChallengeFromProtectedPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;testEncodedAuthenticationFetchesPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;testRealmExtendsToWholeDirectory">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveAuthentication-&gt;testRedirectKeepsAuthentication">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;TestOfLiveBrowser">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveBrowser</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testAbsoluteLinkFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testCookieReading">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testIdLinkFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testPost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testRelativeLinkFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveBrowser-&gt;testSimpleSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;TestOfLiveCookies">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveCookies</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testCookiePath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testCookieReading">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testCookieSetting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testOfClockOverDrift">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testOfClockUnderDrift">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testTemporaryCookieExpiry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveCookies-&gt;testTimedCookieExpiry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;TestOfLiveFetching">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveFetching</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testAbsoluteLinkFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testAbsoluteUrlBehavesAbsolutely">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testGetWithData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testLinkIdFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testPost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testPostWithData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testRelativeGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testRelativeLinkFollowing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testRelativePost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testSlowGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFetching-&gt;testTimedOutGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;TestOfLiveForm">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveForm</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testButtonSubmissionByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testDefaultFormValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testFormSubmissionByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testFormSubmissionByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testFormSubmissionWithIds">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testImageSubmissionById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testImageSubmissionByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testImageSubmissionByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testSelfSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveForm-&gt;testSimpleSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;TestOfLiveFrontControllerEmulation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveFrontControllerEmulation</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpBackADirectoryLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpToNamedPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpToUnnamedPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpToUnnamedPageWithBareParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpToUnnamedPageWithEmptyLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testJumpToUnnamedPageWithEmptyQuery">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testSubmitBackADirectoryLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testSubmitToEmptyAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testSubmitToNamedPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testSubmitToNoAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveFrontControllerEmulation-&gt;testSubmitToSameDirectory">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHeaders-&gt;TestOfLiveHeaders">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveHeaders</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHeaders-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHeaders-&gt;testConfirmingHeaderExistence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;TestOfLiveHistoryNavigation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveHistoryNavigation</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testGetRetryResubmitsData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testGetRetryResubmitsExtraData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testGetRetryResubmitsRepeatedData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testOfBackButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testPostRetryResubmitsData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveHistoryNavigation-&gt;testRetry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveMultiValueWidgets-&gt;TestOfLiveMultiValueWidgets">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveMultiValueWidgets</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveMultiValueWidgets-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveMultiValueWidgets-&gt;testDefaultFormValueSubmission">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveMultiValueWidgets-&gt;testSubmittingMultipleValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;TestOfLiveRedirects">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLiveRedirects</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testNoRedirects">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirectKeepsExtraRequestDataOfItsOwn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirectLosesGetData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirectLosesPostData">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirects">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirectWithBaseUrlChange">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLiveRedirects-&gt;testRedirectWithDoubleBaseUrlChange">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;TestOfLoadingFrames">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLoadingFrames</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testClickingNormalLinkReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpBackADirectoryLevelReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpToNamedPageReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpToUnnamedPageReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpToUnnamedPageWithBareParameterReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpToUnnamedPageWithEmptyLinkReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testJumpToUnnamedPageWithEmptyQueryReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testLinkInOnePageCanLoadAnother">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testMessyFramesetResponsesByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testNoFramesContentWhenFramesDisabled">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testPatternMatchCanReadTheOnlyFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testReloadingFramesetPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testReloadingFrameWhenUnfocusedReloadsWholeFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testReloadingSingleFrameWithCookieCounter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testSubmitBackADirectoryLevelReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testSubmitToEmptyActionReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testSubmitToNamedPageReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testSubmitToNoActionReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testSubmitToSameDirectoryReplacesJustThatFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLoadingFrames-&gt;testTopLinkExitsFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestedFrames-&gt;TestOfNestedFrames">
<sdesc></sdesc>
<desc></desc>
<type>TestOfNestedFrames</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestedFrames-&gt;testAuthenticatingNestedPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestedFrames-&gt;testCanNavigateToSpecificContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestedFrames-&gt;testReloadingFramesetPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestedFrames-&gt;testRetryingNestedPageOnlyRetriesThatSet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;TestOfPearAdapter">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPearAdapter</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testEquals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testNulls">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testPass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testRegExp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testSame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPearAdapter-&gt;testType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;TestOfPhpUnitAdapter">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPhpUnitAdapter</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;testBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;testEquals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;testMultilineEquals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;testName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPhpUnitAdapter-&gt;testRegExp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AllTests-&gt;AllTests">
<sdesc></sdesc>
<desc></desc>
<type>AllTests</type>
</methodsynopsis>
<methodsynopsis function="SimpleAuthenticator-&gt;SimpleAuthenticator">
<sdesc>Starts with no realms set up.</sdesc>
<desc></desc>
<type>SimpleAuthenticator</type>
</methodsynopsis>
<methodsynopsis function="SimpleAuthenticator-&gt;addBasicHeaders">
<sdesc>Presents the appropriate headers for this     location for basic authentication.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleAuthenticator-&gt;addHeaders">
<sdesc>Presents the appropriate headers for this location.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleAuthenticator-&gt;addRealm">
<sdesc>Adds a new realm centered the current URL.</sdesc>
<desc>Browsers vary wildly on their behaviour in this     regard. Mozilla ignores the realm and presents     only when challenged, wasting bandwidth. IE     just carries on presenting until a new challenge     occours. SimpleTest tries to follow the spirit of     the original standards committee and treats the     base URL as the root of a file tree shaped realm.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>realm</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleAuthenticator-&gt;setIdentityForRealm">
<sdesc>Sets the current identity to be presented     against that realm.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>realm</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;SimpleRealm">
<sdesc>Starts with the initial entry directory.</sdesc>
<desc></desc>
<type>SimpleRealm</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;getPassword">
<sdesc>Accessor for current identity.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;getUsername">
<sdesc>Accessor for current identity.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;isWithin">
<sdesc>Test to see if the URL is within the directory     tree of the realm.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;setIdentity">
<sdesc>Sets the identity to try within this realm.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRealm-&gt;stretch">
<sdesc>Adds another location to the realm.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;TestOfAuthenticator">
<sdesc></sdesc>
<desc></desc>
<type>TestOfAuthenticator</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;createSingleRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;testDifferentHostIsOutsideRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;testNoRealms">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;testOutsideRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthenticator-&gt;testWithinRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;TestOfRealm">
<sdesc></sdesc>
<desc></desc>
<type>TestOfRealm</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testBelowRootIsOutside">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testDifferentPageNameStillInside">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testInsideWithLongerUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testNewUrlInSameDirectoryDoesNotChangeRealm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testNewUrlMakesRealmTheCommonPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testOldNetscapeDefinitionIsOutside">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRealm-&gt;testWithinSameUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;SimpleBrowser">
<sdesc>Starts with a fresh browser with no     cookie or any other state information. The     exception is that a default proxy will be     set up if specified in the options.</sdesc>
<desc></desc>
<type>SimpleBrowser</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;addHeader">
<sdesc>Adds a header to every fetch.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;ageCookies">
<sdesc>Ages the cookies by the specified time.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>interval</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;authenticate">
<sdesc>Retries a request after setting the authentication     for the current realm.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;back">
<sdesc>Equivalent to hitting the back button on the     browser. The browser history is unchanged on     failure.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clearFrameFocus">
<sdesc>Clears the frame focus. All frames will be searched     for content.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickImage">
<sdesc>Clicks the submit image by some kind of label. Usually</sdesc>
<desc>the alt tag or the nearest equivalent. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickImageById">
<sdesc>Clicks the submit image by ID attribute. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer/string</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickImageByName">
<sdesc>Clicks the submit image by the name. Usually</sdesc>
<desc>the alt tag or the nearest equivalent. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickLink">
<sdesc>Follows a link by label. Will click the first link     found with this link text by default, or a later     one if an index is given. The match ignores case and     white space issues.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>index</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickLinkById">
<sdesc>Follows a link by id attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickSubmit">
<sdesc>Clicks the submit button by label. The owning     form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickSubmitById">
<sdesc>Clicks the submit button by ID attribute of the button     itself. The owning form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;clickSubmitByName">
<sdesc>Clicks the submit button by name attribute. The owning     form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;forward">
<sdesc>Equivalent to hitting the forward button on the     browser. The browser history is unchanged on     failure.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;get">
<sdesc>Fetches the page content with a simple GET request.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string/SimpleUrl</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getAbsoluteUrls">
<sdesc>Accessor for a list of all fixed links in current page.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getAuthentication">
<sdesc>Accessor for last Authentication type. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getContent">
<sdesc>Accessor for raw page information.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getCookieValue">
<sdesc>Reads the most specific cookie value from the     browser cookies.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getCurrentCookieValue">
<sdesc>Reads the current cookies for the current URL.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getField">
<sdesc>Accessor for a form element value within the page.</sdesc>
<desc>Finds the first match.</desc>
<type>string/boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getFieldById">
<sdesc>Accessor for a form element value within the page.</sdesc>
<desc></desc>
<type>string/boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getFrameFocus">
<sdesc>Accessor for current frame focus. Will be     false if no frame has focus.</sdesc>
<desc></desc>
<type>integer/string/boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getFrames">
<sdesc>Accessor for a breakdown of the frameset.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getHeaders">
<sdesc>Accessor for raw header information.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getMimeType">
<sdesc>Accessor for current MIME type.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getRealm">
<sdesc>Accessor for last Authentication realm. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getRelativeUrls">
<sdesc>Accessor for a list of all relative links.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getRequest">
<sdesc>Accessor for raw bytes sent down the wire.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getResponseCode">
<sdesc>Accessor for last response code.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getTitle">
<sdesc>Accessor for parsed title.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getTransportError">
<sdesc>Accessor for last error.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;getUrl">
<sdesc>Accessor for current URL of page or frame if     focused.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;head">
<sdesc>Fetches the page content with a HEAD request.</sdesc>
<desc>Will affect cookies, but will not change the base URL.</desc>
<type>boolean</type>
<methodparam>
<type>string/SimpleUrl</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;ignoreFrames">
<sdesc>Disables frames support. Frames will not be fetched     and the frameset page will be used instead.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;isLink">
<sdesc>Tests to see if a link is present by label.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;isLinkById">
<sdesc>Tests to see if a link is present by ID attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;post">
<sdesc>Fetches the page content with a POST request.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string/SimpleUrl</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;restartSession">
<sdesc>Removes expired and temporary cookies as if     the browser was closed and re-opened.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string/integer</type>
<parameter>date</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;retry">
<sdesc>Equivalent to hitting the retry button on the     browser. Will attempt to repeat the page fetch. If     there is no history to repeat it will give false.</sdesc>
<desc></desc>
<type>string/boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setConnectionTimeout">
<sdesc>Sets the socket timeout for opening a connection.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setCookie">
<sdesc>Sets an additional cookie. If a cookie has     the same name and path it is replaced.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>expiry</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setField">
<sdesc>Sets all form fields with that name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setFieldById">
<sdesc>Sets all form fields with that name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setFrameFocus">
<sdesc>Sets the focus by name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setFrameFocusByIndex">
<sdesc>Sets the focus by index. The integer index starts from 1.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>choice</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;setMaximumRedirects">
<sdesc>Sets the maximum number of redirects before     a page will be loaded anyway.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>max</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;submitFormById">
<sdesc>Submits a form by the ID.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;useFrames">
<sdesc>Enables frames support. Frames will be fetched from     now on.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;useProxy">
<sdesc>Sets proxy to use on all requests for when     testing from behind a firewall. Set URL     to false to disable.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>proxy</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;_createHistory">
<sdesc>Creates a new empty history list.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;_createUserAgent">
<sdesc>Creates the underlying user agent.</sdesc>
<desc></desc>
<type>SimpleFetcher</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowser-&gt;_parse">
<sdesc>Parses the raw content into a page. Will load further     frame pages unless frames are disabled.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;SimpleBrowserHistory">
<sdesc>Starts empty.</sdesc>
<desc></desc>
<type>SimpleBrowserHistory</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;back">
<sdesc>Step back one place in the history. Stops at     the first page.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;forward">
<sdesc>Step forward one place. If already at the     latest entry then nothing will happen.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;getMethod">
<sdesc>Last fetching method for current history     position.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;getParameters">
<sdesc>Parameters of last fetch from current history     position.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;getUrl">
<sdesc>Last fully qualified URL for current history     position.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleBrowserHistory-&gt;recordEntry">
<sdesc>Adds a successfully fetched page to the history.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;TestOfBrowserFrames">
<sdesc></sdesc>
<desc></desc>
<type>TestOfBrowserFrames</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;createBrowser">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;createUserAgent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testCanNavigateToNestedFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testCanNavigateToNestedFrameByIndex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFrameFocusByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFrameFocusWithMixedNamesAndIndexes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFramesetWithMultipleFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFramesetWithNoFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFramesetWithSingleFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFramesetWithSingleUnnamedFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testFramesetWithSomeNamedFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testNestedFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testSimplePageHasNoFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserFrames-&gt;testTitleTakenFromFramesetPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;TestOfBrowserNavigation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfBrowserNavigation</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;createBrowser">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testClickIndexedLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testClickingMissingLinkFails">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testClickingMissingLinkIdFails">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testClickLinkRequestsPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testClinkLinkById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testDefaultSubmitFormByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByFormId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByImageId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByImageLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByImageName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserNavigation-&gt;testSubmitFormByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;TestOfHistory">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHistory</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testCannotMoveInEmptyHistory">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testCurrentTargetAccessors">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testEmptyHistoryHasFalseContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testGoingBackwards">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testGoingBackwardsAndForwards">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testGoingBackwardsOffBeginning">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testGoingForwardsOffEnd">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testNewEntryDropsFutureEntries">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testNewEntryReplacesNextOne">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHistory-&gt;testSecondEntryAccessors">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;TestOfParsedPageAccess">
<sdesc></sdesc>
<desc></desc>
<type>TestOfParsedPageAccess</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;loadPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;testAccessorsWhenNoPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;testFormHandling">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;testLinkAffirmationByIdWhenPresent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;testLinkAffirmationWhenPresent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParsedPageAccess-&gt;testParse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;SimpleDumper">
<sdesc>Do nothing constructor.</sdesc>
<desc></desc>
<type>SimpleDumper</type>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;clipString">
<sdesc>Clips a string to a maximum length.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>size</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>position</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;describeDifference">
<sdesc>Creates a human readable description of the     difference between two variables. Uses a     dynamic call.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>identical</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;describeValue">
<sdesc>Renders a variable in a shorter form than print_r().</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;dump">
<sdesc>Sends a formatted dump of a variable to a string.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>variable</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;getFormattedAssertionLine">
<sdesc>Extracts the last assertion that was not within     Simpletest itself. The name must start with &quot;assert&quot;.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>stack</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleDumper-&gt;getType">
<sdesc>Gets the string representation of a type.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;TestOfTextFormatting">
<sdesc></sdesc>
<desc></desc>
<type>TestOfTextFormatting</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testClipping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeArray">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeInteger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeObject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextFormatting-&gt;testDescribeString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;SimpleErrorQueue">
<sdesc>Starts with an empty queue.</sdesc>
<desc></desc>
<type>SimpleErrorQueue</type>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;add">
<sdesc>Adds an error to the front of the queue.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$severity</type>
<parameter>severity</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
<methodparam>
<type>$filename</type>
<parameter>filename</parameter>
</methodparam>
<methodparam>
<type>$line</type>
<parameter>line</parameter>
</methodparam>
<methodparam>
<type>$super_globals</type>
<parameter>super_globals</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;clear">
<sdesc>Discards the contents of the error queue.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;extract">
<sdesc>Pulls the earliest error from the queue.</sdesc>
<desc></desc>
<type>False</type>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;getSeverityAsString">
<sdesc>Converst an error code into it's string     representation.</sdesc>
<desc></desc>
<type>String</type>
<methodparam>
<type>$severity</type>
<parameter>severity</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;instance">
<sdesc>Global access to a single error queue.</sdesc>
<desc></desc>
<type>Global</type>
</methodsynopsis>
<methodsynopsis function="SimpleErrorQueue-&gt;isEmpty">
<sdesc>Tests to see if the queue is empty.</sdesc>
<desc></desc>
<type>True</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;TestOfErrorQueue">
<sdesc></sdesc>
<desc></desc>
<type>TestOfErrorQueue</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;testEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;testOrder">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorQueue-&gt;testSingleton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;TestOfErrors">
<sdesc></sdesc>
<desc></desc>
<type>TestOfErrors</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testDefaultWhenAllReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testErrorSuppressedWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testErrorWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testNoErrorWhenNotReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testNoNoticeWhenNotReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testNoticeSuppressedWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testNoticeWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testNoWarningWhenNotReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testWarningSuppressedWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrors-&gt;testWarningWhenReported">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorTrap-&gt;TestOfErrorTrap">
<sdesc></sdesc>
<desc></desc>
<type>TestOfErrorTrap</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorTrap-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorTrap-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorTrap-&gt;testTrappedErrorPLacedInQueue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EqualExpectation-&gt;EqualExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>EqualExpectation</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EqualExpectation-&gt;test">
<sdesc>Tests the expectation. True if it matches the     held value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EqualExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EqualExpectation-&gt;_getValue">
<sdesc>Accessor for comparison value.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="IdenticalExpectation-&gt;IdenticalExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>IdenticalExpectation</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IdenticalExpectation-&gt;test">
<sdesc>Tests the expectation. True if it exactly     matches the held value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IdenticalExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IsAExpectation-&gt;IsAExpectation">
<sdesc>Sets the type to compare with.</sdesc>
<desc></desc>
<type>IsAExpectation</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IsAExpectation-&gt;getType">
<sdesc>Accessor for type to check against.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="IsAExpectation-&gt;test">
<sdesc>Tests the expectation. True if the type or     class matches the string value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IsAExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MethodExistsExpectation-&gt;MethodExistsExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MethodExistsExpectation-&gt;test">
<sdesc>Tests the expectation. True if the method exists in the test object.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MethodExistsExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotAExpectation-&gt;NotAExpectation">
<sdesc>Sets the type to compare with.</sdesc>
<desc></desc>
<type>NotAExpectation</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotAExpectation-&gt;test">
<sdesc>Tests the expectation. False if the type or     class matches the string value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotAExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotEqualExpectation-&gt;NotEqualExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>NotEqualExpectation</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotEqualExpectation-&gt;test">
<sdesc>Tests the expectation. True if it differs from the     held value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotEqualExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotIdenticalExpectation-&gt;NotIdenticalExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>NotIdenticalExpectation</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotIdenticalExpectation-&gt;test">
<sdesc>Tests the expectation. True if it differs from the     held value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NotIdenticalExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleExpectation-&gt;SimpleExpectation">
<sdesc>Creates a dumper for displaying values and sets     the test message.</sdesc>
<desc></desc>
<type>SimpleExpectation</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleExpectation-&gt;overlayMessage">
<sdesc>Overlays the generated message onto the stored user     message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleExpectation-&gt;test">
<sdesc>Tests the expectation. True if correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleExpectation-&gt;_getDumper">
<sdesc>Accessor for the dumper.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="UnwantedPatternExpectation-&gt;UnwantedPatternExpectation">
<sdesc>Sets the reject pattern</sdesc>
<desc></desc>
<type>UnwantedPatternExpectation</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnwantedPatternExpectation-&gt;test">
<sdesc>Tests the expectation. False if the Perl regex     matches the comparison value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnwantedPatternExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WantedPatternExpectation-&gt;WantedPatternExpectation">
<sdesc>Sets the value to compare against.</sdesc>
<desc></desc>
<type>WantedPatternExpectation</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WantedPatternExpectation-&gt;test">
<sdesc>Tests the expectation. True if the Perl regex     matches the comparison value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WantedPatternExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WantedPatternExpectation-&gt;_decribePatternMatch">
<sdesc>Describes a pattern match including the string     found and it's position.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>subject</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WantedPatternExpectation-&gt;_getPattern">
<sdesc>Accessor for the pattern.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ExpectedMethodTarget-&gt;hasThisMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;TestOfEquality">
<sdesc></sdesc>
<desc></desc>
<type>TestOfEquality</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testArray">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testHash">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testInteger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testNestedHash">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testStringMatch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfEquality-&gt;testStringPosition">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIdentity-&gt;TestOfIdentity">
<sdesc></sdesc>
<desc></desc>
<type>TestOfIdentity</type>
</methodsynopsis>
<methodsynopsis function="TestOfIdentity-&gt;testType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfInequality-&gt;TestOfInequality">
<sdesc></sdesc>
<desc></desc>
<type>TestOfInequality</type>
</methodsynopsis>
<methodsynopsis function="TestOfInequality-&gt;testStringMismatch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;TestOfIsA">
<sdesc></sdesc>
<desc></desc>
<type>TestOfIsA</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testBool">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testDouble">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testInt">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testInteger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testReal">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfIsA-&gt;testString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMethodExistence-&gt;TestOfMethodExistence">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMethodExistence</type>
</methodsynopsis>
<methodsynopsis function="TestOfMethodExistence-&gt;testHasMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNonIdentity-&gt;TestOfNonIdentity">
<sdesc></sdesc>
<desc></desc>
<type>TestOfNonIdentity</type>
</methodsynopsis>
<methodsynopsis function="TestOfNonIdentity-&gt;testType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfNotA-&gt;TestOfNotA">
<sdesc></sdesc>
<desc></desc>
<type>TestOfNotA</type>
</methodsynopsis>
<methodsynopsis function="TestOfNotA-&gt;testString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPatterns-&gt;TestOfPatterns">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPatterns</type>
</methodsynopsis>
<methodsynopsis function="TestOfPatterns-&gt;testUnwanted">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPatterns-&gt;testWanted">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;SimpleForm">
<sdesc>Starts with no held controls/widgets.</sdesc>
<desc></desc>
<type>SimpleForm</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;addWidget">
<sdesc>Adds a tag contents to the form.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getAction">
<sdesc>Absolute URL of the target.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getId">
<sdesc>ID field of form for unique identification.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getMethod">
<sdesc>Accessor for form action.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getValue">
<sdesc>Extracts current value from form.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getValueById">
<sdesc>Extracts current value from form by the ID.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;getValues">
<sdesc>Reads the current form values as a hash     of submitted parameters. Repeated parameters     appear as a list.</sdesc>
<desc></desc>
<type>hash</type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasImageId">
<sdesc>Test to see if a form has a submittable image with this     ID attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasImageLabel">
<sdesc>Test to see if a form has a submit button with this     name attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasImageName">
<sdesc>Test to see if a form has a submittable image with this     field name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasSubmitId">
<sdesc>Test to see if a form has a submit button with this     ID attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasSubmitLabel">
<sdesc>Test to see if a form has a submit button with this     value attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;hasSubmitName">
<sdesc>Test to see if a form has a submit button with this     name attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;setDefaultTarget">
<sdesc>Sets the frame target within a frameset.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>frame</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;setField">
<sdesc>Sets a widget value within the form.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;setFieldById">
<sdesc>Sets a widget value within the form by using the ID.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submit">
<sdesc>Simply submits the form without the submit button     value. Used when there is only one button or it     is unimportant.</sdesc>
<desc></desc>
<type>hash</type>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitButtonById">
<sdesc>Gets the submit values for a button identified by the ID.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitButtonByLabel">
<sdesc>Gets the submit values for a named button.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitButtonByName">
<sdesc>Gets the submit values for a named button.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitImageById">
<sdesc>Gets the submit values for an image identified by the ID.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitImageByLabel">
<sdesc>Gets the submit values for an image identified by the alt     tag or nearest equivalent.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;submitImageByName">
<sdesc>Gets the submit values for an image identified by the ID.</sdesc>
<desc></desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleForm-&gt;_createAction">
<sdesc>Combined action attribute with current location     to get an absolute form target.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>action</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>base</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;TestOfForm">
<sdesc></sdesc>
<desc></desc>
<type>TestOfForm</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testButtonTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testChecked">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testCheckedRadioButtons">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testDefaultFrameTargetOnForm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testEmptyAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testFormAttributes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testImageSubmitButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testMissingAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testMultipleFieldsWithSameKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testRootAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testSingleCheckedRadioButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testSingleSelectFieldSubmitted">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testSingleUncheckedRadioButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testSubmitButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testSubmitEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testTextWidget">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testTextWidgetById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testUnchecked">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForm-&gt;testUncheckedRadioButtons">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;SimpleFrameset">
<sdesc>Stashes the frameset page. Will make use of the     browser to fetch the sub frames recursively.</sdesc>
<desc></desc>
<type>SimpleFrameset</type>
<methodparam>
<type></type>
<parameter>page</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;addFrame">
<sdesc>Adds a parsed page to the frameset.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>page</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;clearFrameFocus">
<sdesc>Clears the frame focus.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getAbsoluteUrls">
<sdesc>Accessor for a list of all fixed links.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getAuthentication">
<sdesc>Accessor for last Authentication type. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getField">
<sdesc>Accessor for a form element value within a frameset.</sdesc>
<desc>Finds the first match amongst the frames.</desc>
<type>string/boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFieldById">
<sdesc>Accessor for a form element value within a page.</sdesc>
<desc>Finds the first match.</desc>
<type>string/boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormById">
<sdesc>Finds a held form by the form ID. A way of</sdesc>
<desc>identifying a specific form when we have control     of the HTML code. The first form found     either within the focused frame, or across frames,     will be the one returned.</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormByImageId">
<sdesc>Finds a held form by image button id. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormByImageLabel">
<sdesc>Finds a held form by image label. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormByImageName">
<sdesc>Finds a held form by image button id. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormBySubmitId">
<sdesc>Finds a held form by button id. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormBySubmitLabel">
<sdesc>Finds a held form by button label. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFormBySubmitName">
<sdesc>Finds a held form by button label. Will only     search correctly built forms. The first form found     either within the focused frame, or across frames,     will be the one returned.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFrameFocus">
<sdesc>Accessor for current frame focus. Will be     false if no frame has focus. Will have the nested     frame focus if any.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getFrames">
<sdesc>Accessor for frames information.</sdesc>
<desc></desc>
<type>array/string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getHeaders">
<sdesc>Accessor for raw header information.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getMethod">
<sdesc>Request method used to fetch this frame.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getMimeType">
<sdesc>Accessor for current MIME type.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getRaw">
<sdesc>Accessor for raw text of either all the pages or     the frame in focus.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getRealm">
<sdesc>Accessor for last Authentication realm. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getRelativeUrls">
<sdesc>Accessor for a list of all relative links.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getRequest">
<sdesc>Accessor for outgoing header information.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getRequestData">
<sdesc>Original request data.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getResponseCode">
<sdesc>Accessor for last response code.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getTitle">
<sdesc>Accessor for parsed title.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getTransportError">
<sdesc>Accessor for last error.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getUrl">
<sdesc>Original resource name.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getUrlById">
<sdesc>Accessor for a URL by the id attribute. If in a frameset     then the first link found with that ID attribute is     returned only. Focus on a frame if you want one from     a specific part of the frameset.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;getUrlsByLabel">
<sdesc>Accessor for URLs by the link label. Label will match     regardess of whitespace issues and case.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;hasFrames">
<sdesc>Test for the presence of a frameset.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;setField">
<sdesc>Sets a field on each form in which the field is     available.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;setFieldById">
<sdesc>Sets a field on the form in which the unique field is     available.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;setFrame">
<sdesc>Replaces existing frame with another. If the     frame is nested, then the call is passed down     one level.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>page</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;setFrameFocus">
<sdesc>Sets the focus by name. If already focused and the     target frame also has frames, then the nested frame     will be focused.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameset-&gt;setFrameFocusByIndex">
<sdesc>Sets the focus by index. The integer index starts from 1.</sdesc>
<desc>If already focused and the target frame also has frames,     then the nested frame will be focused.</desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>choice</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfFrameNavigation-&gt;TestOfFrameNavigation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFrameNavigation</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameNavigation-&gt;testCanFocusByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameNavigation-&gt;testCanFocusOnSingleFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameNavigation-&gt;testContentComesFromFrameInFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameNavigation-&gt;testStartsWithoutFrameFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;TestOfFrameset">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFrameset</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testEmptyFramesetHasNoContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testFieldIsFirstInFramelist">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testFrameReplacementByIndex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testFrameReplacementByName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;TestHeadersReadFromFramesetByDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testRawContentIsFromAllFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testRawContentIsFromOnlyFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameset-&gt;testTitleReadFromFramesetPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;TestOfFramesetPageInterface">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFramesetPageInterface</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testAbsoluteUrlsComeFromBothFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testFindingFormsByAllFinders">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testFramsetHasPageInterface">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testHeadersReadFromFrameIfInFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testLabelledUrlsComeFromBothFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testOnlyGettingFieldFromFocusedFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testOnlySettingFieldFromFocusedFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testReadFrameTaggedUrlsFromFrameInFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testReadUrlsFromFrameInFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testRelativeUrlsComeFromBothFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testSettingAllFrameFieldsWhenNoFrameFocus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;testUrlByIdComesFromFirstFrameToRespond">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;_getFramesetMethods">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFramesetPageInterface-&gt;_getPageMethods">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;SimpleCookie">
<sdesc>Constructor. Sets the stored values.</sdesc>
<desc></desc>
<type>SimpleCookie</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>expiry</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>is_secure</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;agePrematurely">
<sdesc>Ages the cookie by the specified number of     seconds.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>interval</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;getExpiry">
<sdesc>Accessor for expiry.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;getHost">
<sdesc>Accessor for the truncated host to which this     cookie applies.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;getName">
<sdesc>Accessor for name.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;getPath">
<sdesc>Accessor for path.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;getValue">
<sdesc>Accessor for value. A deleted cookie will     have an empty string for this.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;isExpired">
<sdesc>Test to see if cookie is expired against     the cookie format time or timestamp.</sdesc>
<desc>Will give true for a session cookie.</desc>
<type>void</type>
<methodparam>
<type>integer/string</type>
<parameter>now</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;isSecure">
<sdesc>Accessor for the secure flag.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;isValidHost">
<sdesc>Test for a cookie being valid for a host name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;isValidPath">
<sdesc>Tests a path to see if the cookie applies     there. The test path must be longer or     equal to the cookie path.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookie-&gt;setHost">
<sdesc>Sets the host. The cookie rules determine</sdesc>
<desc>that the first two parts are taken for     certain TLDs and three for others. If the     new host does not match these rules then the     call will fail.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;SimpleHttpHeaders">
<sdesc>Parses the incoming header block.</sdesc>
<desc></desc>
<type>SimpleHttpHeaders</type>
<methodparam>
<type>string</type>
<parameter>headers</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getAuthentication">
<sdesc>Accessor for authentication type.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getHttpVersion">
<sdesc>Accessor for parsed HTTP protocol version.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getLocation">
<sdesc>Returns the redirected URL or false if     no redirection.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getMimeType">
<sdesc>Accessor for MIME type header information.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getNewCookies">
<sdesc>Accessor for any new cookies.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getRaw">
<sdesc>Accessor for raw header block.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getRealm">
<sdesc>Accessor for security realm.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;getResponseCode">
<sdesc>Accessor for parsed HTTP error code.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;isChallenge">
<sdesc>Test to see if the response is an authentication     challenge.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;isRedirect">
<sdesc>Test to see if the response is a valid redirect.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpHeaders-&gt;_parseHeaderLine">
<sdesc>Called on each header line to accumulate the held     data within the class.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>header_line</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpPostRequest-&gt;SimpleHttpPostRequest">
<sdesc>Cretaes an HTML form request.</sdesc>
<desc></desc>
<type>SimpleHttpPostRequest</type>
<methodparam>
<type></type>
<parameter>route</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpPostRequest-&gt;_dispatchRequest">
<sdesc>Sends the headers.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>socket</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;SimpleHttpRequest">
<sdesc>Saves the URL ready for fetching.</sdesc>
<desc></desc>
<type>SimpleHttpRequest</type>
<methodparam>
<type></type>
<parameter>route</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;addHeaderLine">
<sdesc>Adds a header line to the request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>header_line</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;fetch">
<sdesc>Fetches the content and parses the headers.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;setCookie">
<sdesc>Adds a cookie to the request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>cookie</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;_createResponse">
<sdesc>Wraps the socket in a response parser.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>socket</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpRequest-&gt;_dispatchRequest">
<sdesc>Sends the headers.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>socket</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;SimpleHttpResponse">
<sdesc>Constructor. Reads and parses the incoming     content and headers.</sdesc>
<desc></desc>
<type>SimpleHttpResponse</type>
<methodparam>
<type></type>
<parameter>socket</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>request_data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getContent">
<sdesc>Accessor for the content after the last     header line.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getHeaders">
<sdesc>Accessor for header block. The response is the     combination of this and the content.</sdesc>
<desc></desc>
<type>SimpleHeaders</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getMethod">
<sdesc>Original request method.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getNewCookies">
<sdesc>Accessor for any new cookies.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getRequestData">
<sdesc>Original request data.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getSent">
<sdesc>Raw request that was sent down the wire.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleHttpResponse-&gt;getUrl">
<sdesc>Resource name.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleProxyRoute-&gt;SimpleProxyRoute">
<sdesc>Stashes the proxy address.</sdesc>
<desc></desc>
<type>SimpleProxyRoute</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>proxy</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleProxyRoute-&gt;createConnection">
<sdesc>Opens a socket to the route.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleProxyRoute-&gt;_getHostLine">
<sdesc>Creates the host part of the request.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleProxyRoute-&gt;_getRequestLine">
<sdesc>Creates the first line which is the actual request.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;SimpleRoute">
<sdesc>Sets the target URL.</sdesc>
<desc></desc>
<type>SimpleRoute</type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;createConnection">
<sdesc>Opens a socket to the route.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;getUrl">
<sdesc>Resource name.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;_createSocket">
<sdesc>Factory for socket.</sdesc>
<desc></desc>
<type>SimpleSocket/SimpleSecureSocket</type>
<methodparam>
<type>string</type>
<parameter>scheme</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>port</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;_getHostLine">
<sdesc>Creates the host part of the request.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleRoute-&gt;_getRequestLine">
<sdesc>Creates the first line which is the actual request.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;TestOfCookie">
<sdesc></sdesc>
<desc></desc>
<type>TestOfCookie</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testAging">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testBadHosts">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testCookieAccessors">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testCookieDefaults">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testDateExpiry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testFullHostname">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testHostTruncation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testHostValidity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testPathValidity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testSessionExpiring">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCookie-&gt;testTimestampExpiry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfDirectRoute-&gt;TestOfDirectRoute">
<sdesc></sdesc>
<desc></desc>
<type>TestOfDirectRoute</type>
</methodsynopsis>
<methodsynopsis function="TestOfDirectRoute-&gt;testDefaultGetRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfDirectRoute-&gt;testDefaultPostRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfDirectRoute-&gt;testGetWithParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfDirectRoute-&gt;testGetWithPort">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpHeaders-&gt;TestOfHttpHeaders">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHttpHeaders</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpHeaders-&gt;testParseBasicHeaders">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpHeaders-&gt;testParseChallenge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpHeaders-&gt;testParseOfCookies">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpHeaders-&gt;testRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;TestOfHttpRequest">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHttpRequest</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;testCookieWriting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;testMultipleCookieWriting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;testReadingBadConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;testReadingGoodConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRequest-&gt;testWritingAdditionalHeaders">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;TestOfHttpResponse">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHttpResponse</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testBadRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testBadSocketDuringResponse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testIncompleteHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testParseOfCookies">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testParseOfResponseHeaders">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpResponse-&gt;testRedirectWithPort">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;TestOfProxyRoute">
<sdesc></sdesc>
<desc></desc>
<type>TestOfProxyRoute</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;testDefaultGetRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;testDefaultPostRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;testGetWithAuthentication">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;testGetWithParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfProxyRoute-&gt;testGetWithPort">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveHttpTestCase-&gt;LiveHttpTestCase">
<sdesc></sdesc>
<desc></desc>
<type>LiveHttpTestCase</type>
</methodsynopsis>
<methodsynopsis function="LiveHttpTestCase-&gt;testBadSocket">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveHttpTestCase-&gt;testRecordOfSentCharacters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveHttpTestCase-&gt;testSocketClosure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallCountExpectation-&gt;CallCountExpectation">
<sdesc>Stashes the method and expected count for later     reporting.</sdesc>
<desc></desc>
<type>CallCountExpectation</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallCountExpectation-&gt;test">
<sdesc>Tests the assertion. True if correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallCountExpectation-&gt;testMessage">
<sdesc>Reports the comparison.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallMap-&gt;CallMap">
<sdesc>Creates an empty call map.</sdesc>
<desc></desc>
<type>CallMap</type>
</methodsynopsis>
<methodsynopsis function="CallMap-&gt;addReference">
<sdesc>Stashes a reference against a method call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>reference</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallMap-&gt;addValue">
<sdesc>Stashes a value against a method call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallMap-&gt;findFirstMatch">
<sdesc>Searches the call list for a matching parameter     set. Returned by reference.</sdesc>
<desc></desc>
<type>object Object</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CallMap-&gt;isMatch">
<sdesc>Searches the call list for a matching parameter     set. True if successful.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MaximumCallCountExpectation-&gt;MaximumCallCountExpectation">
<sdesc>Stashes the method and expected count for later     reporting.</sdesc>
<desc></desc>
<type>MaximumCallCountExpectation</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MaximumCallCountExpectation-&gt;test">
<sdesc>Tests the assertion. True if correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MaximumCallCountExpectation-&gt;testMessage">
<sdesc>Reports the comparison.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MinimumCallCountExpectation-&gt;MinimumCallCountExpectation">
<sdesc>Stashes the method and expected count for later     reporting.</sdesc>
<desc></desc>
<type>MinimumCallCountExpectation</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MinimumCallCountExpectation-&gt;test">
<sdesc>Tests the assertion. True if correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MinimumCallCountExpectation-&gt;testMessage">
<sdesc>Reports the comparison.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>integer</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Mock-&gt;Mock">
<sdesc>Factory for mock object classes.</sdesc>
<desc></desc>
<type>Mock</type>
</methodsynopsis>
<methodsynopsis function="Mock-&gt;generate">
<sdesc>Clones a class' interface and creates a mock version     that can have return values and expectations set.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mock_class</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>methods</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Mock-&gt;generatePartial">
<sdesc>Generates a version of a class with selected     methods mocked only. Inherits the old class     and chains the mock methods of an aggregated     mock object.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mock_class</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>methods</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Mock-&gt;getExpectationLine">
<sdesc>Uses a stack trace to find the line of an assertion.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>stack</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParametersExpectation-&gt;ParametersExpectation">
<sdesc>Sets the expected parameter list.</sdesc>
<desc></desc>
<type>ParametersExpectation</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>wildcard</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParametersExpectation-&gt;test">
<sdesc>Tests the assertion. True if correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>array</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParametersExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>array</type>
<parameter>comparison</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;SimpleMock">
<sdesc>Creates an empty return list and expectation list.</sdesc>
<desc>All call counts are set to zero.</desc>
<type>SimpleMock</type>
<methodparam>
<type></type>
<parameter>test</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>wildcard</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>is_strict</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectArguments">
<sdesc>Sets up an expected call with a set of     expected parameters in that call. All     calls will be compared to these expectations     regardless of when the call is made.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectArgumentsAt">
<sdesc>Sets up an expected call with a set of     expected parameters in that call. The     expected call count will be adjusted if it     is set too low to reach this call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timing</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectAtLeastOnce">
<sdesc>Convenience method for requiring a method     call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectCallCount">
<sdesc>Sets an expectation for the number of times     a method will be called. The tally method     is used to check this.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectMaximumCallCount">
<sdesc>Sets the number of times a method may be called     before a test failure is triggered.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectMinimumCallCount">
<sdesc>Sets the number of times to call a method to prevent     a failure on the tally.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectNever">
<sdesc>Convenience method for barring a method     call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;expectOnce">
<sdesc>Convenience method for a single method     call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;getTest">
<sdesc>Accessor for attached unit test so that when     subclassed, new expectations can be added easily.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;tally">
<sdesc>Totals up the call counts and triggers a test     assertion if a test is present for expected     call counts.</sdesc>
<desc>This method must be called explicitly for the call     count assertions to be triggered.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleMock-&gt;_assertTrue">
<sdesc>Triggers an assertion on the held test case.</sdesc>
<desc>Should be overridden when using another test     framework other than the SimpleTest one if the     assertion method has a different name.</desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>assertion</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;SimpleStub">
<sdesc>Sets up the wildcard and everything else empty.</sdesc>
<desc></desc>
<type>SimpleStub</type>
<methodparam>
<type>mixed</type>
<parameter>wildcard</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>is_strict</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;getCallCount">
<sdesc>Fetches the call count of a method so far.</sdesc>
<desc></desc>
<type>Number</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;setReturnReference">
<sdesc>Sets a return for a parameter list that will     be passed by reference for all calls.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>reference</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;setReturnReferenceAt">
<sdesc>Sets a return for a parameter list that will     be passed by value only when the required call count     is reached.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timing</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>reference</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;setReturnValue">
<sdesc>Sets a return for a parameter list that will     be passed by value for all calls to this method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;setReturnValueAt">
<sdesc>Sets a return for a parameter list that will     be passed by value only when the required call count     is reached.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timing</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;_addCall">
<sdesc>Adds one to the call count of a method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;_dieOnNoMethod">
<sdesc>Triggers a PHP error if the method is not part     of this object.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>task</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStub-&gt;_getReturn">
<sdesc>Finds the return value matching the incoming     arguments. If there is no matching value found     then an error is triggered.</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>args</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>step</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Stub-&gt;Stub">
<sdesc>Factory for server stub classes.</sdesc>
<desc></desc>
<type>Stub</type>
</methodsynopsis>
<methodsynopsis function="Stub-&gt;generate">
<sdesc>Clones a class' interface and creates a stub version     that can have return values set.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>stub_class</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>methods</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WildcardExpectation-&gt;WildcardExpectation">
<sdesc>Chains constructor only.</sdesc>
<desc></desc>
<type>WildcardExpectation</type>
</methodsynopsis>
<methodsynopsis function="WildcardExpectation-&gt;test">
<sdesc>Tests the expectation. Always true.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WildcardExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCompatibility-&gt;getStackTrace">
<sdesc>Gets the current stack trace topmost first.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCompatibility-&gt;isA">
<sdesc>Test to see if an object is a member of a     class hiearchy.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>object</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCompatibility-&gt;isIdentical">
<sdesc>Identity test. Drops back to equality for PHP5     objects as the === operator counts as the     stronger reference constraint.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCompatibility-&gt;setTimeout">
<sdesc>Sets a socket timeout for each chunk.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>resource</type>
<parameter>handle</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;addPartialMockCode">
<sdesc>Adds additional mock code.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getDefaultProxy">
<sdesc>Accessor for default proxy host.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getDefaultProxyPassword">
<sdesc>Accessor for default proxy password.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getDefaultProxyUsername">
<sdesc>Accessor for default proxy username.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getMockBaseClass">
<sdesc>Accessor for the currently set mock base class.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getPartialMockCode">
<sdesc>Accessor for additional partial mock code.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getStubBaseClass">
<sdesc>Accessor for the currently set stub base class.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;getVersion">
<sdesc>Reads the SimpleTest version from the release file.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;ignore">
<sdesc>Sets the name of a test case to ignore, usually     because the class is an abstract case that should     not be run.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;isIgnored">
<sdesc>Test to see if a test case is in the ignore     list.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;setMockBaseClass">
<sdesc>The base class name is settable here. This is the     class that a new mock will inherited from.</sdesc>
<desc>To modify the generated mocks simply extend the     SimpleMock class and set it's name     with this method before any mocks are generated.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>mock_base</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;setStubBaseClass">
<sdesc>The base class name is settable here. This is the     class that a new stub will inherited from.</sdesc>
<desc>To modify the generated stubs simply extend the     SimpleStub class and set it's name     with this method before any stubs are generated.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>stub_base</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestOptions-&gt;useProxy">
<sdesc>Sets proxy to use on all requests for when     testing from behind a firewall. Set host     to false to disable. This will take effect     if there are no other proxy settings.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>proxy</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfCompatibility-&gt;TestOfCompatibility">
<sdesc></sdesc>
<desc></desc>
<type>TestOfCompatibility</type>
</methodsynopsis>
<methodsynopsis function="TestOfCompatibility-&gt;testIdentityOfObjects">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCompatibility-&gt;testIsA">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfOptions-&gt;TestOfOptions">
<sdesc></sdesc>
<desc></desc>
<type>TestOfOptions</type>
</methodsynopsis>
<methodsynopsis function="TestOfOptions-&gt;testIgnoreList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfOptions-&gt;testMockBase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfOptions-&gt;testStubBase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;SimplePage">
<sdesc>Parses a page ready to access it's contents.</sdesc>
<desc></desc>
<type>SimplePage</type>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptFormEnd">
<sdesc>Closes the most recently opened form.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptFormStart">
<sdesc>Opens a form. New widgets go here.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptFrame">
<sdesc>Takes a single frame tag and stashes it in     the current frame set.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptFramesetEnd">
<sdesc>Closes the most recently opened frameset.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptFramesetStart">
<sdesc>Opens a frameset. A frameset may contain nested     frameset tags.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>SimpleFramesetTag</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;acceptTag">
<sdesc>Adds a tag to the page.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;clearFrameFocus">
<sdesc>Clears the frame focus. Does nothing for a leaf page.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getAbsoluteUrls">
<sdesc>Accessor for a list of all fixed links.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getAuthentication">
<sdesc>Accessor for last Authentication type. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getField">
<sdesc>Accessor for a form element value within a page.</sdesc>
<desc>Finds the first match.</desc>
<type>string/boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFieldById">
<sdesc>Accessor for a form element value within a page.</sdesc>
<desc>Finds the first match.</desc>
<type>string/boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormById">
<sdesc>Finds a held form by the form ID. A way of     identifying a specific form when we have control     of the HTML code.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormByImageId">
<sdesc>Finds a held form by image button id. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormByImageLabel">
<sdesc>Finds a held form by image label. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormByImageName">
<sdesc>Finds a held form by image button id. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormBySubmitId">
<sdesc>Finds a held form by button id. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormBySubmitLabel">
<sdesc>Finds a held form by button label. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFormBySubmitName">
<sdesc>Finds a held form by button label. Will only     search correctly built forms.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFrameFocus">
<sdesc>Accessor for current frame focus. Will be     false as no frames.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFrames">
<sdesc>Fetches a list of loaded frames.</sdesc>
<desc></desc>
<type>array/string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getFrameset">
<sdesc>Accessor for frame name and source URL for every frame that     will need to be loaded. Immediate children only.</sdesc>
<desc></desc>
<type>boolean/array</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getHeaders">
<sdesc>Accessor for raw headers of page.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getMethod">
<sdesc>Original request method.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getMimeType">
<sdesc>Accessor for current MIME type.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getRaw">
<sdesc>Accessor for raw text of page.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getRealm">
<sdesc>Accessor for last Authentication realm. Only valid     straight after a challenge (401).</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getRelativeUrls">
<sdesc>Accessor for a list of all relative links.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getRequest">
<sdesc>Original request as bytes sent down the wire.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getRequestData">
<sdesc>Original request data.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getResponseCode">
<sdesc>Accessor for HTTP response code.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getTitle">
<sdesc>Accessor for parsed title.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getTransportError">
<sdesc>Accessor for last error.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getUrl">
<sdesc>Original resource name.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getUrlById">
<sdesc>Accessor for a URL by the id attribute.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;getUrlsByLabel">
<sdesc>Accessor for URLs by the link label. Label will match     regardess of whitespace issues and case.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;hasFrames">
<sdesc>Test for the presence of a frameset.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;setField">
<sdesc>Sets a field on each form in which the field is     available.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;setFieldById">
<sdesc>Sets a field on the form in which the unique field is     available.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;setFrameFocus">
<sdesc>Sets the focus by name. Always fails for a leaf page.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;setFrameFocusByIndex">
<sdesc>Sets the focus by index. The integer index starts from 1.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>choice</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;_addLink">
<sdesc>Adds a link to the page.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;_linkIsAbsolute">
<sdesc>Test to see if link is an absolute one.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;_makeAbsolute">
<sdesc>Expands expandomatic URLs into fully qualified     URLs.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePage-&gt;_setTitle">
<sdesc>Sets the title tag contents.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;SimplePageBuilder">
<sdesc>Sets the builder up empty.</sdesc>
<desc></desc>
<type>SimplePageBuilder</type>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;addContent">
<sdesc>Unparsed, but relevant data. The data is added     to every open tag.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;endElement">
<sdesc>End of element event.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;parse">
<sdesc>Reads the raw content and send events     into the page to be built.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>$response</type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;startElement">
<sdesc>Start of element event. Opens a new tag.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;_createInputTag">
<sdesc>Factory for input tags.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;_createPage">
<sdesc>Creates an empty page.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;_createParser">
<sdesc>Creates the parser used with the builder.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;_createSelectionTag">
<sdesc>Factory for selection fields.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimplePageBuilder-&gt;_createTag">
<sdesc>Factory for the tag objects. Creates the     appropriate tag object for the incoming tag name.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfErrorPage-&gt;TestOfErrorPage">
<sdesc></sdesc>
<desc></desc>
<type>TestOfErrorPage</type>
</methodsynopsis>
<methodsynopsis function="TestOfErrorPage-&gt;testInterface">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfForms-&gt;TestOfForms">
<sdesc></sdesc>
<desc></desc>
<type>TestOfForms</type>
</methodsynopsis>
<methodsynopsis function="TestOfForms-&gt;testButtons">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;TestOfHtmlPage">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHtmlPage</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testAddAbsoluteLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testAddRelativeLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testAddStrictRelativeLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testFindLinkWithNormalisation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testFramesetAbsence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testFramesInPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testHasEmptyFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testLinkIds">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testNamedFramesInPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testNoLinks">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testRawAccessor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlPage-&gt;testTitleSetting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;TestOfPageBuilder">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPageBuilder</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testForm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testLinkExtraction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testLinkWithId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testMultipleLinks">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageBuilder-&gt;testTitle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;TestOfPageHeaders">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPageHeaders</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testAuthenticationAccessors">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testHeadersAccessor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testMimeAccessor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testResponseAccessor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testTransportError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageHeaders-&gt;testUrlAccessor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageParsing-&gt;TestOfPageParsing">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPageParsing</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageParsing-&gt;testParse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;TestOfPageScraping">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPageScraping</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;parse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testEmptyFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testEmptyPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFindFormByButtonTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFindFormById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFindFormByImage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFindFormByLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFramesCollectedWithNestedFramesetTags">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testFrameWithNoSource">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testLinksPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testNamedFrames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testNastyTitle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testReadingTextArea">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testReadingTextField">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testSettingSelectionField">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testSettingTextArea">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testSettingTextField">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testSingleFrame">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testSingleFrameInNestedFrameset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testTitle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPageScraping-&gt;testUninterestingPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ParallelRegex-&gt;ParallelRegex">
<sdesc>Constructor. Starts with no patterns.</sdesc>
<desc></desc>
<type>ParallelRegex</type>
<methodparam>
<type>boolean</type>
<parameter>case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParallelRegex-&gt;addPattern">
<sdesc>Adds a pattern with an optional label.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParallelRegex-&gt;match">
<sdesc>Attempts to match all patterns at once against     a string.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>match</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;SimpleLexer">
<sdesc>Sets up the lexer in case insensitive matching     by default.</sdesc>
<desc></desc>
<type>SimpleLexer</type>
<methodparam>
<type></type>
<parameter>parser</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>start</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;addEntryPattern">
<sdesc>Adds a pattern that will enter a new parsing     mode. Useful for entering parenthesis, strings,     tags, etc.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>new_mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;addExitPattern">
<sdesc>Adds a pattern that will exit the current mode     and re-enter the previous one.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;addPattern">
<sdesc>Adds a token search pattern for a particular     parsing mode. The pattern does not change the     current mode.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;addSpecialPattern">
<sdesc>Adds a pattern that has a special mode. Acts as an entry     and exit pattern in one go, effectively calling a special     parser handler for this token only.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>special</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;mapHandler">
<sdesc>Adds a mapping from a mode to another handler.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>handler</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleLexer-&gt;parse">
<sdesc>Splits the page text into tokens. Will fail</sdesc>
<desc>if the handlers report an error or if no     content is consumed. If successful then each     unparsed and parsed token invokes a call to the     held listener.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>raw</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxListener-&gt;SimpleSaxListener">
<sdesc>Sets the document to write to.</sdesc>
<desc></desc>
<type>SimpleSaxListener</type>
</methodsynopsis>
<methodsynopsis function="SimpleSaxListener-&gt;addContent">
<sdesc>Unparsed, but relevant data.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxListener-&gt;endElement">
<sdesc>End of element event.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxListener-&gt;startElement">
<sdesc>Start of element event.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;SimpleSaxParser">
<sdesc>Sets the listener.</sdesc>
<desc></desc>
<type>SimpleSaxParser</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;acceptAttributeToken">
<sdesc>Part of the tag data.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;acceptEndToken">
<sdesc>Accepts a token from the end tag mode.</sdesc>
<desc>The element name is converted to lower case.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;acceptEntityToken">
<sdesc>A character entity.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;acceptStartToken">
<sdesc>Accepts a token from the tag mode. If the</sdesc>
<desc>starting element completes then the element     is dispatched and the current attributes     set back to empty. The element or attribute     name is converted to lower case.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;acceptTextToken">
<sdesc>Character data between tags regarded as     important.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;createLexer">
<sdesc>Sets up the matching lexer. Starts in 'text' mode.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>parser</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;ignore">
<sdesc>Incoming data to be ignored.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>event</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSaxParser-&gt;parse">
<sdesc>Runs the content through the lexer which     should call back to the acceptors.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>raw</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStateStack-&gt;SimpleStateStack">
<sdesc>Constructor. Starts in named state.</sdesc>
<desc></desc>
<type>SimpleStateStack</type>
<methodparam>
<type>string</type>
<parameter>start</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStateStack-&gt;enter">
<sdesc>Adds a state to the stack and sets it     to be the current state.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>state</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleStateStack-&gt;getCurrent">
<sdesc>Accessor for current state.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleStateStack-&gt;leave">
<sdesc>Leaves the current state and reverts     to the previous one.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;TestOfHtmlLexer">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHtmlLexer</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testComplexLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testEmptyLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testEmptyLinkWithId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testEncodedLinkAddress">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testFramesetTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testFramesParsedWithoutError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testInputTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testLabelledLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testLinkAddress">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testSkipComments">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testSkipCss">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testSkipJavaScript">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testTitleTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHtmlLexer-&gt;testUninteresting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexer-&gt;TestOfLexer">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLexer</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexer-&gt;testEmptyPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexer-&gt;testMultiplePattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexer-&gt;testSinglePattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerHandlers-&gt;TestOfLexerHandlers">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLexerHandlers</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerHandlers-&gt;testModeMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;TestOfLexerModes">
<sdesc></sdesc>
<desc></desc>
<type>TestOfLexerModes</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;testIsolatedPattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;testModeChange">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;testNesting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;testSingular">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfLexerModes-&gt;testUnwindTooFar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;TestOfParallelRegex">
<sdesc></sdesc>
<desc></desc>
<type>TestOfParallelRegex</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testCaseInsensitive">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testCaseSensitive">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testMatchAll">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testMatchMultiple">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testNoPatterns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testNoSubject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParallelRegex-&gt;testPatternLabels">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;TestOfSaxGeneration">
<sdesc></sdesc>
<desc></desc>
<type>TestOfSaxGeneration</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testIgnore">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testInput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLexerFailure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLexerSuccess">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLinkEnd">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLinkStart">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLinkStartWithEncodedUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testLinkStartWithId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testSimpleLinkStart">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSaxGeneration-&gt;testSimpleTitleStart">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStateStack-&gt;TestOfStateStack">
<sdesc></sdesc>
<desc></desc>
<type>TestOfStateStack</type>
</methodsynopsis>
<methodsynopsis function="TestOfStateStack-&gt;testExhaustion">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStateStack-&gt;testStartState">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStateStack-&gt;testStateMoves">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestParser-&gt;TestParser">
<sdesc></sdesc>
<desc></desc>
<type>TestParser</type>
</methodsynopsis>
<methodsynopsis function="TestParser-&gt;a">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestParser-&gt;accept">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestParser-&gt;b">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSimpleSaxParser-&gt;TestSimpleSaxParser">
<sdesc></sdesc>
<desc></desc>
<type>TestSimpleSaxParser</type>
</methodsynopsis>
<methodsynopsis function="TestSimpleSaxParser-&gt;createLexer">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;PHPUnit_TestCase">
<sdesc>Constructor. Sets the test name.</sdesc>
<desc></desc>
<type>PHPUnit_TestCase</type>
<methodparam>
<type>$label</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertEquals">
<sdesc>Will test straight equality if set to loose     typing, or identity if not.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$first</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>$second</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertFalse">
<sdesc>Sends pass if the test condition resolves false,     a fail otherwise.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$condition</type>
<parameter>condition</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertNotNull">
<sdesc>Passes if the value tested is not null.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$value</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertNotSame">
<sdesc>In PHP5 the identity test tests for the same     object. THis is a reference test in PHP4.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$first</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>$second</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertNull">
<sdesc>Passes if the value tested is null.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$value</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertRegExp">
<sdesc>Tests a regex match. Needs refactoring.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$pattern</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>$subject</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertSame">
<sdesc>In PHP5 the identity test tests for the same     object. THis is a reference test in PHP4.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$first</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>$second</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertTrue">
<sdesc>Sends pass if the test condition resolves true,     a fail otherwise.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$condition</type>
<parameter>condition</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;assertType">
<sdesc>Tests the type of a value.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$value</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>$type</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;countTestCases">
<sdesc>For progress indication during     a test amongst other things.</sdesc>
<desc></desc>
<type>Usually</type>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;getName">
<sdesc>Accessor for name, normally just the class     name.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;setLooselyTyped">
<sdesc>Sets equality operation to act as a simple equal     comparison only, allowing a broader range of     matches.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$loosely_typed</type>
<parameter>loosely_typed</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPUnit_TestCase-&gt;setName">
<sdesc>Does nothing. For compatibility only.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$name</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;TestCase">
<sdesc>Constructor. Sets the test name.</sdesc>
<desc></desc>
<type>TestCase</type>
<methodparam>
<type>$label</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;assert">
<sdesc>Sends pass if the test condition resolves true,     a fail otherwise.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$condition</type>
<parameter>condition</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;assertEquals">
<sdesc>Will test straight equality if set to loose     typing, or identity if not.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$first</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>$second</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;assertEqualsMultilineStrings">
<sdesc>Will test straight equality if set to loose     typing, or identity if not.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$first</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>$second</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;assertRegexp">
<sdesc>Tests a regex match.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$pattern</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>$subject</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;error">
<sdesc>Sends an error which we interpret as a fail     with a different message for compatibility.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;name">
<sdesc>Accessor for name.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveSitesTestCase-&gt;LiveSitesTestCase">
<sdesc></sdesc>
<desc></desc>
<type>LiveSitesTestCase</type>
</methodsynopsis>
<methodsynopsis function="LiveSitesTestCase-&gt;testLastCraft">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveSitesTestCase-&gt;testPhpLondon">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiveSitesTestCase-&gt;testSourceforge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;RemoteTestCase">
<sdesc>Sets the location of the remote test.</sdesc>
<desc></desc>
<type>RemoteTestCase</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>dry_url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;getLabel">
<sdesc>Accessor for the test name for subclasses.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;getSize">
<sdesc>Accessor for the number of subtests.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;run">
<sdesc>Runs the top level test for this class. Currently     reads the data as a single chunk. I'll fix this     once I have added iteration to the browser.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>reporter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;_createBrowser">
<sdesc>Creates a new web browser object for fetching     the XML report.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="RemoteTestCase-&gt;_createParser">
<sdesc>Creates the XML parser.</sdesc>
<desc></desc>
<type>SimpleTestXmlListener</type>
<methodparam>
<type></type>
<parameter>reporter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;HtmlReporter">
<sdesc>Does nothing yet. The first output will     be sent on the first test start. For use     by a web browser.</sdesc>
<desc></desc>
<type>HtmlReporter</type>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;paintException">
<sdesc>Paints a PHP error or exception.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;paintFail">
<sdesc>Paints the test failure with a breadcrumbs     trail of the nesting test suites below the     top level test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;paintFooter">
<sdesc>Paints the end of the test with a summary of     the passes and failures.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;paintFormattedMessage">
<sdesc>Paints formatted text such as dumped variables.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;paintHeader">
<sdesc>Paints the top of the web page setting the     title to the name of the starting test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;sendNoCacheHeaders">
<sdesc>Send the headers necessary to ensure the page is     reloaded on every request. Otherwise you could be     scratching your head over out of date test data.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlReporter-&gt;_getCss">
<sdesc>Paints the CSS. Add additional styles here.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;TextReporter">
<sdesc>Does nothing yet. The first output will     be sent on the first test start.</sdesc>
<desc></desc>
<type>TextReporter</type>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;paintException">
<sdesc>Paints a PHP error or exception.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;paintFail">
<sdesc>Paints the test failure as a stack trace.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;paintFooter">
<sdesc>Paints the end of the test with a summary of     the passes and failures.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;paintFormattedMessage">
<sdesc>Paints formatted text such as dumped variables.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextReporter-&gt;paintHeader">
<sdesc>Paints the title only.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;SimpleReporter">
<sdesc>Starts the display with no results in.</sdesc>
<desc></desc>
<type>SimpleReporter</type>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;getTestCaseCount">
<sdesc>Accessor for total test size in number     of test cases. Null until the first     test is started.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;getTestCaseProgress">
<sdesc>Accessor for the number of test cases     completed so far.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;getTestList">
<sdesc>Accessor for internal test stack. For     subclasses that need to see the whole test     history for display purposes.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;inCli">
<sdesc>Static check for running in the comand line.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintCaseEnd">
<sdesc>Paints the end of a test case. Will paint the page     footer if the stack of tests has unwound.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintCaseStart">
<sdesc>Paints the start of a test case. Will also paint     the page header and footer if this is the     first test. Will stash the size if the first     start.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintFooter">
<sdesc>Paints the test document footer.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintGroupEnd">
<sdesc>Paints the end of a group test. Will paint the page     footer if the stack of tests has unwound.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>progress</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintGroupStart">
<sdesc>Paints the start of a group test. Will also paint     the page header and footer if this is the     first test. Will stash the size if the first     start.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>size</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintHeader">
<sdesc>Paints the test document header.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintMethodEnd">
<sdesc>Paints the end of a test method. Will paint the page     footer if the stack of tests has unwound.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleReporter-&gt;paintMethodStart">
<sdesc>Paints the start of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;SimpleScorer">
<sdesc>Starts the test run with no results.</sdesc>
<desc></desc>
<type>SimpleScorer</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;getExceptionCount">
<sdesc>Accessor for the number of untrapped errors     so far.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;getFailCount">
<sdesc>Accessor for the number of fails so far.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;getPassCount">
<sdesc>Accessor for the number of passes so far.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;getStatus">
<sdesc>Accessor for current status. Will be false     if there have been any failures or exceptions.</sdesc>
<desc>Used for command line tools.</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;invoke">
<sdesc>Invokes a single test method on the test case.</sdesc>
<desc>This call back allows the reporter to decide if     it actually wants to run the test.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>runner</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;makeDry">
<sdesc>Signals that the next evaluation will be a dry     run. That is, the structure events will be     recorded, but no tests will be run.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintCaseEnd">
<sdesc>Paints the end of a test case.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintCaseStart">
<sdesc>Paints the start of a test case.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintError">
<sdesc>Deals with PHP 4 throwing an error.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintException">
<sdesc>Deals with PHP 5 throwing an exception     This isn't really implemented yet.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Exception</type>
<parameter>exception</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintFail">
<sdesc>Increments the fail count.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintFormattedMessage">
<sdesc>Paints a formatted ASCII message such as a     variable dump.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintGroupEnd">
<sdesc>Paints the end of a group test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintGroupStart">
<sdesc>Paints the start of a group test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>size</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintMessage">
<sdesc>Paints a simple supplementary message.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintMethodEnd">
<sdesc>Paints the end of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintMethodStart">
<sdesc>Paints the start of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintPass">
<sdesc>Increments the pass count.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleScorer-&gt;paintSignal">
<sdesc>By default just ignores user generated events.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>payload</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfShell-&gt;TestOfShell">
<sdesc></sdesc>
<desc></desc>
<type>TestOfShell</type>
</methodsynopsis>
<methodsynopsis function="TestOfShell-&gt;testBadCommand">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShell-&gt;testEcho">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTesterAndShell-&gt;TestOfShellTesterAndShell">
<sdesc></sdesc>
<desc></desc>
<type>TestOfShellTesterAndShell</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTesterAndShell-&gt;testEcho">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTesterAndShell-&gt;testFileExistence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTesterAndShell-&gt;testFilePatterns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;ShellTestCase">
<sdesc>Creates an empty test case. Should be subclassed     with test methods for a functional test case.</sdesc>
<desc></desc>
<type>ShellTestCase</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertExitCode">
<sdesc>Tests the last status code from the shell.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>status</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertFileExists">
<sdesc>File existence check.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertFileNotExists">
<sdesc>File non-existence check.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertFilePattern">
<sdesc>Scans a file for a Perl regex. If found     anywhere it passes, else it fails.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertNoFilePattern">
<sdesc>If a Perl regex is found anywhere in the named     file then a failure is generated, else a pass.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertNoOutputPattern">
<sdesc>If a Perl regex is found anywhere in the current     output then a failure is generated, else a pass.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>$message</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertOutput">
<sdesc>Attempt to exactly match the combined STDERR and     STDOUT output.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;assertOutputPattern">
<sdesc>Scans the output for a Perl regex. If found     anywhere it passes, else it fails.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;dumpOutput">
<sdesc>Dumps the output of the last command.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;execute">
<sdesc>Executes a command and buffers the results.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>command</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;getOutput">
<sdesc>Accessor for the last output.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;getOutputAsList">
<sdesc>Accessor for the last output.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;_createShell">
<sdesc>Factory for the shell to run the command on.</sdesc>
<desc></desc>
<type>Shell</type>
</methodsynopsis>
<methodsynopsis function="ShellTestCase-&gt;_getShell">
<sdesc>Accessor for current shell. Used for testing the     the tester itself.</sdesc>
<desc></desc>
<type>Shell</type>
</methodsynopsis>
<methodsynopsis function="SimpleShell-&gt;SimpleShell">
<sdesc>Executes the shell comand and stashes the output.</sdesc>
<desc></desc>
<type>SimpleShell</type>
</methodsynopsis>
<methodsynopsis function="SimpleShell-&gt;execute">
<sdesc>Actually runs the command. Does not trap the     error stream output as this need PHP 4.3+.</sdesc>
<desc></desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>command</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleShell-&gt;getOutput">
<sdesc>Accessor for the last output.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleShell-&gt;getOutputAsList">
<sdesc>Accessor for the last output.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTestCase-&gt;TestOfShellTestCase">
<sdesc></sdesc>
<desc></desc>
<type>TestOfShellTestCase</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTestCase-&gt;testExitCode">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTestCase-&gt;testOutput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTestCase-&gt;testOutputPatterns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfShellTestCase-&gt;_getShell">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Dummy-&gt;Dummy">
<sdesc></sdesc>
<desc></desc>
<type>Dummy</type>
</methodsynopsis>
<methodsynopsis function="Dummy-&gt;aMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Dummy-&gt;anotherMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SpecialSimpleMock-&gt;SpecialSimpleMock">
<sdesc></sdesc>
<desc></desc>
<type>SpecialSimpleMock</type>
</methodsynopsis>
<methodsynopsis function="SpecialSimpleStub-&gt;SpecialSimpleStub">
<sdesc></sdesc>
<desc></desc>
<type>SpecialSimpleStub</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;TestOfCallMap">
<sdesc></sdesc>
<desc></desc>
<type>TestOfCallMap</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testAllWildcard">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testExactReference">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testExactValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testOrdering">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfCallMap-&gt;testWildcard">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;TestOfMockExpectations">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMockExpectations</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;setUp">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;tearDown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testBadArgParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testExpectedArguments">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testFailedArguments">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testFailedNever">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testFailedSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testMaxCalls">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testMinCalls">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testOverOnce">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testSettingExpectationOnNonMethodThrowsError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testSpecificSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testUnderAtLeastOnce">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testUnderOnce">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testWildcardArguments">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockExpectations-&gt;testZeroArguments">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockGeneration-&gt;TestOfMockGeneration">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMockGeneration</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockGeneration-&gt;testCloning">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockGeneration-&gt;testCloningWithChosenClassName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockGeneration-&gt;testCloningWithDifferentBaseClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockGeneration-&gt;testCloningWithExtraMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;TestOfMockReturns">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMockReturns</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testCallCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testNoUnitTesterSetThrowsError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testParameteredReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testPatternMatchReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testReferenceReturned">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testReturnReferenceSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockReturns-&gt;testWildcardReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockTally-&gt;TestOfMockTally">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMockTally</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockTally-&gt;testExpectedCallCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockTally-&gt;testZeroCallCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;TestOfParametersExpectation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfParametersExpectation</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testAnyMatch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testEmptyMatch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testIdentityOnly">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testLongList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testMissingParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testNullParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testOtherExpectations">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testSingleMatch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfParametersExpectation-&gt;testWildcardExpectations">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;TestOfPartialMocks">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPartialMocks</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testAdditionalPartialMockCode">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testExpectations">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testMethodReplacement">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testReferences">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testSettingExpectationOnMissingMethodThrowsError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPartialMocks-&gt;testSettingReturns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;TestOfServerStubReturns">
<sdesc></sdesc>
<desc></desc>
<type>TestOfServerStubReturns</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testAllWildcardReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testCallCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testComplicatedReturnSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testDefaultReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testMethodInterference">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testMultipleMethods">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testMultipleMethodSequences">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testParameteredReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testReferenceReturned">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testReturnReferenceSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testReturnSequence">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testSequenceFallback">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfServerStubReturns-&gt;testWildcardReturn">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStubGeneration-&gt;TestOfStubGeneration">
<sdesc></sdesc>
<desc></desc>
<type>TestOfStubGeneration</type>
</methodsynopsis>
<methodsynopsis function="TestOfStubGeneration-&gt;testCloning">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStubGeneration-&gt;testCloningWithChosenClassName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStubGeneration-&gt;testCloningWithDifferentBaseClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStubGeneration-&gt;testCloningWithExtraMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWildcardExpectation-&gt;TestOfWildcardExpectation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfWildcardExpectation</type>
</methodsynopsis>
<methodsynopsis function="TestOfWildcardExpectation-&gt;testSimpleInteger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;GroupTest">
<sdesc>Sets the name of the test suite.</sdesc>
<desc></desc>
<type>GroupTest</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;addTestCase">
<sdesc>Adds a test into the suite. Can be either a group     test or some other unit test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>test_case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;addTestClass">
<sdesc>Adds a test into the suite by class name. The class will     be instantiated as needed.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>test_case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;addTestFile">
<sdesc>Builds a group test from a library of test cases.</sdesc>
<desc>The new group is composed into this one.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_file</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;getLabel">
<sdesc>Accessor for the test name for subclasses.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;getSize">
<sdesc>Number of contained test cases.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="GroupTest-&gt;run">
<sdesc>Invokes run() on all of the held test cases, instantiating     them if necessary.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>reporter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleErrorTrappingRunner-&gt;SimpleErrorTrappingRunner">
<sdesc>Takes in the test case and reporter to mediate between.</sdesc>
<desc></desc>
<type>SimpleErrorTrappingRunner</type>
<methodparam>
<type></type>
<parameter>test_case</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>scorer</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleErrorTrappingRunner-&gt;invoke">
<sdesc>Invokes a test method and dispatches any     untrapped errors. Called back from     the visiting runner.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;SimpleRunner">
<sdesc>Takes in the test case and reporter to mediate between.</sdesc>
<desc></desc>
<type>SimpleRunner</type>
<methodparam>
<type></type>
<parameter>test_case</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>scorer</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;invoke">
<sdesc>Invokes a test method and buffered with setUp()     and tearDown() calls.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintError">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintException">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Exception</type>
<parameter>exception</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintFail">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintFormattedMessage">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintMessage">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintMethodEnd">
<sdesc>Paints the end of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintMethodStart">
<sdesc>Paints the start of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintPass">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;paintSignal">
<sdesc>Chains to the wrapped reporter.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>payload</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;run">
<sdesc>Runs the test methods in the test case.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>SimpleTest</type>
<parameter>test_case</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;_getTestCase">
<sdesc>Accessor for test case being run.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;_isConstructor">
<sdesc>Tests to see if the method is the constructor and     so should be ignored.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRunner-&gt;_isTest">
<sdesc>Tests to see if the method is a test that should     be run. Currently any method that starts with 'test'     is a candidate.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;SimpleTestCase">
<sdesc>Sets up the test with no display.</sdesc>
<desc></desc>
<type>SimpleTestCase</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;after">
<sdesc>Runs test case specific code after the user tearDown().</sdesc>
<desc>For extension writers not wanting to interfere with user tests.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;assertExpectation">
<sdesc>Runs an expectation directly, for extending the     tests with new expectation classes.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>expectation</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>test_value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;assertFalse">
<sdesc>Will be true on false and vice versa. False     is the PHP definition of false, so that null,     empty strings, zero and an empty array all count     as false.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>boolean</type>
<parameter>result</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;assertTrue">
<sdesc>Called from within the test methods to register     passes and failures.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>boolean</type>
<parameter>result</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;before">
<sdesc>Runs test case specific code before the user setUp().</sdesc>
<desc>For extension writers not wanting to interfere with setUp().</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;dump">
<sdesc>Sends a formatted dump of a variable to the     test suite for those emergency debugging     situations.</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>mixed</type>
<parameter>variable</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;error">
<sdesc>Formats a PHP error and dispatches it to the     runner.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>severity</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>file</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>line</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>globals</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;fail">
<sdesc>Sends a fail event with a message.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;getAssertionLine">
<sdesc>Uses a stack trace to find the line of an assertion.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>stack</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;getLabel">
<sdesc>Accessor for the test name for subclasses.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;getSize">
<sdesc>Accessor for the number of subtests.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;pass">
<sdesc>Sends a pass event with a message.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;run">
<sdesc>Uses reflection to run every method within itself     starting with the string &quot;test&quot;.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>reporter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;sendMessage">
<sdesc>Dispatches a text message straight to the     test suite. Useful for status bar displays.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;setUp">
<sdesc>Sets up unit test wide variables at the start     of each test method. To be overridden in     actual user test cases.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;signal">
<sdesc>Sends a user defined event to the test runner.</sdesc>
<desc>This is for small scale extension where     both the test case and either the runner or     display are subclassed.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>payload</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;swallowErrors">
<sdesc>Cancels any outstanding errors.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;tearDown">
<sdesc>Clears the data set in the setUp() method call.</sdesc>
<desc>To be overridden by the user in actual user test cases.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestCase-&gt;_createRunner">
<sdesc>Can modify the incoming reporter so as to run     the tests differently. This version simply     passes it straight through.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>reporter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSecureSocket-&gt;SimpleSecureSocket">
<sdesc>Opens a secure socket for reading and writing.</sdesc>
<desc></desc>
<type>SimpleSecureSocket</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>port</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSecureSocket-&gt;_openSocket">
<sdesc>Actually opens the low level socket.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>port</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>error_number</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>error</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;SimpleSocket">
<sdesc>Opens a socket for reading and writing.</sdesc>
<desc></desc>
<type>SimpleSocket</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>port</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;close">
<sdesc>Closes the socket preventing further reads.</sdesc>
<desc>Cannot be reopened once closed.</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;getSent">
<sdesc>Accessor for content so far.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;isOpen">
<sdesc>Accessor for socket open state.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;read">
<sdesc>Reads data from the socket.</sdesc>
<desc></desc>
<type>integer</type>
<methodparam>
<type>integer</type>
<parameter>block_size</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;write">
<sdesc>Writes some data to the socket and saves alocal copy.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSocket-&gt;_openSocket">
<sdesc>Actually opens the low level socket.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>port</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>error_number</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>error</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StickyError-&gt;StickyError">
<sdesc>Sets the error to empty.</sdesc>
<desc></desc>
<type>StickyError</type>
</methodsynopsis>
<methodsynopsis function="StickyError-&gt;getError">
<sdesc>Accessor for an outstanding error.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="StickyError-&gt;isError">
<sdesc>Test for an outstanding error.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="StickyError-&gt;_clearError">
<sdesc>Resets the error state to no error.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StickyError-&gt;_setError">
<sdesc>Sets the internal error.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>error</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfStickyError-&gt;TestOfStickyError">
<sdesc></sdesc>
<desc></desc>
<type>TestOfStickyError</type>
</methodsynopsis>
<methodsynopsis function="TestOfStickyError-&gt;testClearingError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfStickyError-&gt;testSettingError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;MultipleSelectionTag">
<sdesc>Starts with attributes only.</sdesc>
<desc></desc>
<type>MultipleSelectionTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;addContent">
<sdesc>Text within the selection element is ignored.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;addTag">
<sdesc>Adds an option tag to a selection field.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;getDefault">
<sdesc>Scans options for defaults to populate the     value array().</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;getValue">
<sdesc>Accessor for current selection value.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="MultipleSelectionTag-&gt;setValue">
<sdesc>Can only set allowed values.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>array</type>
<parameter>values</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleAnchorTag-&gt;SimpleAnchorTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleAnchorTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleAnchorTag-&gt;getHref">
<sdesc>Accessor for URL as string.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleButtonTag-&gt;SimpleButtonTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc>Defaults are very browser dependent.</desc>
<type>SimpleButtonTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleButtonTag-&gt;expectEndTag">
<sdesc>Check to see if the tag can have both start and     end tags with content in between.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleButtonTag-&gt;getLabel">
<sdesc>Value of browser visible text.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleButtonTag-&gt;getSubmitValues">
<sdesc>Gets the values submitted as a form. Gone     for the Mozilla defaults values.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleButtonTag-&gt;setValue">
<sdesc>Disables the setting of the button value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxGroup-&gt;SimpleCheckboxGroup">
<sdesc>Starts empty.</sdesc>
<desc></desc>
<type>SimpleCheckboxGroup</type>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxGroup-&gt;addWidget">
<sdesc>Adds a tag to the group.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>widget</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxGroup-&gt;getDefault">
<sdesc>Accessor for starting value that is active.</sdesc>
<desc></desc>
<type>string/array</type>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxGroup-&gt;getValue">
<sdesc>Accessor for current selected widget or false     if none.</sdesc>
<desc></desc>
<type>string/array</type>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxGroup-&gt;setValue">
<sdesc>Accessor for current set values.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/array/boolean</type>
<parameter>values</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxTag-&gt;SimpleCheckboxTag">
<sdesc>Starts with attributes only.</sdesc>
<desc></desc>
<type>SimpleCheckboxTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxTag-&gt;expectEndTag">
<sdesc>Tag contains no content.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxTag-&gt;getDefault">
<sdesc>Accessor for starting value. The default     value is &quot;on&quot;.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleCheckboxTag-&gt;setValue">
<sdesc>The only allowed value in the one in the     &quot;value&quot; attribute. The default for this     attribute is &quot;on&quot;.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFormTag-&gt;SimpleFormTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleFormTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameTag-&gt;SimpleFrameTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleFrameTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleFrameTag-&gt;expectEndTag">
<sdesc>Tag contains no content.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleImageSubmitTag-&gt;SimpleImageSubmitTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleImageSubmitTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleImageSubmitTag-&gt;expectEndTag">
<sdesc>Tag contains no end element.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleImageSubmitTag-&gt;getLabel">
<sdesc>Value of browser visible text.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleImageSubmitTag-&gt;getSubmitValues">
<sdesc>Gets the values submitted as a form.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleImageSubmitTag-&gt;setValue">
<sdesc>Disables the setting of the button value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleOptionTag-&gt;SimpleOptionTag">
<sdesc>Stashes the attributes.</sdesc>
<desc></desc>
<type>SimpleOptionTag</type>
</methodsynopsis>
<methodsynopsis function="SimpleOptionTag-&gt;getDefault">
<sdesc>Accessor for starting value. Will be set to     the option label if no value exists.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleOptionTag-&gt;setValue">
<sdesc>Does nothing.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRadioButtonTag-&gt;SimpleRadioButtonTag">
<sdesc>Stashes the attributes.</sdesc>
<desc></desc>
<type>SimpleRadioButtonTag</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioButtonTag-&gt;expectEndTag">
<sdesc>Tag contains no content.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioButtonTag-&gt;getDefault">
<sdesc>Accessor for starting value.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioButtonTag-&gt;setValue">
<sdesc>The only allowed value in the one in the     &quot;value&quot; attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRadioGroup-&gt;SimpleRadioGroup">
<sdesc>Starts empty.</sdesc>
<desc></desc>
<type>SimpleRadioGroup</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioGroup-&gt;addWidget">
<sdesc>Adds a tag to the group.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>widget</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleRadioGroup-&gt;getDefault">
<sdesc>Accessor for starting value that is active.</sdesc>
<desc></desc>
<type>string/boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioGroup-&gt;getValue">
<sdesc>Accessor for current selected widget or false     if none.</sdesc>
<desc></desc>
<type>string/boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleRadioGroup-&gt;setValue">
<sdesc>Each tag is tried in turn until one is     successfully set. The others will be     unchecked if successful.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;SimpleSelectionTag">
<sdesc>Starts with attributes only.</sdesc>
<desc></desc>
<type>SimpleSelectionTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;addContent">
<sdesc>Text within the selection element is ignored.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;addTag">
<sdesc>Adds an option tag to a selection field.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;getDefault">
<sdesc>Scans options for defaults. If none, then     the first option is selected.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;getValue">
<sdesc>Accessor for current selection value.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleSelectionTag-&gt;setValue">
<sdesc>Can only set allowed values.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSubmitTag-&gt;SimpleSubmitTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleSubmitTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleSubmitTag-&gt;expectEndTag">
<sdesc>Tag contains no end element.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleSubmitTag-&gt;getLabel">
<sdesc>Value of browser visible text.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleSubmitTag-&gt;getSubmitValues">
<sdesc>Gets the values submitted as a form.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleSubmitTag-&gt;setValue">
<sdesc>Disables the setting of the button value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;SimpleTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleTag</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;addContent">
<sdesc>Appends string content to the current content.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>content</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;addTag">
<sdesc>Adds an enclosed tag to the content.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;expectEndTag">
<sdesc>Check to see if the tag can have both start and     end tags with content in between.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;getAttribute">
<sdesc>Accessor for an attribute.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;getChildElements">
<sdesc>List oflegal child elements.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;getContent">
<sdesc>Accessor for the whole content so far.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;getTagName">
<sdesc>Accessor for tag name.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTag-&gt;_setAttribute">
<sdesc>Sets an attribute.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTextAreaTag-&gt;SimpleTextAreaTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleTextAreaTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTextAreaTag-&gt;getDefault">
<sdesc>Accessor for starting value.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleTextAreaTag-&gt;setValue">
<sdesc>Applies word wrapping if needed.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTextTag-&gt;SimpleTextTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleTextTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTextTag-&gt;expectEndTag">
<sdesc>Tag contains no content.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="SimpleTextTag-&gt;setValue">
<sdesc>Sets the current form element value. Cannot     change the value of a hidden field.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTitleTag-&gt;SimpleTitleTag">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleTitleTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;SimpleWidget">
<sdesc>Starts with a named tag with attributes only.</sdesc>
<desc></desc>
<type>SimpleWidget</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;getDefault">
<sdesc>Accessor for default value parsed with the tag.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;getName">
<sdesc>Accessor for name submitted as the key in     GET/POST variables hash.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;getValue">
<sdesc>Accessor for currently set value or default if     none.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;resetValue">
<sdesc>Resets the form element value back to the     default.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleWidget-&gt;setValue">
<sdesc>Sets the current form element value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;TestOfRadioGroup">
<sdesc></sdesc>
<desc></desc>
<type>TestOfRadioGroup</type>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;testEmptyGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;testFailToSetUnlistedValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;testReadingMultipleButtonGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;testReadingSingleButtonGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfRadioGroup-&gt;testSettingNewValueClearsTheOldOne">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;TestOfSelection">
<sdesc></sdesc>
<desc></desc>
<type>TestOfSelection</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testFailToSetIllegalOption">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testFailToSetIllegalOptionsInMultiple">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testMultipleDefaultWithNoSelections">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testMultipleDefaultWithSelections">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testNastyOptionValuesThatLookLikeFalse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSettingMappedOption">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSettingMultiple">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSettingOption">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSingle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSingleDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testSingleMappedDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSelection-&gt;testStartsWithDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTag-&gt;TestOfTag">
<sdesc></sdesc>
<desc></desc>
<type>TestOfTag</type>
</methodsynopsis>
<methodsynopsis function="TestOfTag-&gt;testAnchorHref">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTag-&gt;testStartValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTag-&gt;testTagWithNoEnd">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTag-&gt;testTitleContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;TestOfTagGroup">
<sdesc></sdesc>
<desc></desc>
<type>TestOfTagGroup</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testReadingMultipleCheckboxGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testReadingMultipleCheckedItems">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testReadingMultipleUncheckedItems">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testSettingMultipleValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testSettingNoValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTagGroup-&gt;testSettingSingleValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextArea-&gt;TestOfTextArea">
<sdesc></sdesc>
<desc></desc>
<type>TestOfTextArea</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextArea-&gt;testDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfTextArea-&gt;testWrapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;TestOfWidget">
<sdesc></sdesc>
<desc></desc>
<type>TestOfWidget</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testButton">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testFailToSetHiddenValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testImageSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testImageSubmitTitlePreferredOverAltForLabel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testPopulatedSubmit">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testSettingTextValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testSubmitDefaults">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testTextDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfWidget-&gt;testTextEmptyDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;UnitTestCase">
<sdesc>Creates an empty test case. Should be subclassed     with test methods for a functional test case.</sdesc>
<desc></desc>
<type>UnitTestCase</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertCopy">
<sdesc>Will trigger a pass if both parameters refer     to different objects. Fail otherwise.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertEqual">
<sdesc>Will trigger a pass if the two parameters have     the same value only. Otherwise a fail.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertError">
<sdesc>Confirms that an error has occoured and     optionally that the error text matches exactly.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertErrorPattern">
<sdesc>Confirms that an error has occoured and     that the error text matches a Perl regular     expression.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertIdentical">
<sdesc>Will trigger a pass if the two parameters have     the same value and same type. Otherwise a fail.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertIsA">
<sdesc>Type and class test. Will pass if class     matches the type name or is a subclass or     if not an object, but the type is correct.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>object</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNoErrors">
<sdesc>Confirms that no errors have occoured so     far in the test method.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNotA">
<sdesc>Type and class mismatch test. Will pass if class     name or underling type does not match the one     specified.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>object</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNotEqual">
<sdesc>Will trigger a pass if the two parameters have     a different value. Otherwise a fail.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNotIdentical">
<sdesc>Will trigger a pass if the two parameters have     the different value or different type.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNotNull">
<sdesc>Will be true if the value is set.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNoUnwantedPattern">
<sdesc>Will trigger a pass if the perl regex pattern     is not present in subject. Fail if found.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertNull">
<sdesc>Will be true if the value is null.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>null</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertReference">
<sdesc>Will trigger a pass if both parameters refer     to the same object. Fail otherwise.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>first</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>second</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTestCase-&gt;assertWantedPattern">
<sdesc>Will trigger a pass if the Perl regex pattern     is found in the subject. Fail otherwise.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UnitTests-&gt;UnitTests">
<sdesc></sdesc>
<desc></desc>
<type>UnitTests</type>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;SimpleQueryString">
<sdesc>Starts empty.</sdesc>
<desc></desc>
<type>SimpleQueryString</type>
<methodparam>
<type>array</type>
<parameter>query/SimpleQueryString</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;add">
<sdesc>Adds a parameter to the query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>key</parameter>
</methodparam>
<methodparam>
<type>string/array</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;asString">
<sdesc>Renders the query string as a URL encoded     request part.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;getAll">
<sdesc>Gets all parameters as structured hash. Repeated     values are list values.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;getKeys">
<sdesc>Accessor for key list.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;getValue">
<sdesc>Accessor for single value.</sdesc>
<desc></desc>
<type>string/array</type>
</methodsynopsis>
<methodsynopsis function="SimpleQueryString-&gt;merge">
<sdesc>Adds a set of parameters to this query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>query/SimpleQueryString</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;SimpleUrl">
<sdesc>Constructor. Parses URL into sections.</sdesc>
<desc></desc>
<type>SimpleUrl</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;addRequestParameter">
<sdesc>Adds an additional parameter to the request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>key</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;addRequestParameters">
<sdesc>Adds additional parameters to the request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;asString">
<sdesc>Renders the URL back into a string.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;clearRequest">
<sdesc>Clears down all parameters.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;encodeRequest">
<sdesc>Encodes parameters as HTTP request parameters.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getBasePath">
<sdesc>Gets the path to the page.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getEncodedRequest">
<sdesc>Accessor for current request parameters</sdesc>
<desc>in URL string form</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getFragment">
<sdesc>Accessor for fragment at end of URL after the &quot;#&quot;.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getHost">
<sdesc>Accessor for hostname and port.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>default</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getPage">
<sdesc>Accessor for page if any. This may be a     directory name if ambiguious.</sdesc>
<desc></desc>
<type>Page</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getPassword">
<sdesc>Accessor for password.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getPath">
<sdesc>Accessor for path.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getPort">
<sdesc>Accessor for port number.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getRequest">
<sdesc>Accessor for current request parameters     as an object.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getScheme">
<sdesc>Accessor for protocol part.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>default</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getTarget">
<sdesc>Gets the frame target if present. Although     not strictly part of the URL specification it     acts as similarily to the browser.</sdesc>
<desc></desc>
<type>boolean/string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getTld">
<sdesc>Accessor for top level domain.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getUsername">
<sdesc>Accessor for user name.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getX">
<sdesc>Accessor for horizontal image coordinate.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;getY">
<sdesc>Accessor for vertical image coordinate.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;makeAbsolute">
<sdesc>Replaces unknown sections to turn a relative     URL into an absolute one. The base URL can     be either a string or a SimpleUrl object.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string/SimpleUrl</type>
<parameter>base</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;normalisePath">
<sdesc>Replaces . and .. sections of the path.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;setCoordinates">
<sdesc>Sets image coordinates. Set to flase to clear     them.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUrl-&gt;setTarget">
<sdesc>Attaches a frame target.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>frame</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;QueryStringTestCase">
<sdesc></sdesc>
<desc></desc>
<type>QueryStringTestCase</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testAddingLists">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testEmptyParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testMergeInHash">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testMergeInObject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testMultipleParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testMultiplePrefilled">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testPrefilled">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testPrefilledWithObject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testRepeatedParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testSingleParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="QueryStringTestCase-&gt;testUrlEncoding">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;TestOfAbsoluteUrls">
<sdesc></sdesc>
<desc></desc>
<type>TestOfAbsoluteUrls</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAbsoluteAppendedPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAbsoluteBadlyFormedAppendedPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAbsoluteHasNoEffectWhenAlreadyAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAnEmptyUrlAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingARootUrlAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingAShortQueryUrlAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingCoordinateUrlAbsolute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAbsoluteUrls-&gt;testMakingHostOnlyAbsoluteDoesNotCarryAnyOtherInformation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameUrl-&gt;TestOfFrameUrl">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFrameUrl</type>
</methodsynopsis>
<methodsynopsis function="TestOfFrameUrl-&gt;testTargetAttachment">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;TestOfUrl">
<sdesc></sdesc>
<desc></desc>
<type>TestOfUrl</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;assertPreserved">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;assertUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testAbsolutePathPageSplitting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testAddParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testAmbiguousHosts">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testAsString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testBasicParsing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testBlitz">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testClearingCordinates">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testClearingParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testDecodingParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testDefaultUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testEncodingParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testPageSplitting">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParseBareParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParseCordinates">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParseEmptyParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParseMultipleParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParseParameterPair">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParsingParameterCordinateMixture">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParsingParameterMixture">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testParsingParameterWithBadCordinates">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testPathNormalisation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testRelativeUrls">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testRequestEncoding">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testSettingCordinates">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUrl-&gt;testUsernameAndPasswordAreUrlDecoded">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookieJar-&gt;SimpleCookieJar">
<sdesc>Constructor. Jar starts empty.</sdesc>
<desc></desc>
<type>SimpleCookieJar</type>
</methodsynopsis>
<methodsynopsis function="SimpleCookieJar-&gt;agePrematurely">
<sdesc>Ages all cookies in the cookie jar.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>interval</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookieJar-&gt;getValidCookies">
<sdesc>Fetches a hash of all valid cookies filtered</sdesc>
<desc>by host, path and keyed by name     Any cookies with missing categories will not     be filtered out by that category. Expired     cookies must be cleared by restarting the session.</desc>
<type>hash</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookieJar-&gt;restartSession">
<sdesc>Removes expired and temporary cookies as if     the browser was closed and re-opened.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string/integer</type>
<parameter>now</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleCookieJar-&gt;setCookie">
<sdesc>Adds a cookie to the jar. This will overwrite     cookies with matching host, paths and keys.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>cookie</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;SimpleUserAgent">
<sdesc>Starts with no cookies, realms or proxies.</sdesc>
<desc></desc>
<type>SimpleUserAgent</type>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;addHeader">
<sdesc>Adds a header to every fetch.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;ageCookies">
<sdesc>Ages the cookies by the specified time.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>interval</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;fetchResponse">
<sdesc>Fetches a URL as a response object. Will keep trying if redirected.</sdesc>
<desc>It will also collect authentication realm information.</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type>string/SimpleUrl</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;getBaseCookieValue">
<sdesc>Reads the current cookies within the base URL.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>base</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;getCookieValue">
<sdesc>Reads the most specific cookie value from the     browser cookies.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;restartSession">
<sdesc>Removes expired and temporary cookies as if     the browser was closed and re-opened.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string/integer</type>
<parameter>date</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;setConnectionTimeout">
<sdesc>Sets the socket timeout for opening a connection.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;setCookie">
<sdesc>Sets an additional cookie. If a cookie has     the same name and path it is replaced.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>expiry</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;setIdentity">
<sdesc>Sets the identity for the current realm.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>realm</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;setMaximumRedirects">
<sdesc>Sets the maximum number of redirects before     a page will be loaded anyway.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>max</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;useProxy">
<sdesc>Sets proxy to use on all requests for when     testing from behind a firewall. Set URL     to false to disable.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>proxy</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;_createHttpRequest">
<sdesc>Builds the appropriate HTTP request object.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;_createRoute">
<sdesc>Sets up either a direct route or via a proxy.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleUserAgent-&gt;_fetch">
<sdesc>Actually make the web request.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>method</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfAdditionalHeaders-&gt;TestOfAdditionalHeaders">
<sdesc></sdesc>
<desc></desc>
<type>TestOfAdditionalHeaders</type>
</methodsynopsis>
<methodsynopsis function="TestOfAdditionalHeaders-&gt;testAdditionalHeaderAddedToRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthorisation-&gt;TestOfAuthorisation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfAuthorisation</type>
</methodsynopsis>
<methodsynopsis function="TestOfAuthorisation-&gt;testAuthenticateHeaderAdded">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBadHosts-&gt;TestOfBadHosts">
<sdesc></sdesc>
<desc></desc>
<type>TestOfBadHosts</type>
</methodsynopsis>
<methodsynopsis function="TestOfBadHosts-&gt;testUntestedHost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBadHosts-&gt;_createSimulatedBadHost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;TestOfBrowserCookies">
<sdesc></sdesc>
<desc></desc>
<type>TestOfBrowserCookies</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;testAgeingAndClearing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;testClearCookieBySettingExpiry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;testOverwriteCookieThatAlreadyExists">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;testReadingIncomingAndSetCookies">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;testSendingExistingCookie">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;_createCookieSite">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;_createPartialFetcher">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfBrowserCookies-&gt;_createStandardResponse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFetchingUrlParameters-&gt;TestOfFetchingUrlParameters">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFetchingUrlParameters</type>
</methodsynopsis>
<methodsynopsis function="TestOfFetchingUrlParameters-&gt;testGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFetchingUrlParameters-&gt;testHead">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFetchingUrlParameters-&gt;testPost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;TestOfHttpRedirects">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHttpRedirects</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;createRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;testDisabledRedirects">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;testDoubleRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;testRedirectChangesPostToGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;testSingleRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHttpRedirects-&gt;testSuccessAfterRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;TestOfSimpleCookieJar">
<sdesc></sdesc>
<desc></desc>
<type>TestOfSimpleCookieJar</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testAddCookie">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testClearSessionCookies">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testCookieClearByDate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testCookieClearing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testExpiryFilterByAgeing">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testExpiryFilterByDate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testHostFilter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testMultipleCookieWithDifferentPaths">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testOverwrite">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testPathFilter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfSimpleCookieJar-&gt;testPathFilterDeeply">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AllOutputReporter-&gt;AllOutputReporter">
<sdesc></sdesc>
<desc></desc>
<type>AllOutputReporter</type>
</methodsynopsis>
<methodsynopsis function="AllOutputReporter-&gt;paintPass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AllOutputReporter-&gt;paintSignal">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AllOutputReporter-&gt;_getCss">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestDisplayClass-&gt;TestDisplayClass">
<sdesc></sdesc>
<desc></desc>
<type>TestDisplayClass</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;TestOfMockObjectsOutput">
<sdesc></sdesc>
<desc></desc>
<type>TestOfMockObjectsOutput</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testArrayMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testBigList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testBooleanMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testCallCounts">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testEmptyMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testEmptyMatchingWithCustomExpectationMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testEmptyMatchingWithCustomMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testFloatMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testIntegerMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testMinimumCallCounts">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testNullMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testObjectMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfMockObjectsOutput-&gt;testStringMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPastBugs-&gt;TestOfPastBugs">
<sdesc></sdesc>
<desc></desc>
<type>TestOfPastBugs</type>
</methodsynopsis>
<methodsynopsis function="TestOfPastBugs-&gt;testMixedTypes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfPastBugs-&gt;testMockWildcards">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;TestOfUnitTestCaseOutput">
<sdesc></sdesc>
<desc></desc>
<type>TestOfUnitTestCaseOutput</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testDumping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testErrorDisplay">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testErrorPatterns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testErrorText">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testErrorTrap">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testExpectation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testFalse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testHashEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testHashIdentity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testIntegerEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testLongStrings">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testNullEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testNullIdentity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testObjectEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testObjectIndentity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testOfResults">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testPatterns">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testReference">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testSignal">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testStringEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testStringIdentity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testTrue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testTypeEquality">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfUnitTestCaseOutput-&gt;testTypeIdentity">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfVisualShell-&gt;TestOfVisualShell">
<sdesc></sdesc>
<desc></desc>
<type>TestOfVisualShell</type>
</methodsynopsis>
<methodsynopsis function="TestOfVisualShell-&gt;testDump">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfVisualShell-&gt;testDumpOfList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FieldExpectation-&gt;FieldExpectation">
<sdesc>Sets the field value to compare against.</sdesc>
<desc></desc>
<type>FieldExpectation</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FieldExpectation-&gt;test">
<sdesc>Tests the expectation. True if it matches     a string value or an array value in any order.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FieldExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;HttpHeaderExpectation">
<sdesc>Sets the field and value to compare against.</sdesc>
<desc></desc>
<type>HttpHeaderExpectation</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;test">
<sdesc>Tests the expectation. True if it matches     a string value or an array value in any order.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;_findHeader">
<sdesc>Searches the incoming result. Will extract the matching     line as text.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;_getExpectation">
<sdesc>Accessor for subclases.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="HttpHeaderExpectation-&gt;_testHeaderValue">
<sdesc>Tests the value part of the header.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>expected</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderPatternExpectation-&gt;HttpHeaderPatternExpectation">
<sdesc>Sets the field and value to compare against.</sdesc>
<desc></desc>
<type>HttpHeaderPatternExpectation</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpHeaderPatternExpectation-&gt;_testHeaderValue">
<sdesc>Tests the value part of the header.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpUnwantedHeaderExpectation-&gt;HttpUnwantedHeaderExpectation">
<sdesc>Sets the field and value to compare against.</sdesc>
<desc></desc>
<type>HttpUnwantedHeaderExpectation</type>
<methodparam>
<type>string</type>
<parameter>unwanted</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpUnwantedHeaderExpectation-&gt;test">
<sdesc>Tests that the unwanted header is not found.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpUnwantedHeaderExpectation-&gt;testMessage">
<sdesc>Returns a human readable test message.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>compare</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;WebTestCase">
<sdesc>Creates an empty test case. Should be subclassed     with test methods for a functional test case.</sdesc>
<desc></desc>
<type>WebTestCase</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;addHeader">
<sdesc>Adds a header to every fetch.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;ageCookies">
<sdesc>Moves cookie expiry times back into the past.</sdesc>
<desc>Useful for testing timeouts and expiries.</desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>interval</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertAuthentication">
<sdesc>Attempt to match the authentication type within     the security realm we are currently matching.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>authentication</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertCookie">
<sdesc>Checks that a cookie is set for the current page     and optionally checks the value.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertField">
<sdesc>Confirms that the form element is currently set     to the expected value. A missing form will always     fail. If no value is given then only the existence     of the field is checked.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertFieldById">
<sdesc>Confirms that the form element is currently set     to the expected value. A missing form will always     fail. If no ID is given then only the existence     of the field is checked.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>expected</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertHeader">
<sdesc>Checks each header line for the required value. If no     value is given then only an existence check is made.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertHeaderPattern">
<sdesc>Checks each header line for the required pattern.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertLink">
<sdesc>Tests for the presence of a link label. Match is     case insensitive with normalised space.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertLinkById">
<sdesc>Tests for the presence of a link id attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertMime">
<sdesc>Checks the mime type against a list     of possible values.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>array</type>
<parameter>types</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertNoAuthentication">
<sdesc>Checks that no authentication is necessary to view     the desired page.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertNoCookie">
<sdesc>Checks that no cookie is present or that it has     been successfully cleared.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertNoLink">
<sdesc>Tests for the non-presence of a link label. Match is     case insensitive with normalised space.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertNoUnwantedHeader">
<sdesc>Confirms that the header type has not been received.</sdesc>
<desc>Only the landing page is checked. If you want to check     redirect pages, then you should limit redirects so     as to capture the page you want.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>header</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertNoUnwantedPattern">
<sdesc>Will trigger a pass if the perl regex pattern     is not present in raw content.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertRealm">
<sdesc>Attempts to match the current security realm.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>realm</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertResponse">
<sdesc>Checks the response code against a list     of possible values.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>array</type>
<parameter>responses</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertTitle">
<sdesc>Tests the text between the title tags.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>title</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;assertWantedPattern">
<sdesc>Will trigger a pass if the Perl regex pattern     is found in the raw content.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;authenticate">
<sdesc>Retries a request after setting the authentication     for the current realm.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;back">
<sdesc>Equivalent to hitting the back button on the     browser.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;before">
<sdesc>Sets up a browser for the start of each     test method.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clearFrameFocus">
<sdesc>Clears the frame focus. All frames will be searched     for content.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickImage">
<sdesc>Clicks the submit image by some kind of label. Usually</sdesc>
<desc>the alt tag or the nearest equivalent. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickImageById">
<sdesc>Clicks the submit image by ID attribute. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer/string</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickImageByName">
<sdesc>Clicks the submit image by the name. Usually</sdesc>
<desc>the alt tag or the nearest equivalent. The owning     form will be submitted by this. Clicking outside of     the boundary of the coordinates will result in     a failure.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>x</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>y</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickLink">
<sdesc>Follows a link by name. Will click the first link     found with this link text by default, or a later     one if an index is given. Match is case insensitive     with normalised space.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>index</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickLinkById">
<sdesc>Follows a link by id attribute.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickSubmit">
<sdesc>Clicks the submit button by label. The owning     form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickSubmitById">
<sdesc>Clicks the submit button by ID attribute. The owning     form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;clickSubmitByName">
<sdesc>Clicks the submit button by name attribute. The owning     form will be submitted by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;createBrowser">
<sdesc>Creates a new default web browser object.</sdesc>
<desc>Will be cleared at the end of the test method.</desc>
<type>TestBrowser</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;forward">
<sdesc>Equivalent to hitting the forward button on the     browser.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;get">
<sdesc>Fetches a page into the page buffer. If     there is no base for the URL then the     current base URL is used. After the fetch     the base URL reflects the new location.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;getBrowser">
<sdesc>Gets a current browser reference for setting     special expectations or for detailed     examination of page fetches.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>browser</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;getFrameFocus">
<sdesc>Accessor for current frame focus. Will be     false if no frame has focus.</sdesc>
<desc></desc>
<type>integer/string/boolean</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;getTransportError">
<sdesc>Gets the last response error.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;getUrl">
<sdesc>Accessor for the currently selected URL.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;head">
<sdesc>Does a HTTP HEAD fetch, fetching only the page     headers. The current base URL is unchanged by this.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;ignoreFrames">
<sdesc>Disables frames support. Frames will not be fetched     and the frameset page will be used instead.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;post">
<sdesc>Fetches a page by POST into the page buffer.</sdesc>
<desc>If there is no base for the URL then the     current base URL is used. After the fetch     the base URL reflects the new location.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;restartSession">
<sdesc>Simulates the closing and reopening of the browser.</sdesc>
<desc>Temporary cookies will be discarded and timed     cookies will be expired if later than the     specified time.</desc>
<type>void</type>
<methodparam>
<type>string/integer</type>
<parameter>date</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;retry">
<sdesc>Equivalent to hitting the retry button on the     browser. Will attempt to repeat the page fetch.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setConnectionTimeout">
<sdesc>Sets the socket timeout for opening a connection and     receiving at least one byte of information.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>timeout</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setCookie">
<sdesc>Sets a cookie in the current browser.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>host</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>expiry</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setField">
<sdesc>Sets all form fields with that name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setFieldById">
<sdesc>Sets all form fields with that name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string/integer</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setFrameFocus">
<sdesc>Sets the focus by name.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setFrameFocusByIndex">
<sdesc>Sets the focus by index. The integer index starts from 1.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>integer</type>
<parameter>choice</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;setMaximumRedirects">
<sdesc>Sets the maximum number of redirects before     the web page is loaded regardless.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>max</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;showHeaders">
<sdesc>Dumps the current HTTP headers for debugging.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;showRequest">
<sdesc>Dumps the current request for debugging.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;showSource">
<sdesc>Dumps the current HTML source for debugging.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;submitFormById">
<sdesc>Submits a form by the ID.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WebTestCase-&gt;useProxy">
<sdesc>Sets proxy to use on all requests for when     testing from behind a firewall. Set URL     to false to disable.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>proxy</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>username</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>password</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;TestOfFieldExpectation">
<sdesc></sdesc>
<desc></desc>
<type>TestOfFieldExpectation</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testMatchesInteger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testMultipleValuesCanBeInAnyOrder">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testNonStringFailsExpectation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testSingleItemCanBeArrayOrString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testStringMatchingIsCaseSensitive">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfFieldExpectation-&gt;testUnsetFieldCanBeTestedFor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;TestOfHeaderExpectations">
<sdesc></sdesc>
<desc></desc>
<type>TestOfHeaderExpectations</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testCaseInsensitivePatternMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testExpectingOnlyTheHeaderName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testHeaderValueAsWell">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testMultilineSearch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testMultilineSearchWithPadding">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testMultilineUnwantedSearch">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testPatternMatching">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfHeaderExpectations-&gt;testUnwantedHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestingCaseTag-&gt;NestingCaseTag">
<sdesc>Sets the basic test information except     the name.</sdesc>
<desc></desc>
<type>NestingCaseTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingCaseTag-&gt;paintEnd">
<sdesc>Signals the appropriate end event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingCaseTag-&gt;paintStart">
<sdesc>Signals the appropriate start event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingGroupTag-&gt;NestingGroupTag">
<sdesc>Sets the basic test information except     the name.</sdesc>
<desc></desc>
<type>NestingGroupTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingGroupTag-&gt;getSize">
<sdesc>The size in the attributes.</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="NestingGroupTag-&gt;paintEnd">
<sdesc>Signals the appropriate end event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingGroupTag-&gt;paintStart">
<sdesc>Signals the appropriate start event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingMethodTag-&gt;NestingMethodTag">
<sdesc>Sets the basic test information except     the name.</sdesc>
<desc></desc>
<type>NestingMethodTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingMethodTag-&gt;paintEnd">
<sdesc>Signals the appropriate end event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingMethodTag-&gt;paintStart">
<sdesc>Signals the appropriate start event on the     listener.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingXmlTag-&gt;NestingXmlTag">
<sdesc>Sets the basic test information except     the name.</sdesc>
<desc></desc>
<type>NestingXmlTag</type>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingXmlTag-&gt;getName">
<sdesc>Accessor for name.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="NestingXmlTag-&gt;setName">
<sdesc>Sets the test case/method name.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NestingXmlTag-&gt;_getAttributes">
<sdesc>Accessor for attributes.</sdesc>
<desc></desc>
<type>hash</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;SimpleTestXmlParser">
<sdesc>Loads a listener with the SimpleReporter     interface.</sdesc>
<desc></desc>
<type>SimpleTestXmlParser</type>
<methodparam>
<type></type>
<parameter>listener</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;parse">
<sdesc>Parses a block of XML sending the results to     the listener.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>chunk</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_addContent">
<sdesc>Content between start and end elements.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>resource</type>
<parameter>expat</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_createParser">
<sdesc>Sets up expat as the XML parser.</sdesc>
<desc></desc>
<type>resource</type>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_default">
<sdesc>XML and Doctype handler. Discards all such content.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>resource</type>
<parameter>expat</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>default</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_endElement">
<sdesc>End of element event.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>resource</type>
<parameter>expat</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_isLeaf">
<sdesc>Test if tag is a leaf node with only text content.</sdesc>
<desc></desc>
<type>@boolean</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SimpleTestXmlParser-&gt;_startElement">
<sdesc>Handler for start of event element.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>resource</type>
<parameter>expat</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>hash</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;XmlReporter">
<sdesc>Does nothing yet.</sdesc>
<desc></desc>
<type>XmlReporter</type>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintCaseEnd">
<sdesc>Paints the end of a test case.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintCaseStart">
<sdesc>Paints the start of a test case.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintException">
<sdesc>Paints a PHP error or exception.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintFail">
<sdesc>Increments the fail count.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintFooter">
<sdesc>Paints the test document footer.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintFormattedMessage">
<sdesc>Paints a formatted ASCII message such as a     variable dump.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintGroupEnd">
<sdesc>Paints the end of a group test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintGroupStart">
<sdesc>Paints the start of a group test.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>size</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintHeader">
<sdesc>Paints the test document header.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintMessage">
<sdesc>Paints a simple supplementary message.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintMethodEnd">
<sdesc>Paints the end of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>progress</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintMethodStart">
<sdesc>Paints the start of a test method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>test_name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintPass">
<sdesc>Increments the pass count.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;paintSignal">
<sdesc>Serialises the event object.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>payload</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;toParsedXml">
<sdesc>Converts character string to parsed XML     entities string.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="XmlReporter-&gt;_getIndent">
<sdesc>Calculates the pretty printing indent level     from the current level of nesting.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>integer</type>
<parameter>offset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TestOfNestingTags-&gt;TestOfNestingTags">
<sdesc></sdesc>
<desc></desc>
<type>TestOfNestingTags</type>
</methodsynopsis>
<methodsynopsis function="TestOfNestingTags-&gt;testGroupSize">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;TestOfXmlResultsParsing">
<sdesc></sdesc>
<desc></desc>
<type>TestOfXmlResultsParsing</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;sendValidEnd">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;sendValidStart">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testException">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testFail">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testFormattedMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testPass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlResultsParsing-&gt;testSignal">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;TestOfXmlStructureParsing">
<sdesc></sdesc>
<desc></desc>
<type>TestOfXmlStructureParsing</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;testEmptyCase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;testEmptyGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;testEmptyMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;testNestedGroup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestOfXmlStructureParsing-&gt;testValidXml">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<entry/>
</manual>  	
