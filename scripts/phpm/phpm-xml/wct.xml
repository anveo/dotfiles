<?xml version="1.0" encoding="iso-8859-1"?>
<manual>
	<methodsynopsis function="AdodbConnection-&gt;connect">
<sdesc>Connect to the the database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;FindRecord">
<sdesc>Retreive a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;getConnectionId">
<sdesc>Return connectionId for a ADOdb database.  Allow a lazy connection.</sdesc>
<desc></desc>
<type>object ADOConnection</type>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;getOneColumnArray">
<sdesc>Retreive an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;getTwoColumnArray">
<sdesc>Retreive an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a Adodb database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a Adodb database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbConnection-&gt;_execute">
<sdesc>For internal driver use only</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;AdodbRecord">
<sdesc>Construct a record</sdesc>
<desc></desc>
<type>AdodbRecord</type>
<methodparam>
<type></type>
<parameter>&amp;Connection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;buildAssignmentList">
<sdesc>Build a list of values to assign to columns</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecord-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;AdodbRecordSet">
<sdesc>Construct a record set.</sdesc>
<desc></desc>
<type>AdodbRecordSet</type>
<methodparam>
<type></type>
<parameter>Connection</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;next">
<sdesc>Iterator next method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>interface</type>
<parameter>&amp;pager</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;query">
<sdesc>Stores the SQL statement and makes sure the result object is</sdesc>
<desc>empty</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AdodbRecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorTag-&gt;HtmlAnchorTag">
<sdesc>Constructs HtmlAnchorTag</sdesc>
<desc></desc>
<type>HtmlAnchorTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;ArrayDataSet">
<sdesc></sdesc>
<desc></desc>
<type>ArrayDataSet</type>
<methodparam>
<type>array</type>
<parameter>array</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;export">
<sdesc>Export the current row/dataspace as a dictionary/hash/map</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;exportDataSetAsArray">
<sdesc>Export the Recordset as an array of row arrays</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;get">
<sdesc>Return an item from the current row by key/name</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;getDataSet">
<sdesc>Alias for exportDataSetAsArray</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;getPropertyList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;hasProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;import">
<sdesc>Import a dictionary/hash/map that will replace the current row</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>array</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;importDataSetAsArray">
<sdesc>Sets up a Recordset from an array of row arrays</sdesc>
<desc>Replaces the current Recordset and resets the internal cursor</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>dataset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;isEmpty">
<sdesc>Check whether the current row is empty</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;merge">
<sdesc>Append a dictionary/hash/map of key value pairs to the current row</sdesc>
<desc>Existing keys are overwritten</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>array</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;next">
<sdesc>Moves the internal cursor to the next row of the Recordset</sdesc>
<desc>Sets the row accessed by the DataSpace interface to the next row of the  Recordset. Returns TRUE if there is another row in the recordset, FALSE  otherwise. Calls prepare().</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;prepare">
<sdesc>Filter the current row as apt. Works on a copy of the row.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;registerFilter">
<sdesc>Register a filter object on the current row.</sdesc>
<desc>Filters can be used to transform rows. The filter object must provide a  doFilter(&amp;$array) method that filters values from the current row. The  filter is passed a copy of the current row.</desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;remove">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;removeAll">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;reset">
<sdesc>Reset the internal cursor to the beginning of the Recordset</sdesc>
<desc>next() must be called after reset() to access a valid row via the  DataSpace methods.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayDataSet-&gt;set">
<sdesc>Set the value of an item in the current row</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;AttributeProperty">
<sdesc></sdesc>
<desc></desc>
<type>AttributeProperty</type>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="AttributeProperty-&gt;isConstant">
<sdesc>Does this property refer to a constant value at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;AttributeExpression">
<sdesc></sdesc>
<desc></desc>
<type>AttributeExpression</type>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;createExpression">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;generate">
<sdesc>Generate the code to output this attribute as part of a tag.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;generateFragment">
<sdesc>Generate the attribute value portion of this attribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;getValue">
<sdesc>Return the value of this attribute, usually for further prossing.</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;isConstant">
<sdesc>Can a PHP value for this reference be calculated at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="AttributeExpression-&gt;prepare">
<sdesc>Prepare this attribute to be used</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;AttributeNode">
<sdesc></sdesc>
<desc></desc>
<type>AttributeNode</type>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;generate">
<sdesc>Generate the code</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;generateFragment">
<sdesc>Generate the attribute value portion of this attribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;getValue">
<sdesc>Return the value of this attribute</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;isConstant">
<sdesc>Can a PHP value for this reference be calculated at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="AttributeNode-&gt;prepare">
<sdesc>Prepare this attribute to be used</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;CompoundAttribute">
<sdesc></sdesc>
<desc></desc>
<type>CompoundAttribute</type>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;addAttributeFragment">
<sdesc>Add a fragment of an attribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Attribute</type>
<parameter>&amp;fragment</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;generate">
<sdesc>Generate the code</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;getValue">
<sdesc>Return the value of this attribute</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;isConstant">
<sdesc>Can a PHP value for this reference be calculated at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="CompoundAttribute-&gt;prepare">
<sdesc>Prepare this attribute to be used</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CssWriter-&gt;add">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CssWriter-&gt;render">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlBaseTag-&gt;HtmlBaseTag">
<sdesc>Constructs HtmlBaseTag</sdesc>
<desc></desc>
<type>HtmlBaseTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlBaseTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBaseTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBaseTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBaseTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BaseSaxFilter-&gt;setChildSaxFilter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;SaxFilter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BaseSaxFilter-&gt;setDocumentLocator">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Locator</type>
<parameter>&amp;locator</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBBCodeComponent-&gt;display">
<sdesc>Returns the parsed text</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HtmlBBCodeComponent-&gt;setText">
<sdesc>Set the text to parse for BBCodes</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBBCodeTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlBBCodeTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BlockComponent-&gt;hide">
<sdesc>Changes the block state to invisible</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BlockComponent-&gt;IsVisible">
<sdesc>Called within the compiled template render function to determine  whether block should be displayed.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="BlockComponent-&gt;show">
<sdesc>Changes the block state to visible</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreBlockTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreBlockTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreBlockTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerCachedPageController-&gt;IsCached">
<sdesc>Determine whether page is cached</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ServerCachedPageController-&gt;IsExpired">
<sdesc>Determine whether cache page has expired</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>int</type>
<parameter>Age</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerCachedPageController-&gt;run">
<sdesc>Run the controller, displaying the page</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;CalendarMonthComponent">
<sdesc></sdesc>
<desc></desc>
<type>CalendarMonthComponent</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;dayHeaders">
<sdesc>Returns the headers for the days of the week</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;dayLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;getBaseUri">
<sdesc>Return the URI to a specific page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;getCalendar">
<sdesc>Returns the PEAR::Calendar_Month_Weekdays object wrapped in a</sdesc>
<desc>Calendar_Decorator_Wrapper instance</desc>
<type>Calendar_Decorator_Wrapper</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;monthName">
<sdesc>Returns the month name formated</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;nextLink">
<sdesc>Returns the URI string for the next month</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;prevLink">
<sdesc>Returns the URI string for the previous month</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;setSelection">
<sdesc>Sets a selection of PEAR::Calendar_Day objects</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>&amp;selection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarMonthComponent-&gt;yearFormatted">
<sdesc>Returns the year</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CapitalizeFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CapitalizeFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="ClipFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ClipFilter-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ClipFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;CodeWriter">
<sdesc>Constructs CodeWriter, initializing the internal code string</sdesc>
<desc></desc>
<type>CodeWriter</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;beginFunction">
<sdesc>Begins writing a PHP function to the compiled template, using the  FunctionPrefix and the FunctionSuffix, the latter being post incremented  by one.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>ParamList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;endFunction">
<sdesc>Finish writing a PHP function to the compiled template</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;escapeLiteral">
<sdesc>Escape a string in preperation for writing a PHP Literal String.</sdesc>
<desc>Make sure that escape characters are proper  for source code escaping of string literal.</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;getCode">
<sdesc>Returns the finished compiled template, adding the include directives</sdesc>
<desc>at the start of the template</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;getTempVariable">
<sdesc>Utility method, which generates a unique variable name  for custom use within TagComponents.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;getTempVarRef">
<sdesc>Utility method, which generates a unique variable name, prefixed with a $  for custom use within TagComponents.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;registerInclude">
<sdesc>Adds an include file (e.g a runtime component class file) to the  internal list. Checks that file has not already been included.</sdesc>
<desc>Note that the path to the file to be included will need to  be in PHP's runtime include path.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>includefile</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;setFunctionPrefix">
<sdesc>Sets the function prefix</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;writeHTML">
<sdesc>Writes some HTML to the compiled template</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;writePHP">
<sdesc>Writes some PHP to the compiled template</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CodeWriter-&gt;writePHPLiteral">
<sdesc>Write PHP Literal String.  Make sure that escape characters are proper  for source code escaping of string literal.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>escape</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreCommentTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCommentTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreCommentTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="CoreCommentTag-&gt;removeChildren">
<sdesc>helper method</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;addChild">
<sdesc>Adds a child component, by reference, to the array of children</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object instance</type>
<parameter>&amp;child</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;addChildAttribute">
<sdesc>Sets the XML attributes for this component (as extracted from the</sdesc>
<desc>template)</desc>
<type>void</type>
<methodparam>
<type>object XML</type>
<parameter>&amp;child</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;CheckNestingLevel">
<sdesc>Used to perform some error checking on the source template, such as</sdesc>
<desc>examining the tag hierarchy and triggering an error if a tag is  incorrectly nested. Concrete implementation is in subclasses</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findChild">
<sdesc>Returns a child component, given it's ServerID</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>ServerId</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findChildByClass">
<sdesc>Returns a child component, given it's compile time component class</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findChildrenByClass">
<sdesc>Returns an array of child components, given it's compile time component class</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findImmediateChildByClass">
<sdesc>Returns a child component, given it's compile time component class</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findParentByClass">
<sdesc>Returns a parent component, recursively searching parents by their</sdesc>
<desc>compile time component class name</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;findSelfOrParentByClass">
<sdesc>Extends findParentByClass to begin search at the current component  then moving on to its parent, if there's no match. This is called  from TagJudge to determine known children.</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;generate">
<sdesc>Calls the local preGenerate(), generateContents() and postGenerate()  methods.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;generateAttributeList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;generateConstructor">
<sdesc>Calls the generateConstructor() method of each child component</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;generateContents">
<sdesc>Calls the generate() method of each child component</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;generateDynamicAttributeList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getAttribute">
<sdesc>Returns the value of an XML attribute (as extracted from template) or</sdesc>
<desc>NULL if attribute not found</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getAttributesAsArray">
<sdesc>Returns an array containing the attributes of this component that  can be resolved at compile time.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getBoolAttribute">
<sdesc>Return the value of a boolean attribute as a boolean.</sdesc>
<desc>ATTRIBUTE=ANYTHING  (true)  ATTRIBUTE=(FALSE|N|NA|NO|NONE|0) (false)  ATTRIBUTE (true)  (attribute unspecified) (default)</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>default</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getClientId">
<sdesc>Get the value of the XML id attribute</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getComponentRefCode">
<sdesc>Gets the component reference code of the parent. This is a PHP string</sdesc>
<desc>which is used in the compiled template to reference the component in  the hierarchy at runtime</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getDataSource">
<sdesc>If a parent compile time component exists, returns the value of the</sdesc>
<desc>parent's getDataSource() method, which will be a concrete implementation</desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getDataSourceRefCode">
<sdesc>Gets the DataSource reference code of the parent</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getLastChild">
<sdesc>Returns the last child added to a component</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getParentDataSource">
<sdesc>Gets the parent in the DataSource, if one exists</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getRootDataSource">
<sdesc>Gets a root DataSource</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;getServerId">
<sdesc>Returns the identifying server ID. It's value it determined in the</sdesc>
<desc>following order;  The XML id attribute in the template if it existsThe value of $this-&gt;ServerIdAn ID generated by the getNewServerId() function</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;hasAttribute">
<sdesc>Check to see whether a named attribute exists</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;postGenerate">
<sdesc>Post generation method, calls the WrappingComponents</sdesc>
<desc>generateWrapperPostfix() method if the component exists</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;preGenerate">
<sdesc>Pre generation method, calls the WrappingComponents</sdesc>
<desc>generateWrapperPrefix() method if the component exists</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;prepare">
<sdesc>Calls the prepare method for each child component, which will override  this method it it's concrete implementation. In the subclasses, prepare  will set up compile time variables. For example the CoreWrapTag uses  the prepare method to assign itself as the wrapping component.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;preParse">
<sdesc>Provides instruction to the template parser, while parsing is in</sdesc>
<desc>progress, telling it how it should handle the tag. Subclasses of  CompilerComponent will return different instructions.  Available instructions are;  PARSER_REQUIRE_PARSING - default in this class. Tag must be parsedPARSER_FORBID_PARSING - Tag may not be parsedPARSER_ALLOW_PARSING - Tag may can be parsed  In practice, the parser currently only pays attention to the  PARSER_FORBID_PARSING instruction.  Also used to perform error checking on template related to the syntax of  the concrete tag implementing this method.</desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;registerProperty">
<sdesc>register a property with this component.  Currently, this  component must be a database to support properties.  This may  change.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;registerWrapper">
<sdesc>Set a wrapping component for this component</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>&amp;wrapper</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;removeAttribute">
<sdesc>Remove an attribute from the list</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;removeChild">
<sdesc>Removes a child component, given it's ServerID</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>ServerId</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerComponent-&gt;setAttribute">
<sdesc>Sets an attribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentTree-&gt;getComponentRefCode">
<sdesc>Returns the base for building the PHP runtime component reference string</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentTree-&gt;getDataSource">
<sdesc>Returns this instance of ComponentTree</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ComponentTree-&gt;getDataSourceRefCode">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentTree-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="ComponentTree-&gt;preGenerate">
<sdesc>Calls the parent preGenerate() method then writes  the prepare method to the compiled template.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompositeView-&gt;CompositeView">
<sdesc></sdesc>
<desc></desc>
<type>CompositeView</type>
<methodparam>
<type>string</type>
<parameter>TemplateFile</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompositeView-&gt;prepare">
<sdesc>Template method provided as a place for subclasses to place  template manipulation logic.  It is not necessary to  call the parent prepare method when this method is overridden.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompositeView-&gt;registerSubView">
<sdesc>Register a subview which can take over responsibility for a  branch of the runtime component tree.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>BranchName</parameter>
</methodparam>
<methodparam>
<type>object a</type>
<parameter>&amp;SubView</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompositeView-&gt;setModel">
<sdesc>Transfer values from the dataspace into the form</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object implementing</type>
<parameter>&amp;Model</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;FindRecord">
<sdesc>Retreive a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;getOneColumnArray">
<sdesc>Retreive an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;getTwoColumnArray">
<sdesc>Retreive an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ConstantProperty-&gt;ConstantProperty">
<sdesc></sdesc>
<desc></desc>
<type>ConstantProperty</type>
</methodsynopsis>
<methodsynopsis function="ConstantProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ConstantProperty-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="ConstantProperty-&gt;isConstant">
<sdesc>Does this property refer to a constant value at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="ConstantProperty-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControlTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControlTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ControlTag-&gt;getServerId">
<sdesc>Returns the identifying server ID. It's value it determined in the</sdesc>
<desc>following order;  The XML id attribute in the template if it existsThe XML name attribute in the template if it existsThe value of $this-&gt;ServerIdAn ID generated by the getNewServerId() function</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ControlTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;Controller">
<sdesc>Constructor</sdesc>
<desc></desc>
<type>Controller</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;addChild">
<sdesc>Add a child controller</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;addView">
<sdesc>Add a single mapping</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>token</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>view</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;attachToParent">
<sdesc>Part of the protocol whereby a controller is added to the tree of controllers</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;dispatchChild">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;dispatchEvents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;forward">
<sdesc>Dispatch execution to the controller identified by the virtualPath</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>virtualPath</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;getChild">
<sdesc>Return an instance of the named child controller.</sdesc>
<desc>If the specified name does not exist, the default controller is returned</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;getRealPath">
<sdesc>Given a virtual path through the controller heirarchy, return  an URL to address that controller.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>virtualPath</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;handleRequest">
<sdesc>Receive the HTTP Request event and process it.</sdesc>
<desc>This involves delegating the handling of the request to the  child controllers.  The raw request may be passed down to the child controllers,  or this method may trigger more fine grained events which  handle the request.  The child controllers cooporate in handling the event by  building a ResponseModel.  The ResponseModel is then  rendered by a view to produce an HTTP response for the  incoming HTTP request.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;hasChild">
<sdesc>Does this controller have an immediate child of the specified name?</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;registerOnActivateListener">
<sdesc>register a listener to receive activation events</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;registerOnDeActivateListener">
<sdesc>register a listener to receive activation events</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;setDefaultChild">
<sdesc>Specify the default child controller by name</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;setDefaultView">
<sdesc>Register a View object handle with the  Controller</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>mixed</type>
<parameter>view</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;start">
<sdesc>Begin the process of handling the current PHP request</sdesc>
<desc>This method may only be called on the root controller of a tree  of controllers.  (Page controller or Front controller)</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Controller-&gt;triggerEvent">
<sdesc>Broadcast an event to listeners</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageController-&gt;PageController">
<sdesc></sdesc>
<desc></desc>
<type>PageController</type>
</methodsynopsis>
<methodsynopsis function="PageController-&gt;dispatchEvents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageController-&gt;registerOnLoadListener">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageController-&gt;_appendDispatchInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageController-&gt;_getDispatchName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCssComponent-&gt;readCSS">
<sdesc>Returns the CSS for display</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CoreCssComponent-&gt;writeCSS">
<sdesc>Write some CSS into the container</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>css</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreCssTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreCssTag-&gt;writeCss">
<sdesc>Write some CSS into the container</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>css</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;DataBindingExpression">
<sdesc></sdesc>
<desc></desc>
<type>DataBindingExpression</type>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;autoPrepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;getValue">
<sdesc>Return the value of this expression</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;isConstant">
<sdesc>Does this expression refer to a constant value (at compile time)?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="DataBindingExpression-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataComponent-&gt;get">
<sdesc>Gets a copy of a stored property by name</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataComponent-&gt;getPropertyList">
<sdesc>Return a unique list of available properties  This method is probably going to have capitalization problems.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="DataComponent-&gt;hasProperty">
<sdesc>Has a value been assigned under this name for this dataspace?</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataComponent-&gt;import">
<sdesc>replaces the current properties of this dataspace with the proprties and values</sdesc>
<desc>passed as a parameter</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>property_list</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataComponent-&gt;set">
<sdesc>Stores a copy of value into a Property</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;DataSetDecorator">
<sdesc>Constructs DataSetDecorator</sdesc>
<desc></desc>
<type>DataSetDecorator</type>
<methodparam>
<type>object data</type>
<parameter>&amp;dataset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;export">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;hasProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;import">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;merge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;next">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;registerFilter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object instance</type>
<parameter>&amp;filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;remove">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;removeAll">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSetDecorator-&gt;set">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;export">
<sdesc>Returns a reference to the complete array of properties stored</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;get">
<sdesc>Gets a copy of a stored property by name</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;getPath">
<sdesc>Gets a property value by navagating a dot separated path  that dereferences elements within the dataspace.</sdesc>
<desc>If an element cannot be dereferenced or is not set, the  value NULL is returned.</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;getPropertyList">
<sdesc>Return a unique list of available properties  This method is probably going to have capitalization problems.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;hasProperty">
<sdesc>Has a value been assigned under this name for this dataspace?</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;import">
<sdesc>replaces the current properties of this dataspace with the proprties and values</sdesc>
<desc>passed as a parameter</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>property_list</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;isDataSource">
<sdesc>Any class that implements the DataSource interface should implement this method  This is a PHP4 way of detecting which objects implement the interface.</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;makeDataSpace">
<sdesc>Static method to convert a variable into a dataspace.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;merge">
<sdesc>Append a new list of values to the DataSpace. Existing key values will be  overwritten if duplicated in the new value list.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>property_list</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;prepare">
<sdesc>Prepares the dataspace, executing the doFilter() method of the</sdesc>
<desc>registered filter, if one exists</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;registerFilter">
<sdesc>Registers a filter with the dataspace. Filters are used to transform  stored properties.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object instance</type>
<parameter>&amp;filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;remove">
<sdesc>removes stored property value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;removeAll">
<sdesc>removes all property values</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;set">
<sdesc>Stores a copy of value into a Property</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpace-&gt;setPath">
<sdesc>Stores a copy of value into a Property based on a dot separated  path.</sdesc>
<desc>If an element cannot be dereferenced, or is not set, it is  converted to an array.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevDataSpaceTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpaceMapper-&gt;DataSpaceMapper">
<sdesc>DataSpaceMapper constructor</sdesc>
<desc></desc>
<type>DataSpaceMapper</type>
<methodparam>
<type>string</type>
<parameter>ini</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSpaceMapper-&gt;doFilter">
<sdesc>Filters a DataSpace, remapping variables. Called from a DataSpace</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>&amp;vars</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataDumpTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataDumpTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataDumpTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;addFooterFunct">
<sdesc>add a footer render function for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;clearFooters">
<sdesc>remove all footer render functions for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;getFooterCount">
<sdesc>add a footer render function for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;header">
<sdesc>render the header for this column</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TabDataSource</parameter>
</methodparam>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TplDataSource</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>key</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>grpHead</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;hide">
<sdesc>disable visibility for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;isVisible">
<sdesc>is visibility for enabled this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;openTableRow">
<sdesc>opens a table row</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;outputTd">
<sdesc>output as a td cell</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;outputTh">
<sdesc>output as a th cell</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;registerCssClassFilter">
<sdesc>register a column component with the table</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>&amp;filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;registerGroup">
<sdesc>register this columns group object</sdesc>
<desc>callback to the object to increment column count if this column is visible</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;group</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;render">
<sdesc>render the cell</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TabDataSource</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>&amp;TplDataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;renderFooter">
<sdesc>render a footer cell</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>integer</type>
<parameter>count</parameter>
</methodparam>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TabDataSource</parameter>
</methodparam>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TplDataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;setAttrib">
<sdesc>set column cell attributes</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attribs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;setHeaderAttrib">
<sdesc>set header attributes</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attribs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;setHeaderFunct">
<sdesc>set custom header function for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;setLabel">
<sdesc>set column heading</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;setRenderFunct">
<sdesc>set render function for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnComponent-&gt;show">
<sdesc>enable visibility for this column</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupComponent-&gt;getColCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupComponent-&gt;hasHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupComponent-&gt;incColCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupComponent-&gt;renderHeader">
<sdesc>render the header for this column group</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TabDataSource</parameter>
</methodparam>
<methodparam>
<type>DataSource</type>
<parameter>&amp;TplDataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataGroupComponent-&gt;setHeaderFunct">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;addColumn">
<sdesc>will register a column component with the table if none exists</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>column</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;colCount">
<sdesc>return the nubmer of visible columns</sdesc>
<desc></desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;genColFooters">
<sdesc>generate table footers</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;genHeaders">
<sdesc>generate table headings</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;getColumnByName">
<sdesc>return a column object by name</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>column</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;getColumnKeys">
<sdesc>return the list of keys for generation of columns</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;openTableRow">
<sdesc>opens a table row</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;prepare">
<sdesc>Prepares the list for iteration, creating an EmptyDataSet if no  data set has been registered then calling the dataset reset  method.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;registerColumn">
<sdesc>register a column component with the table</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>column</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;columnComponent</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;registerGroup">
<sdesc>register a group component with the table</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;groupComponent</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;registerRowCssClassFilter">
<sdesc>register a column component with the table</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object the</type>
<parameter>&amp;filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;renderRow">
<sdesc>renders a table row</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableComponent-&gt;setRowAttrib">
<sdesc>set the row attributes for this table</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attribs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataCellTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataCellTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataColumnTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataColumnTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataDefaultTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataFooterTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataGroupTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataHeaderTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataTableTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataTableTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DateFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DateFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="ToDateFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ToDateFilter-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ToDateFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>resource</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;FindRecord">
<sdesc>Retreive a single record from the database based on a query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;getCurrentConnection">
<sdesc>Return the current database connection managed by this class</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;getOneColumnArray">
<sdesc>Retreive an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;getTwoColumnArray">
<sdesc>Retreive an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;makeLiteral">
<sdesc>EXPERIMENTAL:  Convert a PHP value into an SQL literal.</sdesc>
<desc></desc>
<type>resource</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;NewRecord">
<sdesc>Factory function to create a MySQLRecord object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DBC_ConnectionConfiguration-&gt;DBC_ConnectionConfiguration">
<sdesc></sdesc>
<desc></desc>
<type>DBC_ConnectionConfiguration</type>
</methodsynopsis>
<methodsynopsis function="DBC_ConnectionConfiguration-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DBCQueryInterface-&gt;execute">
<sdesc>Return the current database connection managed by this class</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>mixed</type>
<parameter>&amp;conn</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DefaultFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DefaultFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="ListDefaultTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreDefaultTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreDefaultTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreDefaultTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreDefaultTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Delegate-&gt;Delegate">
<sdesc></sdesc>
<desc></desc>
<type>Delegate</type>
</methodsynopsis>
<methodsynopsis function="Delegate-&gt;invoke">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Handle-&gt;Handle">
<sdesc></sdesc>
<desc></desc>
<type>Handle</type>
</methodsynopsis>
<methodsynopsis function="Handle-&gt;getClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Handle-&gt;isHandle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Handle-&gt;resolve">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StaticDelegate-&gt;StaticDelegate">
<sdesc></sdesc>
<desc></desc>
<type>StaticDelegate</type>
</methodsynopsis>
<methodsynopsis function="StaticDelegate-&gt;invoke">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyDictionary-&gt;PropertyDictionary">
<sdesc></sdesc>
<desc></desc>
<type>PropertyDictionary</type>
</methodsynopsis>
<methodsynopsis function="PropertyDictionary-&gt;getInstance">
<sdesc>Returns the global instance of the property dictionary</sdesc>
<desc>Used so less direct references scattered around to global location</desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="PropertyDictionary-&gt;getPropertyList">
<sdesc>Gets the list of Property Classes registered to a specific tag class.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PropertyDictionary-&gt;registerProperty">
<sdesc>Registers information about a compile time propert in the global property dictionary.</sdesc>
<desc>This function is called from the respective compile time component class  file.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyDictionary-&gt;_registerProperty">
<sdesc>Registers a property in the dictionary, called from the global registerProperty()  function.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>&amp;PropertyInfo</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PropertyInfo-&gt;PropertyInfo">
<sdesc></sdesc>
<desc></desc>
<type>PropertyInfo</type>
</methodsynopsis>
<methodsynopsis function="PropertyInfo-&gt;load">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FilterDictionary-&gt;FilterDictionary">
<sdesc></sdesc>
<desc></desc>
<type>FilterDictionary</type>
</methodsynopsis>
<methodsynopsis function="FilterDictionary-&gt;getFilterInfo">
<sdesc>Gets the tag information about a given tag.</sdesc>
<desc>Called from the SourceFileParser</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FilterDictionary-&gt;getInstance">
<sdesc>Returns the global instance of the Filter dictionary</sdesc>
<desc>Used so less direct references scattered around to global location</desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FilterDictionary-&gt;registerFilter">
<sdesc>Registers information about a compile time filter in the global filter dictionary.</sdesc>
<desc>This function is called from the respective compile time component class  file.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>&amp;FilterInfo</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>file</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FilterDictionary-&gt;_registerFilter">
<sdesc>Registers a filter in the dictionary, called from the global registerFilter()  function.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>&amp;FilterInfo</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FilterInfo-&gt;FilterInfo">
<sdesc></sdesc>
<desc></desc>
<type>FilterInfo</type>
</methodsynopsis>
<methodsynopsis function="FilterInfo-&gt;load">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DNSDomainRule-&gt;DNSDomainRule">
<sdesc>Constructs a DNSDomainRule</sdesc>
<desc></desc>
<type>DNSDomainRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DNSDomainRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DomainRule-&gt;DomainRule">
<sdesc>Constructs a DomainRule</sdesc>
<desc></desc>
<type>DomainRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DomainRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DNSEmailRule-&gt;DNSEmailRule">
<sdesc>Constructs a DNSEmailRule</sdesc>
<desc></desc>
<type>DNSEmailRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DNSEmailRule-&gt;CheckDomain">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EmailRule-&gt;EmailRule">
<sdesc>Constructs a EmailRule</sdesc>
<desc></desc>
<type>EmailRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EmailRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EmailRule-&gt;CheckDomain">
<sdesc>Performs validation of an email domain</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EmailRule-&gt;CheckUser">
<sdesc>Performs validation of an email user</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;export">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;import">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;merge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;next">
<sdesc>Iterator Method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;registerFilter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;remove">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;removeAll">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;reset">
<sdesc>Iterator Method</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyDataSet-&gt;set">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyErrorList-&gt;next">
<sdesc>Dummy next method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="EmptyErrorList-&gt;prepare">
<sdesc>Dummy prepare method does nothing</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyErrorList-&gt;removeRestrictions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyErrorList-&gt;reset">
<sdesc>Dummy reset method does nothing</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EmptyErrorList-&gt;restrictFields">
<sdesc>Dummy restrictFields method</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;addError">
<sdesc>Add an error code to the error list.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;addErrorMessage">
<sdesc>Add an error message to the error list.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;ensureErrorMessageDictionary">
<sdesc>Ensures that an error message dictionary is available, creating</sdesc>
<desc>a default dictionary if one is not set</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;ensureFieldNameDictionary">
<sdesc>Ensures that an error message dictionary is available, creating</sdesc>
<desc>a default dictionary if one is not set</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;getError">
<sdesc>Returns the current ValidationError</sdesc>
<desc></desc>
<type>ValidationError</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;getMessage">
<sdesc>Gets an error message from the current ValidationError object</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;next">
<sdesc>Iterator method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;removeRestrictions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;reset">
<sdesc>Iterator method</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;restrictFields">
<sdesc>Fields which errors should be applied to ???</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>fieldRestriction</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;setErrorMessageDictionary">
<sdesc>Set the ErrorMessageDictionary</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;Dictionary</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorList-&gt;setFieldNameDictionary">
<sdesc>Set the FieldNameDictionary</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>FieldNameDictionary</type>
<parameter>&amp;Dictionary</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorMessageCode-&gt;getErrorMessage">
<sdesc>Returns the Error message for this error</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ErrorMessageText-&gt;getErrorMessage">
<sdesc>Returns the Error message for this error</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ErrorSummaryTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ErrorSummaryTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorSummaryTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;Expression">
<sdesc></sdesc>
<desc></desc>
<type>Expression</type>
<methodparam>
<type>string</type>
<parameter>expression</parameter>
</methodparam>
<methodparam>
<type>object Compiler</type>
<parameter>&amp;ComponentContext</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>DefaultFilter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;getValue">
<sdesc>Return the value of this expression</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;isConstant">
<sdesc>Does this expression refer to a constant value (at compile time)?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="Expression-&gt;prepare">
<sdesc>Calls the prepare method on the root of the filter chain</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExpressionFilterFindingParser-&gt;ExpressionFilterFindingParser">
<sdesc>Invokes the Lexer to parse the expression</sdesc>
<desc>Value parser constants</desc>
<type>ExpressionFilterFindingParser</type>
<methodparam>
<type>string</type>
<parameter>expression</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionFilterParser-&gt;ExpressionFilterParser">
<sdesc>Invokes the Lexer to parse the expression</sdesc>
<desc>Value parser constants</desc>
<type>ExpressionFilterParser</type>
<methodparam>
<type>string</type>
<parameter>expression</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionValueParser-&gt;ExpressionValueParser">
<sdesc>Invokes the Lexer to parse the expression</sdesc>
<desc>Value parser constants</desc>
<type>ExpressionValueParser</type>
<methodparam>
<type>string</type>
<parameter>expression</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;ExpressionLexer">
<sdesc>Sets up the lexer in case insensitive matching     by default.</sdesc>
<desc></desc>
<type>ExpressionLexer</type>
<methodparam>
<type>ExpressionParser</type>
<parameter>parser</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>start</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;addEntryPattern">
<sdesc>Adds a pattern that will enter a new parsing     mode. Useful for entering parenthesis, strings,     tags, etc.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>new_mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;addExitPattern">
<sdesc>Adds a pattern that will exit the current mode     and re-enter the previous one.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;addPattern">
<sdesc>Adds a token search pattern for a particular     parsing mode. The pattern does not change the     current mode.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;addSpecialPattern">
<sdesc>Adds a pattern that has a special mode. Acts as an entry     and exit pattern in one go, effectively calling a special     parser handler for this token only.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>special</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;mapHandler">
<sdesc>Adds a mapping from a mode to another handler.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>mode</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>handler</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexer-&gt;parse">
<sdesc>Splits the page text into tokens. Will fail</sdesc>
<desc>if the handlers report an error or if no     content is consumed. If successful then each     unparsed and parsed token invokes a call to the     held listener.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>raw</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerParallelRegex-&gt;ExpressionLexerParallelRegex">
<sdesc>Constructor. Starts with no patterns.</sdesc>
<desc></desc>
<type>ExpressionLexerParallelRegex</type>
<methodparam>
<type>boolean</type>
<parameter>case</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerParallelRegex-&gt;addPattern">
<sdesc>Adds a pattern with an optional label.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>label</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerParallelRegex-&gt;match">
<sdesc>Attempts to match all patterns at once against     a string.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>subject</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>match</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerStateStack-&gt;ExpressionLexerStateStack">
<sdesc>Constructor. Starts in named state.</sdesc>
<desc></desc>
<type>ExpressionLexerStateStack</type>
<methodparam>
<type>string</type>
<parameter>start</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerStateStack-&gt;enter">
<sdesc>Adds a state to the stack and sets it     to be the current state.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>state</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerStateStack-&gt;getCurrent">
<sdesc>Accessor for current state.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ExpressionLexerStateStack-&gt;leave">
<sdesc>Leaves the current state and reverts     to the previous one.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="DefaultFieldNameDictionary-&gt;getFieldName">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadMaxSizeRule-&gt;FileUploadMaxSizeRule">
<sdesc>Constructs a FileUploadMaxSizeRule</sdesc>
<desc></desc>
<type>FileUploadMaxSizeRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>maxsize</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadMaxSizeRule-&gt;Check">
<sdesc>Check that the uploaded file was smaller than a programmer defined size;</sdesc>
<desc>then (if PHP &gt;= 4.2.0) the value (if any) set in the form MAX_FILE_SIZE  and the php.ini upload_max_filesize setting;</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadMimeTypeRule-&gt;FileUploadMimeTypeRule">
<sdesc>Constructs a FileUploadMimeTypeRule</sdesc>
<desc></desc>
<type>FileUploadMimeTypeRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>mimetypes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadMimeTypeRule-&gt;Check">
<sdesc>Check that the mimetype of the uploaded file appears in the mimetypes  array. Some browsers won't provide a mimetype, so we can only check when  it is provided.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadPartialRule-&gt;FileUploadPartialRule">
<sdesc>Constructs FileUploadPartialRule</sdesc>
<desc></desc>
<type>FileUploadPartialRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadPartialRule-&gt;Check">
<sdesc>Check that an uploaded file was fully uploaded.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadRequiredRule-&gt;FileUploadRequiredRule">
<sdesc>Constructs RequiredRule</sdesc>
<desc></desc>
<type>FileUploadRequiredRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileUploadRequiredRule-&gt;validate">
<sdesc>Perform validation</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;isConstant">
<sdesc>Does this filter refer to a constant value at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;registerBase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerFilter-&gt;registerParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageFirstTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageFirstTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FlatArrayDataSet-&gt;FlatArrayDataSet">
<sdesc></sdesc>
<desc></desc>
<type>FlatArrayDataSet</type>
</methodsynopsis>
<methodsynopsis function="FlatArrayDataSet-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FlatArrayDataSet-&gt;next">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FlatArrayDataSet-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ButtonController-&gt;ButtonController">
<sdesc></sdesc>
<desc></desc>
<type>ButtonController</type>
</methodsynopsis>
<methodsynopsis function="ButtonController-&gt;dispatchEvents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ButtonController-&gt;registerOnClickListener">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;FormController">
<sdesc></sdesc>
<desc></desc>
<type>FormController</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;addRule">
<sdesc>Registers a Validation Rule</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;rule</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;dispatchEvents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;isPostback">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;postBackRestore">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;registerOnLoadListener">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;registerOnPostBackListener">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;_appendDispatchInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormController-&gt;_getDispatchName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CheckableFormElement-&gt;getAttribute">
<sdesc>Routes call to TagComponent::getAttribute</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CheckableFormElement-&gt;renderAttributes">
<sdesc>Overrides then calls with the parent renderAttributes() method dealing</sdesc>
<desc>with the special case of the checked attribute  Called from compiled template</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CheckableFormElement-&gt;setAttribute">
<sdesc>Routes call to TagComponent::setAttribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;getDataSource">
<sdesc>Return the DataSource</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>object implementing</type>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;getErrorDataSet">
<sdesc>Returns the ErrorList if it exists or an EmptyErrorList if not</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>object ErrorList</type>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;hasErrors">
<sdesc>Determine whether the form has errors.</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;prepare">
<sdesc>Initializes the form DataSource</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;preserveState">
<sdesc>Identify a property stored in the DataSource of the component, which  should be passed as a hidden input field in the form post. The name  attribute of the hidden input field will be the name of the property.</sdesc>
<desc>Use this to have properties persist between form submits</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>variable</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;registerDataSource">
<sdesc>Registers a DataSource with this component</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>void</type>
<methodparam>
<type>object implementing</type>
<parameter>&amp;datasource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;renderState">
<sdesc>Renders the hidden fields for variables which should be preserved.</sdesc>
<desc>Called from within a compiled template render function.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;setErrors">
<sdesc>If errors occur, use this method to identify them to the FormComponent.</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;_getValue">
<sdesc>Get the named property from the form DataSource</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormComponent-&gt;_setValue">
<sdesc>Set a named property in the form DataSource</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;getAttribute">
<sdesc>Overrides TagComponent method so that requests for the value of</sdesc>
<desc>the attribute named &quot;value&quot; return the value from the FormComponent  DataSource, if it exists. This implementation is overridden itself  in CheckableFormElement</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;getDisplayName">
<sdesc>Returns a value for the name attribute. If $this-&gt;displayname is not</sdesc>
<desc>set, returns either the title, alt or name attribute (in that order  of preference, defined for the tag  (typically this is called for you by controllers)</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;getValue">
<sdesc>Returns the value of the form element  (it's value in the form DataSource)</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;hasErrors">
<sdesc>Returns true if the form element is in an error state</sdesc>
<desc>(typically this is called for you by controllers)</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;setAttribute">
<sdesc>Overrides TagComponent method so keep value attribute and value</sdesc>
<desc>in form DataSource in sync</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;setError">
<sdesc>Puts the element into the error state and assigns the error class or</sdesc>
<desc>style attributes, if the corresponding member vars have a value  (typically you shouldn't need to call this)</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="FormElement-&gt;setValue">
<sdesc>Sets the value of the form element  (it's value in the form DataSource)</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormFieldNameDictionary-&gt;FormFieldNameDictionary">
<sdesc></sdesc>
<desc></desc>
<type>FormFieldNameDictionary</type>
<methodparam>
<type></type>
<parameter>&amp;form</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormFieldNameDictionary-&gt;getFieldName">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>fieldName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="InputFormElement-&gt;renderAttributes">
<sdesc>Overrides then calls with the parent renderAttributes() method. Makes  sure there is always a value attribute, even if it's empty.</sdesc>
<desc>Called from within a compiled template render function.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LabelComponent-&gt;setError">
<sdesc>If either are set, assigns the attributes for error class or style</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TextAreaComponent-&gt;renderContents">
<sdesc>Output the contents of the textarea, passing through htmlspecialchars().</sdesc>
<desc>Called from within a compiled template's render function</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;getDataSource">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;getDataSourceRefCode">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;getServerId">
<sdesc>Returns the identifying server ID. It's value it determined in the</sdesc>
<desc>following order;  The XML id attribute in the template if it existsThe XML name attribute in the template if it existsThe value of $this-&gt;ServerIdAn ID generated by the getNewServerId() function</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="FormTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormView-&gt;FormView">
<sdesc>Preserved fields allow the controller to tell the view to  preserve the state of certain fields between requests.</sdesc>
<desc>In a form view, this usually means add hidden fields.</desc>
<type>FormView</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>TemplateFile</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormView-&gt;display">
<sdesc>Output the View  This method will not be called if this View is participating as  a sub view in a composite view.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormView-&gt;findForm">
<sdesc>This only works for templates that contain a single form.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormView-&gt;prepare">
<sdesc>Template method provided as a place for subclasses to place  template manipulation logic.  It is not necessary to  call the parent prepare method when this method is overridden.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="GenericContainerTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="GenericContainerTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreGraftTag-&gt;addChild">
<sdesc>Adds a child component, by reference, to the array of children</sdesc>
<desc>of the placeholder node (overrides parent class method)</desc>
<type>void</type>
<methodparam>
<type>object instance</type>
<parameter>&amp;child</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreGraftTag-&gt;_findGraftPoint">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HexFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HexFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="HtmlFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;HTMLParser">
<sdesc></sdesc>
<desc></desc>
<type>HTMLParser</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;getColumnNumber">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;getLineNumber">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;getPublicId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;ignoreWhitespace">
<sdesc>Moves the position forward past any whitespace characters</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HTMLParser-&gt;parse">
<sdesc>Begins the parsing operation, setting up any decorators, depending on</sdesc>
<desc>parse options invoking _parse() to execute parsing</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorComponent-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorComponent-&gt;setClickField">
<sdesc>Sets the GET variable name to watch for clicks</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>field</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlAnchorComponent-&gt;setClickHandler">
<sdesc>Sets the onclick call back function</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>handler</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="CoreIncludeTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="ini_get_all_handler-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ini_get_all_handler-&gt;data">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ini_get_all_handler-&gt;getDirectives">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ini_get_all_handler-&gt;open">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InputTag-&gt;prepare">
<sdesc>Sets the runtimeComponentName property, depending on the type of</sdesc>
<desc>Input tag</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteComponent-&gt;getAutoCompleteList">
<sdesc>Returns the autocomplete list (called from the template)</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteComponent-&gt;setAutoCompleteList">
<sdesc>Set the autocomplete list</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>list</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InputAutoCompleteTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InputFileComponent-&gt;getValue">
<sdesc>We can't get a meaningful 'value' attribute for file upload controls</sdesc>
<desc>after form submission - the value would need to be the full path to the  file on the client machine and we don't have a handle on that  information. The component's 'value' is instead set to the relevant  portion of the $_FILES array, allowing initial validation of uploaded  files w/ WACT.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="IPAddressRule-&gt;IPAddressRule">
<sdesc>Constructs a IPAddressRule</sdesc>
<desc></desc>
<type>IPAddressRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="IPAddressRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PartialIPAddressRule-&gt;PartialIPAddressRule">
<sdesc>Constructs a PartialIPAddressRule</sdesc>
<desc></desc>
<type>PartialIPAddressRule</type>
<methodparam>
<type>array</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PartialIPAddressRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListItemTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListItemTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EncodeJavascriptTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="EncodeJavascriptTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EncodeJavascriptTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="EncodeJavascriptTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LabelTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LabelTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageLastTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageLastTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListComponent-&gt;ensureDataSourceAvailable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListComponent-&gt;prepare">
<sdesc>Prepares the list for iteration, creating an EmptyDataSet if no  data set has been registered then calling the dataset reset  method.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListComponent-&gt;registerDataSet">
<sdesc>Registers a dataset with the list component. The dataset must</sdesc>
<desc>implement the iterator methods defined in DataSet</desc>
<type>void</type>
<methodparam>
<type>object implementing</type>
<parameter>&amp;DataSet</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListListTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListListTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageListTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageListTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageListTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreLiteralTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreLiteralTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="LowerCaseFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LowerCaseFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="MatchRule-&gt;MatchRule">
<sdesc>Constructs MatchRule</sdesc>
<desc></desc>
<type>MatchRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>referenceField</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MatchRule-&gt;validate">
<sdesc>Performs validation</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MathFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MathFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;addOperator">
<sdesc>Add new operator</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>operator</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>function</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>priority</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>no_of_arg</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;calculate">
<sdesc>Calculate the $input expression</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>mixed</type>
<parameter>input</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>angle</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>is_rpn</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;getInputArray">
<sdesc>Return a input array</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;getOperators">
<sdesc>Return a operator's array</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;getRpnArray">
<sdesc>Return a RPN array</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="Math_Rpn-&gt;getTimer">
<sdesc>Return a counting time in second</sdesc>
<desc></desc>
<type>float</type>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;connect">
<sdesc>Connect to the the database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;FindRecord">
<sdesc>Retrieve a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;getConnectionId">
<sdesc>Return connectionId for a PEAR::MDB database.  Allow a lazy connection.</sdesc>
<desc></desc>
<type>object subclass</type>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;getOneColumnArray">
<sdesc>Retrieve an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;getTwoColumnArray">
<sdesc>Retrieve an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc>WARNING: while in MDB a boolean is mapped to CHAR(1) ['Y' | 'N'],  the WACT preferred way is an integer [1 | 0]Use registerFieldConverter() if you are using an existing db</desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MDB database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MDB database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBConnection-&gt;_execute">
<sdesc>For internal driver use only</sdesc>
<desc></desc>
<type>object PEAR</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;MDBRecord">
<sdesc>Construct a record</sdesc>
<desc></desc>
<type>MDBRecord</type>
<methodparam>
<type></type>
<parameter>&amp;Connection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;buildAssignmentList">
<sdesc>Build a list of values to assign to columns</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecord-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;MDBRecordSet">
<sdesc>Construct a record set.</sdesc>
<desc></desc>
<type>MDBRecordSet</type>
<methodparam>
<type></type>
<parameter>Connection</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;next">
<sdesc>Iterator next method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>interface</type>
<parameter>&amp;pager</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;query">
<sdesc>Stores the SQL statement and makes sure the result object is</sdesc>
<desc>empty</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDBRecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;connect">
<sdesc>Connect to the the database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;FindRecord">
<sdesc>Retrieve a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;getConnectionId">
<sdesc>Return connectionId for a PEAR database.  Allow a lazy connection.</sdesc>
<desc></desc>
<type>object subclass</type>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;getOneColumnArray">
<sdesc>Retrieve an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;getTwoColumnArray">
<sdesc>Retrieve an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc>WARNING: while in MDB2 a boolean is mapped to CHAR(1) ['Y' | 'N'],  the WACT preferred way is an integer [1 | 0]  (as a side note, MDB2 is still in its beta stage,  so the bool-char(1) mapping may be changed in the near future)</desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MDB database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MDB2 database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Connection-&gt;_execute">
<sdesc>For internal driver use only</sdesc>
<desc></desc>
<type>object PEAR</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;MDB2Record">
<sdesc>Construct a record</sdesc>
<desc></desc>
<type>MDB2Record</type>
<methodparam>
<type></type>
<parameter>&amp;Connection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;buildAssignmentList">
<sdesc>Build a list of values to assign to columns</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2Record-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;MDB2RecordSet">
<sdesc>Construct a record set.</sdesc>
<desc></desc>
<type>MDB2RecordSet</type>
<methodparam>
<type></type>
<parameter>Connection</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;next">
<sdesc>Iterator next method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>interface</type>
<parameter>&amp;pager</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;query">
<sdesc>Stores the SQL statement and makes sure the result object is</sdesc>
<desc>empty</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MDB2RecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MDBC-&gt;getConnection">
<sdesc>Return a named database connection managed by this class</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="MDBC-&gt;newConnection">
<sdesc>Create a new connection based on a named database configuration</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="MDBC_ConnectionConfiguration-&gt;MDBC_ConnectionConfiguration">
<sdesc></sdesc>
<desc></desc>
<type>MDBC_ConnectionConfiguration</type>
</methodsynopsis>
<methodsynopsis function="MDBC_ConnectionConfiguration-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MemberRule-&gt;MemberRule">
<sdesc>Constructs a MatchRule</sdesc>
<desc></desc>
<type>MemberRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>list</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MemberRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ErrorMessageDictionary-&gt;getMessage">
<sdesc>Gets a message, given it's group and id. This method loads the var file  not already loaded, using the importVarFile() function.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>Group</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Id</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarDayHeaderStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarDayStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarEmptyDayStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarMonthTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarMonthTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarNextPrevStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarSelectedDayStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CalendarTitleStyleTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;MutableDataSet">
<sdesc>Constructs MutableDataSet</sdesc>
<desc></desc>
<type>MutableDataSet</type>
<methodparam>
<type>array</type>
<parameter>dataset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;deleteRow">
<sdesc>Deletes the row at the current dataset index, moving the cursor  back to the previous row index. Be warned - it's not going to be fast  with a large dataset.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>array</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;insertRow">
<sdesc>Inserts a row directly after the current dataset index and moves</sdesc>
<desc>the cursor to that location. Be warned - it's not going to be fast  with a large dataset</desc>
<type>int</type>
<methodparam>
<type>array</type>
<parameter>row</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;popRow">
<sdesc>Removes a row from the end of the dataset, returning it to the</sdesc>
<desc>the caller then resetting the dataset cursor</desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;pushRow">
<sdesc>Adds a row to the end of the dataset, resetting the dataset cursor</sdesc>
<desc></desc>
<type>int</type>
<methodparam>
<type>array</type>
<parameter>row</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;seekRow">
<sdesc>Moves the internal (i.e. PHP) cursor for the dataset array  to the given index. If out of bounds (too large / too small)  moves the pointer to the end / beginning of the dataset.</sdesc>
<desc>Not exceptionally fast to be warned.</desc>
<type>array</type>
<methodparam>
<type>int</type>
<parameter>index</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;shiftRow">
<sdesc>Removes a row from the beginning of the dataset, returning it to the</sdesc>
<desc>the caller, resetting the dataset cursor</desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="MutableDataSet-&gt;unshiftRow">
<sdesc>Adds a row to the beginning of the datase resetting the dataset</sdesc>
<desc>cursor</desc>
<type>int</type>
<methodparam>
<type>array</type>
<parameter>row</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;connect">
<sdesc>Connect to the the database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;FindRecord">
<sdesc>Retreive a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;getConnectionId">
<sdesc>Return connectionId for a mysql database.  Allow a lazy connection.</sdesc>
<desc></desc>
<type>resource</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;getOneColumnArray">
<sdesc>Retreive an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;getTwoColumnArray">
<sdesc>Retreive an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a MySQL database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;_execute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;MySqlRecord">
<sdesc>Conecruct a record</sdesc>
<desc></desc>
<type>MySqlRecord</type>
<methodparam>
<type></type>
<parameter>Connection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;buildAssignmentSQL">
<sdesc>Build SQL fragment to assign values to columns</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by an insert, delete or update query.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.  requires MySQL Version 3.22.10 or better.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecord-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;MySqlRecordSet">
<sdesc>Construct a record set.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object MySQL</type>
<parameter>Connection</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;next">
<sdesc>Iterator next method.  Load the data values from the next record  in the query into the current data values.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>interface</type>
<parameter>&amp;pager</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;query">
<sdesc>Assign a query for this object to process.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySqlRecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageNavigatorTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageNextTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageNextTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NoTagsFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NoTagsFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="NumberFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumberFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="PageNumberTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumericPrecisionRule-&gt;NumericPrecisionRule">
<sdesc>Constructs NumericPrecisionRule</sdesc>
<desc></desc>
<type>NumericPrecisionRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>WholeDigits</parameter>
</methodparam>
<methodparam>
<type>integer</type>
<parameter>DecimalDigits</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumericPrecisionRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumericRangeRule-&gt;NumericRangeRule">
<sdesc>Constructs SizeRangeRule</sdesc>
<desc></desc>
<type>NumericRangeRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>min</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>max</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumericRangeRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreOptionalTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreOptionalTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreOptionalTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOptionalTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="CoreOutputTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreOutputTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutputTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;OutputCacheComponent">
<sdesc>Constructs the OutputCacheComponent</sdesc>
<desc></desc>
<type>OutputCacheComponent</type>
<methodparam>
<type>string</type>
<parameter>codefile</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>expires</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>cacheby</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>cachegroup</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;cache">
<sdesc>Cache output for this template</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>output</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;flush">
<sdesc>Delete this cache file</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;flushGroup">
<sdesc>Flush all the cache files in this group.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>mixed</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;getCacheGroup">
<sdesc>Returns the name of the cache group</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;getCacheId">
<sdesc>Returns the ID used by Cache_Lite to identify the cache file</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;isCached">
<sdesc>Determine whether template is cached</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;lastModified">
<sdesc>Returns the time the cache was last modified to help with</sdesc>
<desc>issueing HTTP Client Side Caching headers  Note: accesses PEAR::Cache_Lite private variable $_file</desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="OutputCacheComponent-&gt;render">
<sdesc>Returns the output to be displayed</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="CacheOutputCacheTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CacheOutputCacheTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CacheOutputCacheTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputExpression-&gt;OutputExpression">
<sdesc></sdesc>
<desc></desc>
<type>OutputExpression</type>
</methodsynopsis>
<methodsynopsis function="OutputExpression-&gt;generate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="OutputExpression-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PagedDataSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PagedDataSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PageNumberProperty-&gt;PageNumberProperty">
<sdesc></sdesc>
<desc></desc>
<type>PageNumberProperty</type>
</methodsynopsis>
<methodsynopsis function="PageNumberProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;PageNavigatorComponent">
<sdesc>Initialize this class</sdesc>
<desc></desc>
<type>PageNavigatorComponent</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getCurrentPageNumber">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getCurrentPageUri">
<sdesc>The URI of the page that is being displayed in the page number list  This is called automatically from the compiled template and should  not be called directly.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getFirstPageUri">
<sdesc>Return the URI to the first page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getItemsPerPage">
<sdesc>Get the item number of the first item in the list.</sdesc>
<desc>Usually called by the PagedDataSet to determine how many  items are on a page.</desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getLastPageNumber">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getLastPageUri">
<sdesc>Return the URI to the last page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getNextPageUri">
<sdesc>Return the URI to the next page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getPageNumber">
<sdesc>Get the page number of the page being displayed in the page number list.</sdesc>
<desc>This is called automatically from the compiled template and should  not be called directly.</desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getPageUri">
<sdesc>Return the URI to a specific page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getPrevPageUri">
<sdesc>Return the URI to the previous page in the list.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;getStartingItem">
<sdesc>Get the item number of the first item in the list.</sdesc>
<desc>Usually called by the PagedDataSet to determine where to  begin query.</desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;hasNext">
<sdesc>Is there a page available to display after the current page being displayed?</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;hasPrev">
<sdesc>Is there a page available to display before the current page being displayed?</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;isCurrentPage">
<sdesc>Is the page number of the page being displayed in the page number list  the current page being displayed in the browser?  This is called automatically from the compiled template and should  not be called directly.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;isDisplayPage">
<sdesc>Should the current page in the page number list be displayed?  This is called automatically from the compiled template and should  not be called directly.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;IsFirst">
<sdesc>Is the current page being displayed the first page in the page list?</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;IsLast">
<sdesc>Is the current page being displayed the last page in the page list?</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;next">
<sdesc>Advance the page list cursor to the next page.</sdesc>
<desc>This is called automatically from the compiled template and should  not be called directly.</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;prepare">
<sdesc>Initialize values used by this component.</sdesc>
<desc>This is called automatically from the compiled template.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;setPagedDataSet">
<sdesc>Set the database which this pager controls.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object dataset</type>
<parameter>&amp;dataset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageNavigatorComponent-&gt;setTotalItems">
<sdesc>Set the total number of items in the list.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Pager-&gt;getItemsPerPage">
<sdesc>Get the item number of the first item in the list.</sdesc>
<desc>Usually called by the PagedDataSet to determine how many  items are on a page.</desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="Pager-&gt;getStartingItem">
<sdesc>Get the item number of the first item in the list.</sdesc>
<desc>Usually called by the PagedDataSet to determine where to  begin query.</desc>
<type>integer</type>
</methodsynopsis>
<methodsynopsis function="Pager-&gt;setPagedDataSet">
<sdesc>Set the DataSet which this pager controls.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ParameterDispatchController-&gt;ParameterDispatchController">
<sdesc></sdesc>
<desc></desc>
<type>ParameterDispatchController</type>
</methodsynopsis>
<methodsynopsis function="ParameterDispatchController-&gt;setParameterName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ParameterDispatchController-&gt;_appendDispatchInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ParameterDispatchController-&gt;_getDispatchName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ParityProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParityProperty-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ParityProperty-&gt;generateScopeEntry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseParsingState-&gt;BaseParsingState">
<sdesc></sdesc>
<desc></desc>
<type>BaseParsingState</type>
<methodparam>
<type></type>
<parameter>&amp;Parser</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BaseParsingState-&gt;invalidAttributeSyntax">
<sdesc>Attribute syntax Error Handler</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BaseParsingState-&gt;setDocumentLocator">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Locator</type>
<parameter>&amp;locator</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;ComponentParsingState">
<sdesc></sdesc>
<desc></desc>
<type>ComponentParsingState</type>
<methodparam>
<type></type>
<parameter>&amp;Parser</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;cdata">
<sdesc>Handle tag content</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;characters">
<sdesc>Handle tag content</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;comment">
<sdesc>Handle XML comments</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;doctype">
<sdesc>Handle doctype</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;emptyElement">
<sdesc>Handle empty tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attrs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;endElement">
<sdesc>Handle closing tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;escape">
<sdesc>Handle XML escape sequences</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;getAttributeString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;invalidEntitySyntax">
<sdesc>Entity syntax Error Handler</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;jasp">
<sdesc>Handle JSP / ASP markup</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;processingInstruction">
<sdesc>Handle processing instructions</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>target</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>instruction</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;startElement">
<sdesc>Handle opening tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attrs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ComponentParsingState-&gt;unexpectedEOF">
<sdesc>Handle EOF Error</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;LiteralParsingState">
<sdesc></sdesc>
<desc></desc>
<type>LiteralParsingState</type>
<methodparam>
<type></type>
<parameter>&amp;Parser</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;cdata">
<sdesc>Handle tag content</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;characters">
<sdesc>Handle tag content</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;comment">
<sdesc>Handle XML comments</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;doctype">
<sdesc>Handle doctype</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;emptyElement">
<sdesc>Handle empty tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attrs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;endElement">
<sdesc>Handle closing tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;escape">
<sdesc>Handle XML escape sequences</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;getAttributeString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;invalidEntitySyntax">
<sdesc>Entity syntax Error Handler</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;jasp">
<sdesc>Handle JSP / ASP markup</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;processingInstruction">
<sdesc>Handle processing instructions</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>target</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>instruction</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;startElement">
<sdesc>Handle opening tags</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attrs</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LiteralParsingState-&gt;unexpectedEOF">
<sdesc>Handle EOF error</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PathInfoDispatchController-&gt;PathInfoDispatchController">
<sdesc></sdesc>
<desc></desc>
<type>PathInfoDispatchController</type>
</methodsynopsis>
<methodsynopsis function="PathInfoDispatchController-&gt;dispatchChild">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PathInfoDispatchController-&gt;_appendDispatchInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PathInfoDispatchController-&gt;_getDispatchName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PathInfoRequestWrapper-&gt;PathInfoRequestWrapper">
<sdesc></sdesc>
<desc></desc>
<type>PathInfoRequestWrapper</type>
</methodsynopsis>
<methodsynopsis function="PathInfoRequestWrapper-&gt;getPathInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExcludePatternRule-&gt;ExcludePatternRule">
<sdesc>Constructs ExcludePatternRule</sdesc>
<desc></desc>
<type>ExcludePatternRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExcludePatternRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PatternRule-&gt;PatternRule">
<sdesc>Constructs PatternRule</sdesc>
<desc></desc>
<type>PatternRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PatternRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;connect">
<sdesc>Connect to the the database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;disconnect">
<sdesc>Disconnect from database</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;execute">
<sdesc>Performs any query that does not return a cursor.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;FindRecord">
<sdesc>Retreive a single record from the database based on a query.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;getConnectionId">
<sdesc>Return connectionId for a PEAR database.  Allow a lazy connection.</sdesc>
<desc></desc>
<type>object subclass</type>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;getOneColumnArray">
<sdesc>Retreive an array where each element of the array is the value from the  first column of a database query.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;getOneValue">
<sdesc>Get a single value from the first column of a single record from  a database query.</sdesc>
<desc></desc>
<type>Value</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;getTwoColumnArray">
<sdesc>Retreive an associative array where each element of the array is based  on the first column as a key and the second column as data.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;makeLiteral">
<sdesc>Convert a PHP value into an SQL literal.  The type to convert to is  based on the type of the PHP value passed, or the type string passed.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;NewPagedRecordSet">
<sdesc>Factory function used to retrieve more than one row from a pear database,  applying a filter to the data if supplied as an argument, and applying a  pager to the result set as well.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object pager</type>
<parameter>&amp;pager</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;NewRecord">
<sdesc>Factory function to create a Record object</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>DataSpace</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;NewRecordSet">
<sdesc>Factory function used to retrieve more than one row from a pear database,</sdesc>
<desc>applying a filter to the data if supplied as an argument</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>query</parameter>
</methodparam>
<methodparam>
<type>object filter</type>
<parameter>filter</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearConnection-&gt;_execute">
<sdesc>For internal driver use only</sdesc>
<desc></desc>
<type>object PEAR</type>
<methodparam>
<type>string</type>
<parameter>sql</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;PearRecord">
<sdesc>Construct a record</sdesc>
<desc></desc>
<type>PearRecord</type>
<methodparam>
<type></type>
<parameter>&amp;Connection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;buildAssignmentList">
<sdesc>Build a list of values to assign to columns</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecord-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;PearRecordSet">
<sdesc>Construct a record set.</sdesc>
<desc></desc>
<type>PearRecordSet</type>
<methodparam>
<type></type>
<parameter>Connection</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;next">
<sdesc>Iterator next method</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>interface</type>
<parameter>&amp;pager</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;query">
<sdesc>Stores the SQL statement and makes sure the result object is</sdesc>
<desc>empty</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PearRecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PHPNode-&gt;PHPNode">
<sdesc>Constructs PHPNode</sdesc>
<desc></desc>
<type>PHPNode</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PHPNode-&gt;generate">
<sdesc>Writes the contents of the PHP node to the compiled template</sdesc>
<desc>using the writePHP method</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CorePlaceHolderTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CorePlaceHolderTag-&gt;generateConstructor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CorePlaceHolderTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExcludePrefixRule-&gt;ExcludePrefixRule">
<sdesc>Constructs ExcludePrefixRule</sdesc>
<desc></desc>
<type>ExcludePrefixRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExcludePrefixRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PrefixRule-&gt;PrefixRule">
<sdesc>Constructs PrefixRule</sdesc>
<desc></desc>
<type>PrefixRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PrefixRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PagePrevTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PagePrevTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;activate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;generatePostStatement">
<sdesc>Generate tear down code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;generateScopeEntry">
<sdesc>Generate setup code when a property enters a scope in which it is  valid.  This is only called if the Property is considered active.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;generateScopeExit">
<sdesc>Generate tear down code when a property enters a scope in which it is  valid.  This is only called if the Property is considered active.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;isActive">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CompilerProperty-&gt;isConstant">
<sdesc>Does this property refer to a constant value at compile time?</sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="Record-&gt;getAffectedRowCount">
<sdesc>Gets the number of rows changed by an insert, delete or update query.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Record-&gt;insert">
<sdesc>INSERTs the values of this record into a single table  the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</sdesc>
<desc></desc>
<type>Boolean</type>
<methodparam>
<type>array</type>
<parameter>3</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Record-&gt;insertId">
<sdesc>INSERT a record into a table with a primary key represented by a  auto_increment/serial column and return the primary key of the  inserted record.</sdesc>
<desc>the field list parameter allows expressions to defined in the sql  statements as well as field values defined in the record.</desc>
<type>integer</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>primary_key_field</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Record-&gt;update">
<sdesc>Performs an UPDATE on a single table</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>table</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>fields</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>where</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>extrafields</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;getRowCount">
<sdesc>Returns the number of rows in a query</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;getTotalRowCount">
<sdesc>Returns the total number of rows that a query would return, ignoring paging  restrictions.  Query re-writing based on _adodb_getcount.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;next">
<sdesc>Iterator next method.  Load the data values from the next record  in the query into the current data values.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;paginate">
<sdesc>Assign a pager to this query for the purposes of breaking up the resulting  cursor into paged chucks.</sdesc>
<desc>The pager must implement an interface with three methods: 	setPagedDataSet() 	getStartingItem() 	getItemsPerPage()  The pager may call back to this object using one of two functions: 	getTotalRowCount() 	getRowCount()  The callback interface is to allow the pager to determine the number  of items in the full query.  Not all pagers require this information so  it was implemented as a call back.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;query">
<sdesc>Assign a query for this object to process.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Query_String</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RecordSet-&gt;reset">
<sdesc>Move the current pointer to the first position in the cursor.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="RedirectView-&gt;RedirectView">
<sdesc></sdesc>
<desc></desc>
<type>RedirectView</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RedirectView-&gt;display">
<sdesc>Output the View</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RedirectUrlView-&gt;display">
<sdesc>Output the View</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RedirectUrlView-&gt;View">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Request-&gt;exportPostProperties">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;getMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;getParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;getPathInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;getPostProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;hasParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;hasParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Request-&gt;hasPostProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;RequestFilter">
<sdesc></sdesc>
<desc></desc>
<type>RequestFilter</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;exportPostProperties">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;getMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;getParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;getPathInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;getPostProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;hasParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;hasParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestFilter-&gt;hasPostProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;addError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;addErrorMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;applyRule">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;ensureErrorList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;getErrorList">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResponseModel-&gt;isValid">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListRowEvenProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListRowEvenProperty-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListRowEvenProperty-&gt;generateScopeEntry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListRowNumberProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListRowNumberProperty-&gt;generateScopeEntry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ListRowOddProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListRowOddProperty-&gt;generatePreStatement">
<sdesc>Generate setup code for an expression reference</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ListRowOddProperty-&gt;generateScopeEntry">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequiredRule-&gt;RequiredRule">
<sdesc>Constructs RequiredRule</sdesc>
<desc></desc>
<type>RequiredRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequiredRule-&gt;validate">
<sdesc>Performs validation</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;setGroup">
<sdesc>Sets the error message group (related to the vars file)</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>Group</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;validate">
<sdesc>Perform validation</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;SingleFieldRule">
<sdesc>Constructs Rule</sdesc>
<desc></desc>
<type>SingleFieldRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;Check">
<sdesc>Check a Single Value to see if its valid</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>value</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;Error">
<sdesc>Signal that an error has occurred.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>id</parameter>
</methodparam>
<methodparam>
<type>optional</type>
<parameter>values</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;getField">
<sdesc>Returns the fieldname the rule applies to</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;IsValid">
<sdesc>Have we already determined this error to be invalid?</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>0</parameter>
</methodparam>
<methodparam>
<type>optional</type>
<parameter>1</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SingleFieldRule-&gt;validate">
<sdesc>Perform validation</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>DataSource</type>
<parameter>&amp;DataSource</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>&amp;ErrorList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SizeRangeRule-&gt;SizeRangeRule">
<sdesc>Constructs SizeRangeRule</sdesc>
<desc></desc>
<type>SizeRangeRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>minLength</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>maxLength</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SizeRangeRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreScriptComponent-&gt;readJavaScript">
<sdesc>Returns the JavaScript for display</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="CoreScriptComponent-&gt;writeJavaScript">
<sdesc>Write some JavaScript into the container</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>javascript</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreScriptTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreScriptTag-&gt;writeJavaScript">
<sdesc>Write some JavaScript into the container</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>javascript</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMultipleComponent-&gt;renderContents">
<sdesc>Renders the contents of the the select tag, option tags being built by  the option handler. Called from with a compiled template render function.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectMultipleComponent-&gt;setChoices">
<sdesc>Sets the choice list. Passed an associative array, the keys become the  contents of the option value attributes and the values in the array  become the text contents of the option tag e.g.</sdesc>
<desc>1      $choices = array ( 4 =&gt; 'red', 5=&gt;'blue', 6=&gt;'green' );  ...becomes...   &lt;select multiple&gt;
   &lt;option value=&quot;4&quot;&gt;red&lt;/option&gt;
   &lt;option value=&quot;5&quot;&gt;blue&lt;/option&gt;
   &lt;option value=&quot;6&quot;&gt;green&lt;/option&gt;
 &lt;/select&gt;</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>choiceList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMultipleComponent-&gt;setOptionRenderer">
<sdesc>Sets object responsible for rendering the options</sdesc>
<desc>Supply your own OptionRenderer if the default  is too simple</desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>optionHandler</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMultipleComponent-&gt;setSelection">
<sdesc>Sets a list of values to be displayed as selected. These should  correspond to the keys of the array passed to setChoices()  e.g.</sdesc>
<desc>1      $choices = array ( 4 =&gt; 'red', 5=&gt;'blue', 6=&gt;'green' );2      $selections = array ( 4, 6 );  ...becomes...   &lt;select multiple&gt;
   &lt;option value=&quot;4&quot; selected&gt;red&lt;/option&gt;
   &lt;option value=&quot;5&quot;&gt;blue&lt;/option&gt;
   &lt;option value=&quot;6&quot; selected&gt;green&lt;/option&gt;
 &lt;/select&gt;</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>selection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectSingleComponent-&gt;renderContents">
<sdesc>Renders the contents of the the select tag, option tags being built by  the option handler. Called from with a compiled template render function.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectSingleComponent-&gt;setChoices">
<sdesc>Sets the choice list. Passed an associative array, the keys become the  contents of the option value attributes and the values in the array  become the text contents of the option tag e.g.</sdesc>
<desc>1      $choices = array ( 4 =&gt; 'red', 5=&gt;'blue', 6=&gt;'green' );  ...becomes...   &lt;select&gt;
   &lt;option value=&quot;4&quot;&gt;red&lt;/option&gt;
   &lt;option value=&quot;5&quot;&gt;blue&lt;/option&gt;
   &lt;option value=&quot;6&quot;&gt;green&lt;/option&gt;
 &lt;/select&gt;</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>choiceList</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectSingleComponent-&gt;setOptionRenderer">
<sdesc>Sets object responsible for rendering the options</sdesc>
<desc>Supply your own OptionRenderer if the default  is too simple</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectSingleComponent-&gt;setSelection">
<sdesc>Sets a single option to be displayed as selected. Value  should correspond to a key in the array passed to  setChoices() e.g.</sdesc>
<desc>1      $choices = array ( 4 =&gt; 'red', 5=&gt;'blue', 6=&gt;'green' );2      $selection = 5;  ...becomes...   &lt;select multiple&gt;
   &lt;option value=&quot;4&quot;&gt;red&lt;/option&gt;
   &lt;option value=&quot;5&quot; selected&gt;blue&lt;/option&gt;
   &lt;option value=&quot;6&quot;&gt;green&lt;/option&gt;
 &lt;/select&gt;</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>selection</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectTag-&gt;generateContents">
<sdesc>Ignore the compiler time contents and generate the contents at run time.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;getDay">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;getMonth">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;getYear">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;isVisible">
<sdesc>the compiler complains if not defined...</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;prepareDay">
<sdesc>build SelectSimpleComponent object and set options for days</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;prepareMonth">
<sdesc>build SelectSimpleComponent object and set options for months</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;prepareYear">
<sdesc>build SelectSimpleComponent object and set options for years</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;setAsArray">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;setGroupName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormSelectDateComponent-&gt;setSelection">
<sdesc>override default behaviour when onInitial() is called</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectMonth-&gt;fillChoices">
<sdesc>set option tag choices</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectMonth-&gt;getFormat">
<sdesc>translate human-readable string in strftime() parameter</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectMonth-&gt;setFormat">
<sdesc>Allowed options are 'numeric', 'long', 'short'.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMonth-&gt;setSelectedMonth">
<sdesc>set selection</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectMonth-&gt;setValueFormat">
<sdesc>Allowed options are 'numeric', 'long', 'short'.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>format</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDateTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDateTag-&gt;generateDay">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDateTag-&gt;generateMonth">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDateTag-&gt;generateYear">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDayTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDayTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectDayTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMonthTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMonthTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMonthTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectYearTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectYearTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectYearTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;getHour">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;getMinute">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;getSecond">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;isVisible">
<sdesc>the compiler complains if not defined...</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;prepareHour">
<sdesc>build SelectSimpleComponent object and set options for hours</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;prepareMinute">
<sdesc>build SelectSimpleComponent object and set options for minutes</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;prepareSecond">
<sdesc>build SelectSimpleComponent object and set options for seconds</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;setAsArray">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;setGroupName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FormSelectTimeComponent-&gt;setSelection">
<sdesc>override default behaviour when onInitial() is called</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SelectHourTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectHourTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectHourTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMinuteTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMinuteTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectMinuteTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectSecondTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectSecondTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectSecondTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectTimeTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectTimeTag-&gt;generateHour">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectTimeTag-&gt;generateMinute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SelectTimeTag-&gt;generateSecond">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerComponentTag-&gt;generateConstructor">
<sdesc>Calls the parent getComponentRefCode() method and writes it to the</sdesc>
<desc>compiled template, appending an addChild() method used to create  this component at runtime</desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerComponentTag-&gt;getComponentRefCode">
<sdesc>Returns a string of PHP code identifying the component in the hierarchy.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ServerDataComponentTag-&gt;getDataSource">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ServerDataComponentTag-&gt;getDataSourceRefCode">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ServerDataComponentTag-&gt;isDataSource">
<sdesc></sdesc>
<desc></desc>
<type>Boolean</type>
</methodsynopsis>
<methodsynopsis function="ServerDataComponentTag-&gt;preGenerate">
<sdesc>Calls the parent preGenerate() method then writes  &quot;$DataSpace-&gt;prepare();&quot; to the compiled template.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerTagComponentTag-&gt;generateConstructor">
<sdesc>Writes the compiled template constructor from the runtime component,</sdesc>
<desc>assigning the attributes found at compile time to the runtime component  via a serialized string</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerTagComponentTag-&gt;generateExtraAttributes">
<sdesc>Adds any additional XML attributes</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerTagComponentTag-&gt;getRenderedTag">
<sdesc>Returns the XML tag name</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ServerTagComponentTag-&gt;postGenerate">
<sdesc>Writes the closing tag string to the compiled template</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ServerTagComponentTag-&gt;preGenerate">
<sdesc>Calls the parent preGenerate() method then writes the XML tag name  plus a PHP string which renders the attributes from the runtime  component.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="SilentCompilerDirectiveTag-&gt;generate">
<sdesc>Does nothing -  SilentCompilerDirectiveTags do not generate</sdesc>
<desc>during construction of the compiled template</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SilentCompilerDirectiveTag-&gt;generateNow">
<sdesc>Results in all components registered as children of the instance of this</sdesc>
<desc>component having their generate() methods called</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevSourceTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevSourceTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevSourceTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="SourceFileParser-&gt;SourceFileParser">
<sdesc>Constructs SourecFileParser. Uses readTemplateFile() to get the contents  of the template.</sdesc>
<desc></desc>
<type>SourceFileParser</type>
<methodparam>
<type>string</type>
<parameter>sourcefile</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SourceFileParser-&gt;buildFilterChain">
<sdesc>Creates Build a filter chain</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="SourceFileParser-&gt;changeToComponentParsingState">
<sdesc>Switch to component parsing state</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SourceFileParser-&gt;changeToLiteralParsingState">
<sdesc>Switch to literal parsing state</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SourceFileParser-&gt;parse">
<sdesc>Used to parse the source template.</sdesc>
<desc>Initially invoked by the CompileTemplate function,  the first component argument being a ComponentTree.  Uses the TagDictionary to spot compiler components</desc>
<type>void</type>
<methodparam>
<type>object compile</type>
<parameter>&amp;ComponentRoot</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StatsFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StatsFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="StatFilter-&gt;Perform">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StatFilterFinder-&gt;StatFilterFinder">
<sdesc></sdesc>
<desc></desc>
<type>StatFilterFinder</type>
</methodsynopsis>
<methodsynopsis function="StatFilterFinder-&gt;GetById">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StatFilterFinder-&gt;_InitStatic">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExcludeSuffixRule-&gt;ExcludeSuffixRule">
<sdesc>Constructs ExcludeSuffixRule</sdesc>
<desc></desc>
<type>ExcludeSuffixRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Suffix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ExcludeSuffixRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SuffixRule-&gt;SuffixRule">
<sdesc>Constructs SuffixRule</sdesc>
<desc></desc>
<type>SuffixRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>Suffix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SuffixRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableTag-&gt;HtmlTableTag">
<sdesc>Constructs HtmlTableCellTag</sdesc>
<desc></desc>
<type>HtmlTableTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlTableTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCaptionTag-&gt;HtmlTableCaptionTag">
<sdesc>Constructs HtmlTableCaptionTag</sdesc>
<desc></desc>
<type>HtmlTableCaptionTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlTableCaptionTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCaptionTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCaptionTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCellTag-&gt;HtmlTableCellTag">
<sdesc>Constructs HtmlTableCellTag</sdesc>
<desc></desc>
<type>HtmlTableCellTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlTableCellTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCellTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableCellTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableHeaderTag-&gt;HtmlTableHeaderTag">
<sdesc>Constructs HtmlTableCellTag</sdesc>
<desc></desc>
<type>HtmlTableHeaderTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlTableHeaderTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableHeaderTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableRowTag-&gt;HtmlTableRowTag">
<sdesc>Constructs HtmlTableCellTag</sdesc>
<desc></desc>
<type>HtmlTableRowTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlTableRowTag-&gt;generateContents">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableRowTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HtmlTableRowTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;TagDictionary">
<sdesc></sdesc>
<desc></desc>
<type>TagDictionary</type>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;findComponent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;getInstance">
<sdesc>Returns the global instance of the tag dictionary</sdesc>
<desc>Used so less direct references scattered around to global location</desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;getTagInfo">
<sdesc>Gets the tag information about a given tag.</sdesc>
<desc>Called from the SourceFileParser</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;registerTag">
<sdesc>Registers information about a compile time tag in the global tag dictionary.</sdesc>
<desc>This function is called from the respective compile time component class  file.</desc>
<type>void</type>
<methodparam>
<type>object instance</type>
<parameter>&amp;taginfo</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagDictionary-&gt;_registerTag">
<sdesc>Registers a tag in the dictionary, called from the global registerTag()  function.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>taginfo</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;TagInfo">
<sdesc></sdesc>
<desc></desc>
<type>TagInfo</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;load">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setCompilerAttributes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setDefaultLocation">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setKnownParent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Component-&gt;addChild">
<sdesc>Adds a reference to a child component to this component, using it's</sdesc>
<desc>ID attribute as the child array key</desc>
<type>void</type>
<methodparam>
<type>object child</type>
<parameter>&amp;Child</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>ServerId</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Component-&gt;findChild">
<sdesc>Returns a child component given it's ID.</sdesc>
<desc>Note this is a potentially expensive operation if dealing with  many components, as it calls the findChild method of children  based on alphanumeric order: strcasecmp(). Attempt to call it via  the nearest known component to the required child.</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>ServerId</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Component-&gt;findChildByClass">
<sdesc>Returns the first child component matching the supplied WACT_TEMPLATE</sdesc>
<desc>Component PHP class name</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Component-&gt;findParentByClass">
<sdesc>Recursively searches through parents of this component searching</sdesc>
<desc>for a given WACT_TEMPLATE component PHP class name</desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>class</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Component-&gt;getChild">
<sdesc>Same as find child, except raises error if child is not found</sdesc>
<desc></desc>
<type>object refernce</type>
<methodparam>
<type>string</type>
<parameter>ServerId</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Component-&gt;getServerId">
<sdesc>Returns the ID of the component, as defined in the template tags</sdesc>
<desc>ID attribute</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Component-&gt;render">
<sdesc>Outputs the component, rendering any child components as well  This method will only ever be called on components that support  Dynamic rendering.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Component-&gt;setChildDataSource">
<sdesc>set the data source of a child component, or raise an error  if the child is not found.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
<methodparam>
<type>DataSource</type>
<parameter>&amp;datasource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;ensureDataSourceAvailable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;getDataSource">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;registerDataSource">
<sdesc>Registers a DataSource with this component</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>&amp;datasource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DataSourceComponent-&gt;set">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;getAttribute">
<sdesc>Returns the value of an attribute, given it's name</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;getClientId">
<sdesc>Returns the value of the ID attribute</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;hasAttribute">
<sdesc>Check to see whether a named attribute exists</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;removeAttribute">
<sdesc>Remove an attribute from the list</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;renderAttributes">
<sdesc>Writes the contents of the attributes to the screen, using</sdesc>
<desc>htmlspecialchars to convert entities in values. Called by  a compiled template</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagComponent-&gt;setAttribute">
<sdesc>Sets an attribute</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>attrib</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Template-&gt;Template">
<sdesc>Constructs Template</sdesc>
<desc></desc>
<type>Template</type>
<methodparam>
<type>string</type>
<parameter>file</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Template-&gt;capture">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Template-&gt;display">
<sdesc>Outputs the template, calling the compiled templates render function</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Template-&gt;_dereference">
<sdesc>return a DataSource for the name property.  The property should  be an array or a DataSource object.</sdesc>
<desc>If the property is not found or is not an array or object, then  an empty DataSource will be returned.</desc>
<type>DataSource</type>
<methodparam>
<type>string</type>
<parameter>DataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="TextAreaTag-&gt;generateContents">
<sdesc>Ignore the compiler time contents and generate the contents at run time.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TextNode-&gt;TextNode">
<sdesc>Constructs TextNode</sdesc>
<desc></desc>
<type>TextNode</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextNode-&gt;append">
<sdesc>Appends a further string to the text node</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextNode-&gt;generate">
<sdesc>Writes the contents of the text node to the compiled template</sdesc>
<desc>using the writeHTML method</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TotalPagesProperty-&gt;TotalPagesProperty">
<sdesc></sdesc>
<desc></desc>
<type>TotalPagesProperty</type>
</methodsynopsis>
<methodsynopsis function="TotalPagesProperty-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevTreeTag-&gt;postGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevTreeTag-&gt;preGenerate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DevTreeTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;TreeBuilder">
<sdesc>Constructs TreeBuilder, setting up expression parsers</sdesc>
<desc></desc>
<type>TreeBuilder</type>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;addContent">
<sdesc>Handles the CDATA content within any tag</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>&amp;Locator</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;addProcessingInstructionNode">
<sdesc>Deals with XML processing instructions. PHP instructions are ignored.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>target</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>instruction</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;addTextNode">
<sdesc>Creates TextNodes for plain text</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;closeBranch">
<sdesc>Finishes a branch in the component tree, restoring control</sdesc>
<desc>to the ParentComponent</desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>hasClosingTag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;createAttributeExpression">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;createCompoundAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TreeBuilder-&gt;openBranch">
<sdesc>Prepares the tree to accept a new tag component</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>&amp;TagInfo</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attrs</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>isEmpty</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TrimFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TrimFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="UpperCaseFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UpperCaseFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="UrlFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UrlFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="UrlRule-&gt;UrlRule">
<sdesc>Constructs a DomainRule</sdesc>
<desc></desc>
<type>UrlRule</type>
<methodparam>
<type>string</type>
<parameter>fieldname</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>AllowableSchemes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="UrlRule-&gt;Check">
<sdesc>Performs validation of a single value</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Utf8EncodeFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Utf8EncodeFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="Validator-&gt;addRule">
<sdesc>Registers a Rule</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;Rule</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Validator-&gt;createErrorList">
<sdesc>Initalize Error List</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>0</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Validator-&gt;getErrorList">
<sdesc>Returns the ErrorList</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Validator-&gt;IsValid">
<sdesc>Whether the validation process was valid</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>FieldName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Validator-&gt;validate">
<sdesc>Perform the validation</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;DataSource</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="View-&gt;View">
<sdesc></sdesc>
<desc></desc>
<type>View</type>
<methodparam>
<type>string</type>
<parameter>TemplateFile</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="View-&gt;display">
<sdesc>Output the View  This method will not be called if this View is participating as  a sub view in a composite view.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="View-&gt;makeSubView">
<sdesc>Turn this View into a sub view in a composite view  The root component passed represents the portion of the  CompositeView's Template that this view will manage.</sdesc>
<desc>This component should be a dataspace component unless  special arrangements are made in subclasses of this  View class.</desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>&amp;RootComponent</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="View-&gt;prepare">
<sdesc>Template method provided as a place for subclasses to place  template manipulation logic.  It is not necessary to  call the parent prepare method when this method is overridden.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="View-&gt;setModel">
<sdesc>Transfer values from the dataspace into the Template</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object implementing</type>
<parameter>&amp;Model</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagContainerWidget-&gt;TagContainerWidget">
<sdesc>Constructs TagContainerWidget</sdesc>
<desc></desc>
<type>TagContainerWidget</type>
<methodparam>
<type>boolean</type>
<parameter>1</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagContainerWidget-&gt;render">
<sdesc>Outputs the tag, rendering any child components as well</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagWidget-&gt;TagWidget">
<sdesc>Constructs TagWidget</sdesc>
<desc></desc>
<type>TagWidget</type>
<methodparam>
<type>string</type>
<parameter>tag</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>closing</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagWidget-&gt;addChild">
<sdesc>Override parent method to prevent use of children</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagWidget-&gt;render">
<sdesc>Outputs the tag</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TextWidget-&gt;TextWidget">
<sdesc>Constructs TextComponent</sdesc>
<desc></desc>
<type>TextWidget</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TextWidget-&gt;addChild">
<sdesc>Override parent method to prevent use of children</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TextWidget-&gt;render">
<sdesc>Outputs the text Widget.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="WordWrapFilter-&gt;generateExpression">
<sdesc>Generate the code to read the data value at run time  Must generate only a valid PHP Expression.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="WordWrapFilter-&gt;getValue">
<sdesc>Return this value as a PHP value</sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;CheckNestingLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;generate">
<sdesc>By the time this is called we have already called generate</sdesc>
<desc>on all of our children, so does nothing</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;generateWrapperPostfix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;code</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;generateWrapperPrefix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;prepare">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWrapTag-&gt;preParse">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<entry/>
</manual>  	
