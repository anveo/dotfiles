<?xml version="1.0" encoding="iso-8859-1"?>
<manual>
	<methodsynopsis function="Action-&gt;createToken">
<sdesc>Generate a new transaction token, to be used for enforcing a single request  for a particular transaction</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;execute">
<sdesc>Process the specified HTTP request, and create the corresponding HTTP  response (or forward to another web component that will create it).</sdesc>
<desc>Return an  instance describing where and how  control should be forwarded, or null if the response has  already been completed.</desc>
<type></type>
<methodparam>
<type></type>
<parameter>mapping</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>form</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;getDataSource">
<sdesc>Return the default data source for the current module.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>request</type>
<parameter>&amp;request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;getLocale">
<sdesc>Return the user's currently selected Locale.  RequestUtils are used  just in case we are using the session to override the container supplied  locale.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;getResources">
<sdesc>Return the default message resources for the current module.</sdesc>
<desc></desc>
<type>MessageResources</type>
<methodparam>
<type>request</type>
<parameter>&amp;request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;getServlet">
<sdesc>Return the controller servlet instance to which we are attached.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Action-&gt;isCancelled">
<sdesc>Returns true if the current form's cancel button was  pressed.  Not that this processing is done in the controller servlet  and if this is true, the validation would have been skipped for any  associated .</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;isTokenValid">
<sdesc>Return true if there is a transaction token stored</sdesc>
<desc>in the user's current session, and the value submitted as a request  parameter with this action matches it.  Returns false  No session associated with this requestNo transaction token saved in the sessionNo transaction token included as a request parameterThe included transaction token value does not match the
     transaction token in the user's session</desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>reset</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;resetToken">
<sdesc>Reset the saved transaction token in the user's session.  This  indicates that transactional token checking will not be needed  on the next request that is submitted.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;saveErrors">
<sdesc>Save the specified error messages keys into the appropriate request  attribute. Otherwise, ensure that the request attribute is not created.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>errors</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;saveMessages">
<sdesc>Save the specified messages keys into the appropriate request attribute.</sdesc>
<desc>Otherwise, ensure that the request attribute is not created.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>messages</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;saveToken">
<sdesc>Save a new transaction token in the user's current session,  creating a new session if necessary.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;setLocale">
<sdesc>Tuck the locale away in the session, which is either the manual  override specified by the parameter or the one retrieved from  the container</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>locale</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Action-&gt;setServlet">
<sdesc>Set the controller servlet instance to which we are attached</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>servlet</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;addExceptionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;addForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;findExceptionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;findExceptionConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;findForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;findForwardConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getInclude">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getInput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getModuleConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;getType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;isUnknown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;isValidate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;removeExceptionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;removeForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setInclude">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setInput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setModuleConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setUnknown">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionConfig-&gt;setValidate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionForm-&gt;getServlet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionForm-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionForm-&gt;setServlet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionForm-&gt;validate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionFormBean-&gt;ActionFormBean">
<sdesc></sdesc>
<desc></desc>
<type>ActionFormBean</type>
</methodsynopsis>
<methodsynopsis function="ActionForward-&gt;ActionForward">
<sdesc></sdesc>
<desc></desc>
<type>ActionForward</type>
</methodsynopsis>
<methodsynopsis function="ActionMapping-&gt;findException">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ActionMapping-&gt;findForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMapping-&gt;findForwards">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMapping-&gt;getInputForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMessage-&gt;ActionMessage">
<sdesc></sdesc>
<desc></desc>
<type>ActionMessage</type>
</methodsynopsis>
<methodsynopsis function="ActionMessage-&gt;getKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMessage-&gt;getValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;add">
<sdesc>Add the message to the list of message under a given property name</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>property</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;clear">
<sdesc>Clear all the messages in all the lists</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;get">
<sdesc>Get the list of messages under a given property</sdesc>
<desc>or return the list of all the messages if the property  provided is null</desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;isEmpty">
<sdesc>Determine if there are any messages as all</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;properties">
<sdesc>Return a list of the properties which are in use</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="ActionMessages-&gt;size">
<sdesc>Determine either the size of all the messages</sdesc>
<desc>or the number of messages under a given property</desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;destroy">
<sdesc>Gracefully shut down this controller servlet, releasing any resources  that were allocated at initialization.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;destroyConfigDigester">
<sdesc>Gracefully release any configDigester instance that we have created.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;doGet">
<sdesc>Process an HTTP &quot;GET&quot; request, which just pushes to the generic  method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;doPost">
<sdesc>Process an HTTP &quot;POST&quot; request, which just pushes to the generic  method.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;getModuleConfig">
<sdesc>Return the module configuration object for the currently selected  module or get the default module if that fails.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>request</type>
<parameter>&amp;request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;getRequestProcessor">
<sdesc>Look up and return the  responsible for the  specified module, creating a new one if necessary.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>config
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;init">
<sdesc>Initialize this servlet. Most processing is delegated to support methods</sdesc>
<desc>for easy extension.  The initOther() method from Struts' ActionServlet  is skipped since we have enabled a channel to the initialization  parameters from the web.xml file in this servlet implementation, freeing  us from having to reparse the file.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initConfigDigester">
<sdesc>Create (if needed) and return a new Digester instance that has been</sdesc>
<desc>initialized to process Studs module configuraiton files and  configure a corresponding ModuleConfig object (which must be  pushed on to the evaluation stack before parsing begins).&lt;/p&gt;</desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initModuleConfig">
<sdesc>Initialize the application configuration information for the specified module.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>paths</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initModuleDataSources">
<sdesc>Initialize the data sources for the specified module.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>moduleConfig</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initModuleMessageResources">
<sdesc>Initialize the application MessageResources for the specified  module.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>moduleConfig</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initModulePrefixes">
<sdesc>Saves an array of module prefixes in the servlet context which does not  include the default module</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>prefixes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;initServlet">
<sdesc>Initialize our servlet with any parameters that were set.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;isValidating">
<sdesc>Check the status of the validating initialization parameter.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;parseModuleConfigFile">
<sdesc>Parse one module config file</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type></type>
<parameter>digester</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ActionServlet-&gt;process">
<sdesc>Perform the standard request processing for this request, and create  the corresponding response.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;ApplicationContext">
<sdesc></sdesc>
<desc></desc>
<type>ApplicationContext</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;clearAttributes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getAttributeNames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getInitParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getInitParameterNames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getMajorVersion">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getMimeType">
<sdesc>Return the MIME type of the specified file, or null if  the MIME type cannot be determined.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>file</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getMinorVersion">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getRealPath">
<sdesc>Return the real path for a given virtual path</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getRequestDispatcher">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getResource">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getResourceAsStream">
<sdesc>This obviously gets crazy in the catalina version, but basically we are just  prepending the absolute base path of our servlet context and turning that into a stream.</sdesc>
<desc>It is a requirement that this path begin with a / specifying that it refers to the  root of the servlet context.  If the path is not found or does not begin with /  null is returned.</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getResourcePaths">
<sdesc>Returns a directory-like listing of all the paths to resources within  the web application whose longest sub-path matches the supplied path  argument. The returned paths are all relative to the root of the web  application and have a leading '/'.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getServerInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;getServletContextName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;mergeParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;removeAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationContext-&gt;setAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationDispatcher-&gt;ApplicationDispatcher">
<sdesc></sdesc>
<desc></desc>
<type>ApplicationDispatcher</type>
</methodsynopsis>
<methodsynopsis function="ApplicationDispatcher-&gt;doForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationDispatcher-&gt;doInclude">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ApplicationDispatcher-&gt;invoke">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ArrayIterator-&gt;ArrayIterator">
<sdesc>Setup an iterator object for an native PHP array.</sdesc>
<desc></desc>
<type>ArrayIterator</type>
<methodparam>
<type>array</type>
<parameter>array</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ArrayIterator-&gt;hasNext">
<sdesc></sdesc>
<desc></desc>
<type>bool</type>
</methodsynopsis>
<methodsynopsis function="ArrayIterator-&gt;next">
<sdesc></sdesc>
<desc></desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="ArrayIterator-&gt;remove">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;assertEquals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;assertFalse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;assertNotNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;assertNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;assertTrue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;fail">
<sdesc>Fails a test with a given message.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Assert-&gt;failNotEquals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AssertionFailedException-&gt;AssertionFailedException">
<sdesc></sdesc>
<desc></desc>
<type>AssertionFailedException</type>
</methodsynopsis>
<methodsynopsis function="BaseInputTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInputTag-&gt;renderTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInputTag-&gt;setProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInputTag-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;renderMetaAttributes">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;renderStyleAttributes">
<sdesc>Prepares the style attributes for inclusion in the component's XHTML tag.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setDisabled">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setStyle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setStyleClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setStyleId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setTabindex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BaseInteractiveTag-&gt;setTitle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;BasicDataSource">
<sdesc></sdesc>
<desc></desc>
<type>BasicDataSource</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;getConnection">
<sdesc>NOTE: we are cheating here a little since we aren't using a connection pool.  Instead  of creating a datasource and using it to get the connection, the datasource sets the  connection as a local property and we just return that...</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;getDriverClassName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;getPassword">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;getUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;getUsername">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;initializeConnection">
<sdesc>Create (if necessary) and return the internal data source we are  using to manage our connections.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;setDriverClassName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;setPassword">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;setUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BasicDataSource-&gt;setUsername">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanPropertySetterRule-&gt;BeanPropertySetterRule">
<sdesc></sdesc>
<desc></desc>
<type>BeanPropertySetterRule</type>
</methodsynopsis>
<methodsynopsis function="BeanPropertySetterRule-&gt;body">
<sdesc>Process the body of this element, which contains</sdesc>
<desc>the value used to set the bean property on the object</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanPropertySetterRule-&gt;end">
<sdesc>Process the end of the element, which is where the  actually method call on the bean will occur.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanPropertySetterRule-&gt;finish">
<sdesc>Clean up after parsing is complete.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;cloneBean">
<sdesc>Clone a bean based on the available property getters and setters</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>bean</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;copyProperties">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;copyProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;describe">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;getIndexedProperty">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;getMappedProperty">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;getNestedProperty">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;getSimpleProperty">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;populate">
<sdesc>Populate the properties of the specified bean, based on  the specified name/value pairs.  This method uses reflection  to identify corresponding &quot;property setter&quot; method names.</sdesc>
<desc>This method is specifically designed for extracting string  parameters from an HTTP Request.  For general property copying  use the  method instead.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BeanUtils-&gt;setProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BodyTagSupport-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BodyTagSupport-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="BodyTagSupport-&gt;setBodyContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallMethodRule-&gt;CallMethodRule">
<sdesc></sdesc>
<desc></desc>
<type>CallMethodRule</type>
</methodsynopsis>
<methodsynopsis function="CallMethodRule-&gt;begin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallMethodRule-&gt;body">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallMethodRule-&gt;end">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallMethodRule-&gt;finish">
<sdesc>Clean up after parsing is complete.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallParamRule-&gt;CallParamRule">
<sdesc>Construct a &quot;call parameter&quot; rule  If the attributeName is null, it will take it from the body if the stackIndex is  false or from the stack using the stackIndex value.  If the attributeName is not  null, it will use the value of the attribute.</sdesc>
<desc></desc>
<type>CallParamRule</type>
</methodsynopsis>
<methodsynopsis function="CallParamRule-&gt;begin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallParamRule-&gt;body">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CallParamRule-&gt;end">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ClassNotFoundException-&gt;ClassNotFoundException">
<sdesc></sdesc>
<desc></desc>
<type>ClassNotFoundException</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;Clazz">
<sdesc>Construct a new  instance for the fully qualified  class name.</sdesc>
<desc></desc>
<type>Clazz</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;forName">
<sdesc>Returns the Class object associated with the class or interface with the  given string name.  When this method is called, an import will be attempted  on the requested class to determine if it exists, regardless of the initialize  flag.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>qName</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>initialize</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getDeclaredMethods">
<sdesc>Return an array of all public methods for this class (but not  any of the inherited methods).</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getName">
<sdesc>Get the fully qualified name of this class, including the package</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getPackage">
<sdesc>Gets the package for this class.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getResource">
<sdesc></sdesc>
<desc></desc>
<type>{@link</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getResourceAsStream">
<sdesc>NOTE: technically the rules for searching should be as follows:</sdesc>
<desc>if begins with a '/' search with no include paths (assume root directory of system)if begins without a '/' add package name (replacing . with /) and search includesbootstrap loader will not append package name and find in include path do not use \ in the path name to be loaded since this is not a real path but a naming schema
    either / or . is acceptable, but it must begin with / to be considered absolute</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getShortName">
<sdesc>Return the PHP4 name of this class, which excludes the package</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;getSuperclass">
<sdesc>Returns the  representing the superclass of the entity  represented by the underlying class.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;isAssignableFrom">
<sdesc>Determine if the parent class provided (either string or class object) is  an ancestor of our class.  This method is similar to is_a() except that  it acts on the local class object and it can take either a string or an object  as an argument.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>parent</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Clazz-&gt;newInstance">
<sdesc>Create a new instance of this class with the default constructor if  one has not already been created</sdesc>
<desc></desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;Connection">
<sdesc></sdesc>
<desc></desc>
<type>Connection</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;close">
<sdesc>Releases this Connection object's database and resources immediately  instead of waiting for them to be automatically released.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;connect">
<sdesc>Establish a connection to the database.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;createStatement">
<sdesc>Creates a Statement object for sending SQL statements to the database.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;isClosed">
<sdesc>Check to see if the connection to the database has been closed</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="Connection-&gt;prepareStatement">
<sdesc>Creates a PreparedStatement object for sending parameterized SQL  statements to the database.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>sql
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ConsoleLogAppender-&gt;append">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ContextConfig-&gt;ContextConfig">
<sdesc></sdesc>
<desc></desc>
<type>ContextConfig</type>
</methodsynopsis>
<methodsynopsis function="ContextConfig-&gt;applicationConfig">
<sdesc>Initialized the configuration for this context by parsing the web.xml file.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ContextConfig-&gt;createWebDigester">
<sdesc>Create and return a new Digester instance that has been initialized to  process the web-app configuration file for a context.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ContextConfig-&gt;getContext">
<sdesc>Return the underlying StandardContext instance that has been  configured from the web.xml file parse.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="ContextConfig-&gt;start">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getContentType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getForwardPattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getLocale">
<sdesc></sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getMaxFileSize">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getProcessorClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;getTempDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;isInputForward">
<sdesc></sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;isNocache">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setContextType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setForwardPattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setInputForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setLocale">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setMaxFileSize">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setNocache">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setProcessorClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ControllerConfig-&gt;setTempDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ConvertUtils-&gt;convert">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ConvertUtils-&gt;_convertBoolean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ConvertUtils-&gt;_convertString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;Cookie">
<sdesc></sdesc>
<desc></desc>
<type>Cookie</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;getDomain">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;getMaxAge">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;getPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;getValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;isSecure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;setDomain">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;setPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;setSecure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Cookie-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;CoreCatchTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreCatchTag</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreCatchTag-&gt;setVar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;CoreChooseTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreChooseTag</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;acquireExclusivity">
<sdesc>This method will determine where we are in the conditional statement, update  that position and return the conditional operator to be used.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>type</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;conditionSatisfied">
<sdesc>Check to see if the condition in this choose group has been previously satisfied</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;markConditionSatisfied">
<sdesc>Assign the condition as being satisified for this group</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;markOtherwiseConditionUsed">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;markWhenConditionUsed">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;otherwiseConditionUsed">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreChooseTag-&gt;whenConditionUsed">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;CoreForEachTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreForEachTag</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;discard">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;doAfterBody">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;exposeVariables">
<sdesc>Place the current item into the specified scope as well as the loop  status for this iterator if appropriate variable names have been  provided.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>first</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setBegin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setEnd">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setItems">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setStep">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setVar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;setVarStatus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreForEachTag-&gt;unexposeVariables">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;CoreIfTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreIfTag</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreIfTag-&gt;setTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;CoreImportTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreImportTag</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreImportTag-&gt;setUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOtherwiseTag-&gt;condition">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOtherwiseTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;CoreOutTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreOutTag</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;getDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;getEscapeXml">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;getValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;setDefault">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;setEscapeXml">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>escapeXml</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="CoreOutTag-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;CoreRedirectTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreRedirectTag</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;doRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;isAbsoluteUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;resolveUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;setContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRedirectTag-&gt;setUrl">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;CoreRemoveTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreRemoveTag</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;setScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreRemoveTag-&gt;setVar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;CoreSetTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreSetTag</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;setScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreSetTag-&gt;setVar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;CoreWhenTag">
<sdesc></sdesc>
<desc></desc>
<type>CoreWhenTag</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;condition">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="CoreWhenTag-&gt;setTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSource-&gt;getConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;DataSourceConfig">
<sdesc></sdesc>
<desc></desc>
<type>DataSourceConfig</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;addProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;freeze">
<sdesc>Freeze the configuration of this data source.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;getKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;getProperties">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;getType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;setKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DataSourceConfig-&gt;setType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;allowListings">
<sdesc>Return the initialization setting which specifies if a directory  listing is permitted (if a directory)</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;destroy">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;doGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;doPost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;getRelativePath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;getResourcePath">
<sdesc>Give a relative resource, return the absolute path</sdesc>
<desc>on the filesystem to the given resource</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;getURL">
<sdesc>Prefix the context path, our servlet emulator and append the request  parameters to the redirection string before calling sendRedirect.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>$request</type>
<parameter>&amp;request</parameter>
</methodparam>
<methodparam>
<type>$redirectPath</type>
<parameter>redirectPath</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;output">
<sdesc>Read the contents of the file to the output context, which  in the case of PHP is equivalent to just dumping it.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>file</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;renderListing">
<sdesc>Generate an HTML directory list showing the contents of the directory matching  the path following the servlet pattern.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;renderSize">
<sdesc>Given a file length in bytes, convert those bytes to a human readable  format in kb.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>int</type>
<parameter>size</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;resourceExists">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;serveResource">
<sdesc>This method is the main workhorse.  If the request is for a directory,</sdesc>
<desc>the first step is to look for welcome files in the configuration and then  check whether they exist.  If that fails, and directory listings are on, a  directory list is sent in HTML format.  If the request is for a file,  the file is served up with the appropriate mime-type.  Any other combination  will return a 404 error.NOTE: when listing directories, the servlet path (which is the part of the URL  after the context path that matched us to DefaultServlet) is thrown out when  looking for the directory to list.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;useWelcomeFiles">
<sdesc>Return the initialization setting which specifies if the welcome files  will be utilized (if present)</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="DefaultServlet-&gt;_checkWelcomeFiles">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DetachedResult-&gt;DetachedResult">
<sdesc></sdesc>
<desc></desc>
<type>DetachedResult</type>
</methodsynopsis>
<methodsynopsis function="DetachedResult-&gt;getRowCount">
<sdesc>Return the number of rows processed by this result.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="DetachedResult-&gt;getRows">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DetachedResult-&gt;getRowsByIndex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DetachedResult-&gt;toResult">
<sdesc>The static method toResult converts a ResultSet  into a Result, which is a convenience interface  to quickly get desired information from a sql  result, though more memory intensive.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;Digester">
<sdesc>NOTE: can't pass by reference here and have it be optional unless we do the array trick</sdesc>
<desc></desc>
<type>Digester</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addBeanPropertySetter">
<sdesc>Add a &quot;bean property setter&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>propertyName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addCallMethod">
<sdesc>Add an &quot;call method&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>methodName</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>paramCount</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addCallParam">
<sdesc>Add a &quot;call parameter&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>paramIndex</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>attributeName</parameter>
</methodparam>
<methodparam>
<type>int</type>
<parameter>stackIndex</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addObjectCreate">
<sdesc>Add an &quot;object create&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>className</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>attributeName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addRule">
<sdesc>Register a new Rule matching the specified pattern.  This method sets  the  property on the rule.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>rule</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addRuleSet">
<sdesc>Register a set of Rule instances defined in a RuleSet.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>ruleSet</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addSetNext">
<sdesc>Add a &quot;set next&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>methodName</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>paramType</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addSetProperties">
<sdesc>Add a &quot;set properties&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attributeNames</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>propertyNames</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;addSetProperty">
<sdesc>Add a &quot;set property&quot; rule for the specified parameters.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;characters">
<sdesc>Process notification of character data received from the body of an XML  element.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>buffer</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;checkValid">
<sdesc>TODO: check each registered DTD, not just one</sdesc>
<desc>NOTE: This method is part of a quick hack to get some feedback in validating since  PHP's functions for validating XML documents are super weak.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;clear">
<sdesc>Clear the current contents of the object stack.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;configure">
<sdesc>Provide a hook for lazy configuration of this Digester instance.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;endDocument">
<sdesc>Process notification of the end of the document being reached.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;endElement">
<sdesc>Process notification of the end of an XML element being reached.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>localName</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>qName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;endPrefixMapping">
<sdesc>Process notification that a namespace prefix is going out of scope.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;findNamespaceURI">
<sdesc>Return the currently mapped namespace URI for the specified prefix, if  any; otherwise return null.  These mappings come and go  dynamically as the document is parsed.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getCount">
<sdesc>Return the current depth of the element stack.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getCurrentElementName">
<sdesc>Return the name of the XML element that is currently being processed.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getHandler">
<sdesc>Get the SAX handler for this Digester.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getMatch">
<sdesc>Return the current rule match path.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getNamespaceAware">
<sdesc>Return the &quot;namespace aware&quot; flag for parsers we create.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getParser">
<sdesc>Return the SaxParser we will use to parse the input reader.  If there is  a problem creating the parser, return null.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getProperty">
<sdesc>Return the current value of the specified property for the underlying   implementation.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>property</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getRoot">
<sdesc>This method allows you to access the root object that has been created  after parsing.</sdesc>
<desc></desc>
<type>object The</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getRuleNamespaceURI">
<sdesc>Return the namespace URI that will be applied to all subsequently added   objects.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getRules">
<sdesc>Return the Rules implementation object containing our rules collection  and associated matching policy.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;getValidating">
<sdesc>Return the validating parser flag.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;ignorableWhitespace">
<sdesc>Process notification of ignorable whitespace received from the body of an XML element.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;parse">
<sdesc>Parse the content of the specified input reader using this Digester.</sdesc>
<desc>Returns the root element from the object stack (if any).</desc>
<type>object</type>
<methodparam>
<type></type>
<parameter>input</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;peek">
<sdesc>Return the top object on the stack without removing it.  If there are no  objects on the stack, return null.</sdesc>
<desc></desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;peekParams">
<sdesc>Return the top object on the parameters stack without removing it.  If  there are no objects on the stack, return null.</sdesc>
<desc>The parameters stack is used to store   parameters.</desc>
<type>object</type>
<methodparam>
<type>int</type>
<parameter>n</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;pop">
<sdesc>Pop the top object off of the stack, and return it.  If there are no  objects on the stack, return null.</sdesc>
<desc></desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;popParams">
<sdesc>Pop the top object off of the parameters stack, and return it.  If there  are no objects on the stack, return null.</sdesc>
<desc>The parameters stack is used to store   parameters.</desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;processingInstruction">
<sdesc>Process notification of a processing instruction that was encountered.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>target</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;push">
<sdesc>Push a new object onto the top of the object stack.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>object</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;pushParams">
<sdesc>Push a new object onto the top of the parameters stack.</sdesc>
<desc>The parameters stack is used to store  parameters.</desc>
<type>void</type>
<methodparam>
<type>object</type>
<parameter>object</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;register">
<sdesc>Register a DTD to validate against when parsing this XML document.</sdesc>
<desc>NOTE: This method is part of a quick hack to get some feedback in validating since  PHP's functions for validating XML documents are super weak.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setHandler">
<sdesc>Set the SAX handler for this Digester.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>&amp;handler</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setNamespaceAware">
<sdesc>Set the &quot;namespace aware&quot; flag for parsers we create.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>namespaceAware</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setProperty">
<sdesc>Set the current value of the specified property for the underlying  XMLReader implementation.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>property</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setRuleNamespaceURI">
<sdesc>Set the namespace URI that will be applied to all subsequently added   objects.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>ruleNamespaceURI</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setRules">
<sdesc>Set the Rules implementation object containing our rules collection and associated matching policy.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>rules</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;setValidating">
<sdesc>Set the validating parser flag.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>validating</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;startDocument">
<sdesc>Process notification of the beginning of the document being reached.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;startElement">
<sdesc>Process notification of the start of an XML element being reached.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>localName</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>qName</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Digester-&gt;startPrefixMapping">
<sdesc>Process notification that a namespace prefix is coming in to scope.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DispatchAction-&gt;execute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DispatchAction-&gt;unspecified">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Driver-&gt;Driver">
<sdesc></sdesc>
<desc></desc>
<type>Driver</type>
</methodsynopsis>
<methodsynopsis function="Driver-&gt;acceptsURL">
<sdesc>Retrieves whether the driver thinks that it can open a connection to the  given URL.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>url
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Driver-&gt;connect">
<sdesc>Attempts to make a database connection to the given URL. The driver should  return &quot;null&quot; if it realizes it is the wrong kind of driver to connect to  the given URL. This will be common, as when the  is asked  to connect to a given URL it passes the URL to each loaded driver in turn.</sdesc>
<desc>The driver should throw an SQLException if it is the right driver to connect  to the given URL but has trouble connecting to the database.The java.util.Properties argument can be used to pass arbitrary string  tag/value pairs as connection arguments.</desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>info
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Driver-&gt;parseURL">
<sdesc>Split the url into properties for the</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>info
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DriverManager-&gt;getConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="DriverManager-&gt;getDriver">
<sdesc>Attempts to locate a driver that understands the given URL.  Iterate  through the drivers available until a match is found based on the   method acceptsURL().</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>url
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="DriverManager-&gt;getInstance">
<sdesc>Return a Singleton instance of this class.  This is used in place  of having a static  property which PHP  does not support.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="DriverManager-&gt;registerDriver">
<sdesc>Registers the given driver with the .</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELEvaluator-&gt;evaluate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELEvaluator-&gt;getLog">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELEvaluator-&gt;parseExpressionString">
<sdesc>Gets the parsed version of the expression string so that it  can be evaluated in parts.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>expressionString
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ELExpression-&gt;ELExpression">
<sdesc></sdesc>
<desc></desc>
<type>ELExpression</type>
</methodsynopsis>
<methodsynopsis function="ELExpression-&gt;evaluate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELExpression-&gt;getLog">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELExpressionString-&gt;ELExpressionString">
<sdesc></sdesc>
<desc></desc>
<type>ELExpressionString</type>
</methodsynopsis>
<methodsynopsis function="ELExpressionString-&gt;evaluate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELExpressionString-&gt;getLog">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ELTag-&gt;evaluateExpressions">
<sdesc>Resolve and EL expressions in attributes and assign values to local variables  which will be accessible through accessor methods to inherited classes.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;Exception">
<sdesc>Constructs a new Throwable with the specified error message.</sdesc>
<desc>Also, the method fillInStackTrace() is called for this object.</desc>
<type>Exception</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>cause</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;fillInStackTrace">
<sdesc>Fills in the execution stack trace. This method records within this  Exception object information about the current state of the stack frames  for the current thread.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;getCause">
<sdesc>Returns the cause of this throwable object, or null if no cause exists</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;getMessage">
<sdesc>Returns the error message string of this throwable object.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;getStackTrace">
<sdesc>Prints this Throwable and its backtrace to the standard output.</sdesc>
<desc>The first line of output contains the result of the toString() method  for this object. Remaining lines represent data previously recorded by  the method fillInStackTrace().</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;printStackTrace">
<sdesc>Prints this Throwable and its backtrace to the standard output.</sdesc>
<desc>The first line of output contains the result of the toString() method  for this object. Remaining lines represent data previously recorded by  the method fillInStackTrace().</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Exception-&gt;toString">
<sdesc>Returns a short description of this exception.</sdesc>
<desc>If this Exception object was created with an error message string, then  the result is the concatenation of three strings: The name of the actual class of this object&quot;: &quot; (a colon and a space)The result of the getMessage() method for this object If this Exception object was created with no error message string, then  the name of the actual class of this object is returned.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;getHandler">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;getKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;getPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;getScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;getType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;setHandler">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;setKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;setPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;setScope">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionConfig-&gt;setType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionHandler-&gt;execute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ExceptionHandler-&gt;storeException">
<sdesc>Default implementation for storing an ActionMessage generated by an Exception as an error.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;File">
<sdesc></sdesc>
<desc></desc>
<type>File</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;delete">
<sdesc>Deletes the file or directory denoted by this abstract pathname.</sdesc>
<desc>Only try to delete the file or directory if it exists.  NOTE: If this pathname denotes a directory, then the directory must be empty  in order to be deleted.</desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;exists">
<sdesc>Tests whether the file denoted by this abstract pathname exists.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;getParent">
<sdesc>Returns the pathname string of this abstract pathname's parent, or null  if this pathname does not name a parent directory.</sdesc>
<desc>The parent of an abstract pathname consists of the pathname's prefix, if any,  and each name in the pathname's name sequence except for the last. If the  name sequence is empty then the pathname does not name a parent directory.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;getParentFile">
<sdesc>Returns the abstract pathname of this abstract pathname's parent, or  null if this pathname does not name a parent directory.</sdesc>
<desc>The parent of an abstract pathname consists of the pathname's prefix, if  any, and each name in the pathname's name sequence except for the last.  If the name sequence is empty then the pathname does not name a parent  directory.</desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="File-&gt;getPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;isDirectory">
<sdesc>Tests whether the file denoted by this abstract pathname is a directory.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;isFile">
<sdesc>Tests whether the file denoted by this abstract pathname is a normal  file.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;length">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;listFileNames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="File-&gt;mkdir">
<sdesc>Creates the directory named by this abstract pathname.  The pathname</sdesc>
<desc>is assumed to represent a directory and will be treated as such.  If  the directory cannot be created because of an invalid request (the parent  directory doesn't exist or a file is in the way), false will  be returned.  If the the directory cannot be created because of a permissions  error, then a  will be thrown.  Otherwise, the  directory will be created successfully and true will be returned.</desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>perms</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="File-&gt;mkdirs">
<sdesc>Creates the directory named by this abstract pathname, including any</sdesc>
<desc>necessary but nonexistent parent directories. Note that if this  operation fails it may have succeeded in creating some of the necessary  parent directories.  Using this function makes the assumption that the  abstract pathname is a directory.</desc>
<type>boolean</type>
<methodparam>
<type>mixed</type>
<parameter>perms</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="File-&gt;toString">
<sdesc>Returns the pathname string of this abstract pathname.</sdesc>
<desc>The output of this method is equivalent to the return value of  the  method.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="FileLock-&gt;FileLock">
<sdesc></sdesc>
<desc></desc>
<type>FileLock</type>
</methodsynopsis>
<methodsynopsis function="FileLock-&gt;isBlocking">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLock-&gt;isShared">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLock-&gt;isValid">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLock-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLogAppender-&gt;append">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLogAppender-&gt;closeFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLogAppender-&gt;getFileWriter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileLogAppender-&gt;setFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileNotFoundException-&gt;FileNotFoundException">
<sdesc>Constructs a FileNotFoundException with the specified detail message.</sdesc>
<desc></desc>
<type>FileNotFoundException</type>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;FileReader">
<sdesc></sdesc>
<desc></desc>
<type>FileReader</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;close">
<sdesc>Closes this file input stream and releases any system resources associated with the stream.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;lock">
<sdesc>Lock the file using a shared lock (since the operation is read)</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>shared</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>blocking</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;mark">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;read">
<sdesc>Reads up to len bytes of data from the file pointer into a string</sdesc>
<desc>reference An attempt is made to read as many as len bytes, but a smaller  number may be read, possibly zero (if end of file). The number of bytes  actually read is returned as an integer.  The offset is the position in  the buffer string which the characters should be stored.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;readChar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;ready">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileReader-&gt;skip">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileWriter-&gt;FileWriter">
<sdesc></sdesc>
<desc></desc>
<type>FileWriter</type>
</methodsynopsis>
<methodsynopsis function="FileWriter-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileWriter-&gt;lock">
<sdesc>Lock the file using an exclusive lock (since the operation is write)</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>blocking</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="FileWriter-&gt;ready">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FileWriter-&gt;write">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;FormatFormatDateTag">
<sdesc></sdesc>
<desc></desc>
<type>FormatFormatDateTag</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;setDateStyle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;setPattern">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;setTimeStyle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;setType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatFormatDateTag-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;FormatMessageTag">
<sdesc></sdesc>
<desc></desc>
<type>FormatMessageTag</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setArg0">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setArg1">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setArg2">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setArg3">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setArg4">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setBundle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormatMessageTag-&gt;setLocale">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;FormBeanConfig">
<sdesc></sdesc>
<desc></desc>
<type>FormBeanConfig</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;getModuleConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;getType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;setModuleConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="FormBeanConfig-&gt;setType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;ForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>ForwardConfig</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;getPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;isContextRelative">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;isRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;setContextRelative">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;setPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardConfig-&gt;setRedirect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardSelectAction-&gt;execute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardSelectAction-&gt;setAllowedForwards">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ForwardSelectAction-&gt;setDefaultForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;Hashtable">
<sdesc></sdesc>
<desc></desc>
<type>Hashtable</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;clear">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;contains">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;containsKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;elements">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;get">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;isEmpty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;keys">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;put">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;remove">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Hashtable-&gt;size">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;HtmlFormTag">
<sdesc></sdesc>
<desc></desc>
<type>HtmlFormTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;initFormBean">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;lookup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;renderEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;renderStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;renderToken">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;setAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlFormTag-&gt;setMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlHiddenTag-&gt;renderTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;HtmlLinkTag">
<sdesc></sdesc>
<desc></desc>
<type>HtmlLinkTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;resolveUrl">
<sdesc>Based on the URL-related attributes specified in the taglib,  determine the URL that will be used for this tag and return  it as a string.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setAnchor">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setHref">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setPage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlLinkTag-&gt;setTarget">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;HtmlMessagesTag">
<sdesc></sdesc>
<desc></desc>
<type>HtmlMessagesTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;doAfterBody">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;evaluateExpressions">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;processNextMessage">
<sdesc></sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setBundle">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setLocale">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlMessagesTag-&gt;setProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlRewriteTag-&gt;HtmlRewriteTag">
<sdesc></sdesc>
<desc></desc>
<type>HtmlRewriteTag</type>
</methodsynopsis>
<methodsynopsis function="HtmlRewriteTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlRewriteTag-&gt;doStartTag">
<sdesc>Unlink the parent HtmlLinkTag, this tag is only  interested in the URL, so just resolve it and go.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlSubmitTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlSubmitTag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlSubmitTag-&gt;renderTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlSubmitTag-&gt;setValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HtmlTextTag-&gt;renderTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;HttpProcessor">
<sdesc></sdesc>
<desc></desc>
<type>HttpProcessor</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;fatalErrorWatchdog">
<sdesc>This watchdog serves as a top-level buffer event handler.  PHP outputs FATAL errors  directly to the browser, which escape the exception handling mechanism provided by Horizon.</sdesc>
<desc>Therefore, a buffer is used to capture these messages and convert them into formal exception  reports.  Once this method is called, the execution of the PHP script is basically finished,  waiting only for the return value of this method to determine what to display.</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>buffer</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;handleException">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;parseConnection">
<sdesc>Record the connection parameters related to this request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>input</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;parseHeaders">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;parseLanguageAccept">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;parseRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;report">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpProcessor-&gt;run">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;destroy">
<sdesc>Called by the servlet container to indicate to a servlet that the  servlet is being taken out of service.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;doGet">
<sdesc>Called by the server (via the  method) to allow a  servlet to handle a GET request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;doPost">
<sdesc>Called by the server (via the  method) to allow a  servlet to handle a POST request.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getInitParameter">
<sdesc>Returns a  containing the value of the named  initialization parameter, or null if the parameter does not  exist.</sdesc>
<desc>This method is supplied for convenience. It gets the value of the  named parameter from the servlet's ServletConfig object.</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getInitParameterNames">
<sdesc>Returns the names of the servlet's initialization parameters as an array</sdesc>
<desc>This method is supplied for convenience. It gets the parameter names  from the servlet's ServletConfig object.</desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getServletConfig">
<sdesc>Returns this servlet's ServletConfig object.</sdesc>
<desc>It is necessary to call this function since the data member is private.Please be careful with this object.  PHP does not have the ability to return  an interface and the underlying config object has a lot more methods available  then should be publically seen.  Follow the ServletConfig interface  when accessing these methods.</desc>
<type>ServletConfig</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getServletContext">
<sdesc>Returns a reference to the ServletContext in which this servlet is running.</sdesc>
<desc>This method is supplied for convenience. It gets the context from the  servlet's ServletConfig object.</desc>
<type>ServletContext</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getServletMapping">
<sdesc>Return (the first) mapping used to filter a web request to this servlet.</sdesc>
<desc>This information can be used to create a link to another url which will  be directed to this servlet.  The format is the same as the url-pattern  used in the web.xml file for the &lt;servlet&gt; tag.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;getServletName">
<sdesc>Returns the name of this servlet instance.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;init">
<sdesc>For convenience the methods called by the inherited servlet and  the original servlet have been split so that no call to parent::init($config)  is required.  Hence this can be implemented with no arguments.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;initConfig">
<sdesc>Called by the servlet container to indicate to a servlet that the servlet is being placed into service.</sdesc>
<desc>This implementation stores the ServletConfig object it  receives from the servlet container for later use.  When overriding this  method, call super.init($config)!!!</desc>
<type>void</type>
<methodparam>
<type>ServletConfig</type>
<parameter>config</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServlet-&gt;service">
<sdesc>Receives standard HTTP requests from the public   method and dispatches them to the doXXX methods  defined in this class.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;HttpServletRequest">
<sdesc></sdesc>
<desc></desc>
<type>HttpServletRequest</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;addLocale">
<sdesc>Add a Locale to the set of preferred Locales for this Request.  The  first added Locale will be the first one returned by getLocales().</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>locale</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;generateControllerPath">
<sdesc>The controller path is that base url that routes requests to the stratus  servlet container.  The context-param controlAllResources is checked to see if  apache is handling the serving of these resources (no passthru to the  container) or the DefaultServlet is going to serve them up.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>$contextPath</type>
<parameter>contextPath</parameter>
</methodparam>
<methodparam>
<type>$requiresDispatch</type>
<parameter>requiresDispatch</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getAttribute">
<sdesc>Get the value of the attribute.  If it doesn't exist, null will be returned.</sdesc>
<desc></desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getContextPath">
<sdesc>The path prefix of the current servlet.  If this context is the</sdesc>
<desc>&quot;default&quot; context rooted at the base of the web server's URL namespace,  this path will be an empty string. Otherwise, if the context is not  rooted at the root of the server's namespace, the path starts with a'/'  character but does not end with a'/' character.NOTE: Since PHP has to inject the controller file (index.php) after the  context, this method takes an optional flag which, when true, will append  the controller script.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getCookies">
<sdesc>Return the cookies as an array</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getHeader">
<sdesc>Returns the value of the specified request header. If the request did  not include a header of the specified name, this method returns null.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getInput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getLocale">
<sdesc>Get the accepting locale for the client.  If no locale is  sent, use the default from the server</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getLocales">
<sdesc>Return the set of preferred Locales that the client will accept content  in, based on the values for any Accept-Language headers  that were encountered.  If the request did not specify a preferred  language, the server's default Locale is returned.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getMethod">
<sdesc>Return the method name of the http request.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getParameter">
<sdesc>Get the value of the parameter.  If it doesn't exist, null will be returned.</sdesc>
<desc>If it exists but is empty, it will be a string.</desc>
<type>mixed</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getParameterMap">
<sdesc>Returns the set of parameters as an associative array.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getParameterNames">
<sdesc>Returns an array of strings containing the names of the parameters  contained in this request. If the request has no parameters, the method  returns an empty array.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getParameterValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getPathInfo">
<sdesc>Returns the information after the script name and before the query string</sdesc>
<desc>If the uri is /webapp/index.php/hello.do?foo=bar it would return /hello.do</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getPathTranslated">
<sdesc>Returns any extra path information after the servlet name but before the  query string, and translates it to a real path.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getProtocol">
<sdesc>Return the protocol and version used to make this Request.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getQueryString">
<sdesc>Get the query string, which is the part of the URL after the first ?</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRealPath">
<sdesc>Get the file path on the server for the requested script</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRemoteAddr">
<sdesc>Get the IP address of the client</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRemoteHost">
<sdesc>Get the qualified hostname of the client  If no qualified hostname exists, the IP address is used</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRemoteUser">
<sdesc>Returns the login of the user making this request, if the user has been  authenticated, or null if the user has not been authenticated.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRequestDispatcher">
<sdesc>Return a RequestDispatcher that wraps the resource at the  specified path, which may be interpreted as relative to the current  request path.</sdesc>
<desc></desc>
<type>RequestDispatcher</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRequestURI">
<sdesc>Returns the part of this request's URL from the protocol name up to  the query string in the first line of the HTTP request.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getRequestURL">
<sdesc>Reconstructs the URL the client used to make the request.</sdesc>
<desc>The returned URL contains a protocol, server name, port number, and  server path, but it does not include query string parameters.</desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getScheme">
<sdesc>Returns the name of the scheme used to make this request, for example,</sdesc>
<desc>http, https, or ftp. Different schemes have different rules for  constructing URLs</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getServerName">
<sdesc>Get the qualified hostname of the server.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getServerPort">
<sdesc>Get the port on which the request was made</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getServletPath">
<sdesc>The portion or the path URI that is used to select the servlet that will  process this request. This path starts with a'/' character.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;getSession">
<sdesc>Get the running session or create a new one if specified and it doesn't exist  If a session is not going to be created, then return null.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;isSecure">
<sdesc>Determine if this was a secure request.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;parameterExists">
<sdesc>Determine if parameter exists.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;parseParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;removeAttribute">
<sdesc>Removed the specified request attribute if it exists.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;removeParameter">
<sdesc>Remove the specified request variable if it exists.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setAttribute">
<sdesc>Set the specified request attribute to the specified value.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setContextPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setInput">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setMethod">
<sdesc>Set the method name of the http request</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setParameter">
<sdesc>Set the specified request variable to the specified value.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setPathInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setProtocol">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setQueryString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setRemoteAddr">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setRequestURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setResponse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setScheme">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setServerName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setServerPort">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletRequest-&gt;setServletPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;HttpServletResponse">
<sdesc></sdesc>
<desc></desc>
<type>HttpServletResponse</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;addCookie">
<sdesc>Send an HttpServletResponse to add the given cookie to the array of cookies</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>cookie</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;addDateHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;addHeader">
<sdesc>Send an HttpServletResponse to add the header with the specified name</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;containsHeader">
<sdesc>Checks to see if a header exists with the specified name</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;finishResponse">
<sdesc>Perform whatever actions are required to flush and close the output  in a single operation, including sending the headers</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;flushBuffer">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getContentCount">
<sdesc>Return the number of bytes (length) written to the output stream</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getContentLength">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getContentType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getCookies">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getHeaderNames">
<sdesc>Return an array of all the headers names set for this response, or a zero-length  array if no headers have been set.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getHeaderValues">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getIncluded">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getProtocol">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getStatus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;getStatusMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;isCommitted">
<sdesc>Has the output of this response been committed yet?  Internal this method  is not used in place of using the property value</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;isError">
<sdesc>Get the error flag</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;isSuspended">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;resetBuffer">
<sdesc>Reset the data buffer but not any status or header information.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;sendError">
<sdesc>Send an error response to the client using the status and message.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>int</type>
<parameter>status</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>message</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;sendHeaders">
<sdesc>Send the HTTP response headers, if this has not already occured.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;sendRedirect">
<sdesc>Send an temporary redirect to the given location, which is either  absolute or relative to the current page</sdesc>
<desc>TODO: resolve $location to an absolute url, maybe handle automatic insertion of fuse script index.php</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>location</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setContentLength">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setContentType">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setDateHeader">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setError">
<sdesc>Set the error flag</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setHeader">
<sdesc>Send an HttpServletResponse to overwrite (or add if doesn't exist) the header</sdesc>
<desc>with the specified name</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setIncluded">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setRequest">
<sdesc>Set the Request with which the Response is associated</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setStatus">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;setSuspended">
<sdesc>By putting the response into the 'suspended' state, we  are saying that no new output can be added to this response.</sdesc>
<desc>Effectively it is done.  This method is typically called after an  internal forward or when the response is generating an error report.</desc>
<type>void</type>
<methodparam>
<type>boolean</type>
<parameter>suspended</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="HttpServletResponse-&gt;startBuffer">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;HttpSession">
<sdesc>*</sdesc>
<desc>Constructor  Do not call this directly, should be intialized using the  HttpServletRequest getSession() method to ensure it is only created once *</desc>
<type>HttpSession</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;getAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;getAttributeNames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;getCreationTime">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;getId">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;invalidate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;isNew">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;removeAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="HttpSession-&gt;setAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="IllegalArgumentException-&gt;IllegalArgumentException">
<sdesc></sdesc>
<desc></desc>
<type>IllegalArgumentException</type>
</methodsynopsis>
<methodsynopsis function="IllegalStateException-&gt;IllegalStateException">
<sdesc></sdesc>
<desc></desc>
<type>IllegalStateException</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;destroy">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;doGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;doPost">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;getWrapper">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;serveRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="InvokerServlet-&gt;setWrapper">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="IOException-&gt;IOException">
<sdesc></sdesc>
<desc></desc>
<type>IOException</type>
</methodsynopsis>
<methodsynopsis function="Iterator-&gt;Iterator">
<sdesc>Create a new iterator that's immediately ready for use.  Normally,  the constructor calls .</sdesc>
<desc></desc>
<type>Iterator</type>
</methodsynopsis>
<methodsynopsis function="Iterator-&gt;hasNext">
<sdesc>Returns true if the iterator has remaining elements.</sdesc>
<desc></desc>
<type>bool</type>
</methodsynopsis>
<methodsynopsis function="Iterator-&gt;next">
<sdesc>Returns the next ordered element from the iterator. The behavior of this  method is undefined if  returns false.</sdesc>
<desc></desc>
<type>object</type>
</methodsynopsis>
<methodsynopsis function="Iterator-&gt;remove">
<sdesc>Removes the last returned element from the iterator that produced it.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="IteratorUtils-&gt;getIterator">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogAppender-&gt;append">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;Logger">
<sdesc></sdesc>
<desc></desc>
<type>Logger</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;addAppender">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;debug">
<sdesc>NOTE: there is no reason to retain a reference to the error object</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;error">
<sdesc>NOTE: there is no reason to retain a reference to the error object</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;fatal">
<sdesc>NOTE: there is no reason to retain a reference to the error object</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;getLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;getLogger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;info">
<sdesc>NOTE: there is no reason to retain a reference to the error object</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;isLoggable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;log">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;setLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Logger-&gt;warn">
<sdesc>NOTE: there is no reason to retain a reference to the error object</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogLevel-&gt;toLevel">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogLevel-&gt;valueOf">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;LogManager">
<sdesc></sdesc>
<desc></desc>
<type>LogManager</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;getLogger">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;getLogManager">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;readConfiguration">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LogManager-&gt;resolveLevel">
<sdesc>Given a logger name, assume the root level to begin with, then search in each of the  categories (a category is all or part of a fully qualified class name) for  a specific log level.  The closer the category is to the qualified class name,  the more preference it is given.</sdesc>
<desc></desc>
<type>The</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;LoopTagStatus">
<sdesc></sdesc>
<desc></desc>
<type>LoopTagStatus</type>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;getCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;getCurrent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;getIndex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;isFirst">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="LoopTagStatus-&gt;isLast">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ManagerServlet-&gt;doGet">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ManagerServlet-&gt;getWrapper">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ManagerServlet-&gt;listEntries">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ManagerServlet-&gt;setWrapper">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;MessageResourcesConfig">
<sdesc></sdesc>
<desc></desc>
<type>MessageResourcesConfig</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;freeze">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;getFactory">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;getKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;getNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;getParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;setFactory">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;setKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;setNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MessageResourcesConfig-&gt;setParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MethodUtils-&gt;getReadMethod">
<sdesc>Construct the reader method for this bean based on the name of  the property.  If the getter method cannot be found, the property  is assumed to be a boolean and the is method is used.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>bean</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>property</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MethodUtils-&gt;getWriteMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MethodUtils-&gt;invokeMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MethodUtils-&gt;isReadable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MethodUtils-&gt;isWriteable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;ModuleConfig">
<sdesc></sdesc>
<desc></desc>
<type>ModuleConfig</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addActionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addDataSourceConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addExceptionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addFormBeanConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;addMessageResourcesConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findActionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findActionConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findDataSourceConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findDataSourceConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findExceptionConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findExceptionConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findFormBeanConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findFormBeanConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findForwardConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findForwardConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findMessageResourcesConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;findMessageResourcesConfigs">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;freeze">
<sdesc>Freeze the configuration of this module.  After this method</sdesc>
<desc>returns, any attempt to modify the configuration will be blocked</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;getControllerConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;getPrefix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;isConfigured">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;setControllerConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleConfig-&gt;setPrefix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ModuleUtils-&gt;getModuleConfig">
<sdesc>Return the current ModuleConfig object stored in request, if it exists,  null otherwise.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ModuleUtils-&gt;getModuleName">
<sdesc>Get the module name to which the specified uri belong.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type>ServletContext</type>
<parameter>servletContext
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ModuleUtils-&gt;getModulePrefixes">
<sdesc>Return the list of module prefixes that are defined for this web  application.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>ServletContext</type>
<parameter>servletContext</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ModuleUtils-&gt;selectModule">
<sdesc>Select the module to which the specified request belongs, and add  corresponding request attributes to this request.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;connect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;createStatement">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;getLink">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLConnection-&gt;prepareStatement">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLDriver-&gt;connect">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;execSQL">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;executeQuery">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;executeUpdate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;setFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;setInt">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLPreparedStatement-&gt;setString">
<sdesc>Set a parameter with a string value.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>int</type>
<parameter>paramIndex</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="MySQLResultSet-&gt;MySQLResultSet">
<sdesc></sdesc>
<desc></desc>
<type>MySQLResultSet</type>
</methodsynopsis>
<methodsynopsis function="MySQLResultSet-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLResultSet-&gt;getUpdateCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLResultSet-&gt;getUpdateID">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLResultSet-&gt;next">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLStatement-&gt;execSQL">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLStatement-&gt;executeQuery">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="MySQLStatement-&gt;executeUpdate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestedBeanStack-&gt;compact">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestedBeanStack-&gt;getCurrent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestedBeanStack-&gt;peek">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestedBeanStack-&gt;pop">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NestedBeanStack-&gt;push">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="NoSuchMethodException-&gt;NoSuchMethodException">
<sdesc></sdesc>
<desc></desc>
<type>NoSuchMethodException</type>
</methodsynopsis>
<methodsynopsis function="NullPointerException-&gt;NullPointerException">
<sdesc></sdesc>
<desc></desc>
<type>NullPointerException</type>
</methodsynopsis>
<methodsynopsis function="NumberIterator-&gt;NumberIterator">
<sdesc>Construct a new</sdesc>
<desc></desc>
<type>NumberIterator</type>
<methodparam>
<type>$size</type>
<parameter>size</parameter>
</methodparam>
<methodparam>
<type>$base</type>
<parameter>base</parameter>
</methodparam>
<methodparam>
<type>$step</type>
<parameter>step</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="NumberIterator-&gt;getCurrent">
<sdesc>*</sdesc>
<desc></desc>
<type>int
*</type>
</methodsynopsis>
<methodsynopsis function="NumberIterator-&gt;hasNext">
<sdesc>*</sdesc>
<desc></desc>
<type>bool
*</type>
</methodsynopsis>
<methodsynopsis function="NumberIterator-&gt;next">
<sdesc>*</sdesc>
<desc></desc>
<type>void
*</type>
</methodsynopsis>
<methodsynopsis function="NumberIterator-&gt;reset">
<sdesc>*</sdesc>
<desc></desc>
<type>void
*</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;equals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;getClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;getClassName">
<sdesc>Returns the class name of this object.  This is a convenience  method which wraps getClass().getName()</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;getPhpClassName">
<sdesc>For whatever its worth, this method will return the PHP provided  class name for an object.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;hashCode">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;readObject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;toString">
<sdesc>Give a string representation of the object.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Object-&gt;writeObject">
<sdesc>Now the write/readObject methods allow a channel for the object to be</sdesc>
<desc>serialized.  It does not however mean that it will get written.  If the  __sleep() method returns an empty array the object will be a default  instance when it comes back up.  Different from java however, it is necessary  for the parent object to disable serializing child references or else what  will happen is the object will still be in place, but it will be a new instance  called with an empty constructor.</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ObjectCreateRule-&gt;ObjectCreateRule">
<sdesc></sdesc>
<desc></desc>
<type>ObjectCreateRule</type>
</methodsynopsis>
<methodsynopsis function="ObjectCreateRule-&gt;begin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ObjectCreateRule-&gt;end">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;doForward">
<sdesc>A convenience method for calling the ServletContext::getRequestDispatcher() method on our servlet context  and calling the resulting RequestDispatcher::doForward() method.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;doInclude">
<sdesc>A convenience method for calling the ServletContext::getRequestDispatcher() method on our servlet context  and calling the resulting RequestDispatcher::doInclude() method.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;evaluateTemplateText">
<sdesc>Evaluate template text as an expression string and return the result as  a string.  This method is used primarily by the PhaseParser when the  el-ignore option is set to false in the servlet initialization  parameters.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;findAttribute">
<sdesc>Find an attribute with the specified name in any scope, searching from  page scope up to application scope.</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getAttribute">
<sdesc>Get the attribute in the specified scope, returning null if not found</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>scope</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getAttributeNamesInScope">
<sdesc>Get the names of the attributes in a specified scope</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>scope</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getAttributesScope">
<sdesc>Get the scope in which the named attribute exists, null if it does  not exist in any scope</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getRequest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getResponse">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getServletContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;getSession">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;initialize">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;removeAttribute">
<sdesc>Remove the named attribute in the given scope.  If the scope is null  then try to remove the attribute from all scopes.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>scope</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PageContext-&gt;setAttribute">
<sdesc>Set the attribute in the specified scope</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>mixed</type>
<parameter>value</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>scope</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;PhaseCompilationContext">
<sdesc></sdesc>
<desc></desc>
<type>PhaseCompilationContext</type>
<methodparam>
<type>string</type>
<parameter>phaseUri</parameter>
</methodparam>
<methodparam>
<type>ServletContext</type>
<parameter>context</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>phaseWrapper</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;compile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;createCompiler">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;createOutdir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getCompiledFileName">
<sdesc>Regardless of the extension used for phase files, the resulting file is  a regular php file.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getOutputDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getPhaseFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getRealPath">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getResourceAsStream">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;getServletContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;load">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompilationContext-&gt;setOutputDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompiler-&gt;PhaseCompiler">
<sdesc></sdesc>
<desc></desc>
<type>PhaseCompiler</type>
<methodparam>
<type></type>
<parameter>ctxt</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>psw</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="PhaseCompiler-&gt;compile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseCompiler-&gt;isOutDated">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseException-&gt;PhaseException">
<sdesc></sdesc>
<desc></desc>
<type>PhaseException</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;PhaseParser">
<sdesc></sdesc>
<desc></desc>
<type>PhaseParser</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;createTagVarName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;getClassNameForTag">
<sdesc>This is kind of a hack, we just want to generate a classname from the  pieces we have laying around.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;loadTagLibraries">
<sdesc>Rely on the TabLibraries class to location and process the *.tld files  for the custom taglibs.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parse">
<sdesc>The main entry for the parse, which will read through the template  data and handle the tags in a hierarchial manner.  It will return  a compiled template string</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseAction">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseAttribute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseAttributes">
<sdesc></sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseAttributeValue">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseBody">
<sdesc>Read the stream until the end tag is found  which matches the start tag passed in.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseComment">
<sdesc>Parse a comment section</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseCustomTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseDirective">
<sdesc>Parse a directive section</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseElements">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseScriptlet">
<sdesc>Parse a scriptlet</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseParser-&gt;parseTemplateText">
<sdesc>Consume the plain old template text, trimming empty regions and  optionally running it through the EL evaluator.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;PhaseReader">
<sdesc></sdesc>
<desc></desc>
<type>PhaseReader</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;isDelimiter">
<sdesc>Determine if the next character is a delimiter without advancing the cursor.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;matchesEndTag">
<sdesc></sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;nextContent">
<sdesc>Gets the content until the next potential taglib element.  We just search  for &amp;lt; since it is this char that begins every taglib</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;parseToken">
<sdesc>Get the next token available based on the values specified as delimiters</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PhaseReader-&gt;skipUntilEndTag">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="PhaseServlet-&gt;checkCompile">
<sdesc>Make sure the requested wrapper does not have a cached</sdesc>
<desc>compilation which is out of date</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServlet-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServlet-&gt;service">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServlet-&gt;servicePhaseFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletOptions-&gt;PhaseServletOptions">
<sdesc></sdesc>
<desc></desc>
<type>PhaseServletOptions</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletOptions-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletOptions-&gt;getScratchDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletOptions-&gt;isElIgnored">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletOptions-&gt;setProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;PhaseServletWrapper">
<sdesc></sdesc>
<desc></desc>
<type>PhaseServletWrapper</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;getCompiledFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;getPhaseEngineContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;getServletContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;service">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PhaseServletWrapper-&gt;setReload">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PreparedStatement-&gt;PreparedStatement">
<sdesc></sdesc>
<desc></desc>
<type>PreparedStatement</type>
</methodsynopsis>
<methodsynopsis function="PreparedStatement-&gt;generateQuery">
<sdesc></sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="PreparedStatement-&gt;setFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PreparedStatement-&gt;setInt">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PreparedStatement-&gt;setString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;Properties">
<sdesc>Creates an empty property list with no default values.</sdesc>
<desc></desc>
<type>Properties</type>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;getProperty">
<sdesc>Searches for the property with the specified key in this property list.</sdesc>
<desc>If the key is not found in this property list, the default property  list, and its defaults, recursively, are then checked. The method  returns null if the property is not found.NOTE: we don't return by reference since a change to the result should  not then change the internal value, they are no longer linked in this way</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>key</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>defaultValue</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;load">
<sdesc>Reads a property list (key and element pairs) from the input stream.</sdesc>
<desc>Every property occupies one line of the input stream. Each line is  terminated by a line terminator (\n or \r or \r\n). Lines from the input  stream are processed until end of file is reached on the input stream.A line that contains only whitespace or whose first non-whitespace  character is an ASCII # or ! is ignored (thus, # or ! indicate comment  lines).Every line other than a blank line or a comment line describes one  property to be added to the table (except that if a line ends with \,  then the following line, if it exists, is treated as a continuation  line, as described below). The key consists of all the characters in the  line starting with the first non-whitespace character and up to, but not  including, the first ASCII =, :, or whitespace character. All of the key  termination characters may be included in the key by preceding them with  a \. Any whitespace after the key is skipped; if the first  non-whitespace character after the key is = or :, then it is ignored and  any whitespace characters after it are also skipped. All remaining  characters on the line become part of the associated element string.  Within the element string, the ASCII escape sequences \t, \n, \r, \\,  \&quot;, \', \ (a backslash and a space), and \uxxxx are recognized and  converted to single characters. Moreover, if the last character on the  line is \, then the next line is treated as a continuation of the  current line; the \ and line terminator are simply discarded, and any  leading whitespace characters on the continuation line are also  discarded and are not part of the element string.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>input</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;propertyNames">
<sdesc>Returns an array of all the keys in this property list, including  distinct keys in the default property list if a key of the same name has  not already been found from the main properties list.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;setDefaults">
<sdesc>Since PHP can't have overloaded constructors to pass values optionally by  reference (grrrrrrrrr) I added a new function which will set the defaults  after the instance of properties had been created</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>properties</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;setProperty">
<sdesc>Sets the value for the specified property.  Enforces use of strings for  property keys and values.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>key</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Properties-&gt;store">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;PropertyMessageResources">
<sdesc></sdesc>
<desc></desc>
<type>PropertyMessageResources</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;getConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;getMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;getReturnNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;isPresent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;loadLocale">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;lookupMessage">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;messageKey">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;setConfig">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyMessageResources-&gt;setReturnNull">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;getIndexedProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;getMappedProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;getNestedProperty">
<sdesc>NOTE: as long as we always assign a variable which is passed by  reference to a reference, we don't actually reassign the value of  the variable which we passed in.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;getSimpleProperty">
<sdesc>Get the value of the specified property on the subject bean using  the standard notation for getter methods from the JavaBean spec.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="PropertyUtils-&gt;setSimpleProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;close">
<sdesc>Close the stream</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;mark">
<sdesc>Mark the present position in the stream</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;read">
<sdesc>Read a set number of characters into the buffer</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;readChar">
<sdesc>Read a single character in the stream</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;ready">
<sdesc>Tell whether the stream is ready to be read</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;reset">
<sdesc>Reset the stream</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Reader-&gt;skip">
<sdesc>Skip a certain number of characters</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;doForward">
<sdesc>Do a forward to specified uri using request dispatcher.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>uri</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;doInclude">
<sdesc>Do an include to specified uri using request dispatcher.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>uri</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;getServletContext">
<sdesc>Return the ServletContext for the web application in which we are running</sdesc>
<desc></desc>
<type>ServletContext</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;init">
<sdesc>Initialize the request processor instance</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>servlet</parameter>
</methodparam>
<methodparam>
<type>ApplicationConfig</type>
<parameter>config</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;process">
<sdesc>Process an  and create the corresponding</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionCreate">
<sdesc>Return an  instance that will be used to process  the current request, creating a new one if necessary.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionExecute">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionForm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionFormPopulate">
<sdesc>Populate the properties of the specified ActionForm instance from  the request parameters included with this request.  In addition,  request attribute StudsConstants::CANCEL_KEY will be set if  the request was submitted with a cancel button.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionFormValidate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionForward">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processActionMapping">
<sdesc>Select the mapping used to process the selection path for this request.</sdesc>
<desc>If no mapping can be identified, create an error response and return  null.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processContent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processException">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processForward">
<sdesc>Process a forward requested by this mapping (if any).  Return  true if standard processing should continue, or  false if we have already handled this request.</sdesc>
<desc>IMPLEMENTATION NOTE: This differs from the Struts implementation  since Struts does not use the forwardPattern substitution here (though it should)</desc>
<type>void</type>
<methodparam>
<type>$request</type>
<parameter>&amp;request</parameter>
</methodparam>
<methodparam>
<type>$response</type>
<parameter>&amp;response</parameter>
</methodparam>
<methodparam>
<type>$mapping</type>
<parameter>&amp;mapping</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processInclude">
<sdesc>Process an include requested by this mapping (if any).  Return  true if standard processing should continue, or  false if we have already handled this request.</sdesc>
<desc>IMPLEMENTATION NOTE: This differs from the Struts implementation  since Struts does not use the forwardPattern substitution here (though it should)</desc>
<type>void</type>
<methodparam>
<type>$request</type>
<parameter>&amp;request</parameter>
</methodparam>
<methodparam>
<type>$response</type>
<parameter>&amp;response</parameter>
</methodparam>
<methodparam>
<type>$mapping</type>
<parameter>&amp;mapping</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processLocale">
<sdesc>Automatically select a Locale for the current user, if requested.</sdesc>
<desc>The idea here is that if the controller is configured to do so, we  can allow locales to be set into the session scope (such as if a user  selected a language of choice) which would override the container supplied  preference for locale.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processNoCache">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestProcessor-&gt;processPath">
<sdesc>Identify and return the path info component (from the request URI) that  we will use to select an ActionMapping.  If no such  path can be identified, create an error response and return  null.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestUtils-&gt;applicationInstance">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestUtils-&gt;createActionForm">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestUtils-&gt;forwardURL">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RequestUtils-&gt;getUserLocale">
<sdesc>Look up and return current user locale, based on the specified parameters.</sdesc>
<desc>Note that this method does not create a session if it doesn't already exist</desc>
<type>string</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>localeKey</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RequestUtils-&gt;populate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;ResultSet">
<sdesc></sdesc>
<desc></desc>
<type>ResultSet</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;close">
<sdesc>Close the result set</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getFloat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getInt">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getObject">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getRow">
<sdesc>Retrieves the current row number.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getRowByIndex">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getRowMap">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;getString">
<sdesc>Get the value of the column name or column index (1 based) for the  current row.  We let PHP handle the types.</sdesc>
<desc></desc>
<type>mixed</type>
<methodparam>
<type>string</type>
<parameter>column
</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;isLast">
<sdesc>Retrieves whether the cursor is on the last row of this ResultSet object.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;next">
<sdesc>Advance the internal cursor to the next row of the result set.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSet-&gt;wasNull">
<sdesc>Reports whether the last column read had a value of SQL NULL. Note that  you must first call one of the getter methods on a column to try to read  its value and then call the method wasNull to see if the value read was  SQL NULL.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="ResultSetIterator-&gt;ResultSetIterator">
<sdesc></sdesc>
<desc></desc>
<type>ResultSetIterator</type>
</methodsynopsis>
<methodsynopsis function="ResultSetIterator-&gt;hasNext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ResultSetIterator-&gt;next">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;begin">
<sdesc>This method is called when the beginning of a matching XML element is encountered.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespace</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;body">
<sdesc>This method is called when the body of a matching XML element is encountered.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespace</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>text</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;end">
<sdesc>This method is called when the end of a matching XML element is encountered.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespace</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;finish">
<sdesc>This method is called after all parsing methods have been called, to  allow Rules to remove temporary data.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;getDigester">
<sdesc>Return the Digester with which this Rule is associated.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;getNamespaceURI">
<sdesc>Return the namespace URI for which this Rule is relevant, if any.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;setDigester">
<sdesc>Set the  with which this  is associated.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>digester</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rule-&gt;setNamespaceURI">
<sdesc>Set the namespace URI for which this Rule is relevant, if any.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;add">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;clear">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;getDigester">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;getNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;match">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;rules">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;setDigester">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Rules-&gt;setNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;add">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;clear">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;getDigester">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;getNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;lookup">
<sdesc>Return an array of Rule instances for the specified pattern that also  match the specified namespace URI (if any).  If there are no such rules,  return null.</sdesc>
<desc></desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;match">
<sdesc>Return a List of all registered Rule instances that match the specified</sdesc>
<desc>nesting pattern, or a zero-length List if there are no matches.  If more  than one Rule instance matches, they must be returned  in the order originally registered through the   method.</desc>
<type>array</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>pattern</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;rules">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;setDigester">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RulesBase-&gt;setNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RuleSet-&gt;addRuleInstance">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RuleSet-&gt;getNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RuleSetBase-&gt;addRuleInstance">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="RuleSetBase-&gt;getNamespaceURI">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;characters">
<sdesc>Receive notification of character data inside an element.</sdesc>
<desc>By default, do nothing. Application writers may override this method to  take specific actions for each chunk of character data (such as adding  the data to a node or buffer, or printing it to a file).</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;endDocument">
<sdesc>Receive notification of the end of the document.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the end of a document (such as  finalising a tree or closing an output file).</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;endElement">
<sdesc>Receive notification of the end of an element.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the end of each element (such as  finalising a tree node or writing output to a file).</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>localName</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>qName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;endPrefixMapping">
<sdesc>Receive notification of the end of a Namespace mapping.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the end of each prefix mapping.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;ignorableWhitespace">
<sdesc>Receive notification of ignorable whitespace in element content.</sdesc>
<desc>By default, do nothing. Application writers may override this method to  take specific actions for each chunk of ignorable whitespace (such as  adding data to a node or buffer, or printing it to a file).</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;processingInstruction">
<sdesc>Receive notification of a processing instruction.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions for each processing instruction,  such as setting status variables or invoking other methods.</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>target</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>data</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;startDocument">
<sdesc>Receive notification of the beginning of the document.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the beginning of a document (such  as allocating the root node of a tree or creating an output file).</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;startElement">
<sdesc>Receive notification of the start of an element.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the start of each element (such  as allocating a new tree node or writing output to a file).</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>localName</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>qName</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxDefaultHandler-&gt;startPrefixMapping">
<sdesc>Receive notification of the start of a Namespace mapping.</sdesc>
<desc>By default, do nothing. Application writers may override this method in  a subclass to take specific actions at the start of each Namespace  prefix scope (such as storing the prefix mapping).</desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>namespaceURI</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;SaxParser">
<sdesc></sdesc>
<desc></desc>
<type>SaxParser</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;destroy">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;getParser">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;getProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;isNamespaceAware">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;parse">
<sdesc>NOTE: this method closes the input reader passed in.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SaxParser-&gt;setProperty">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;Scanner">
<sdesc>NOTE: the constructor closes the input stream when done</sdesc>
<desc></desc>
<type>Scanner</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;advance">
<sdesc>Advance the cursor the set number of characters.  If the  number of characters specified pushes us off the end of the  stream, place the cursor just after the end of the stream</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>int</type>
<parameter>length</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;end">
<sdesc>Push the cursor to the end of the stream so that processing stops.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;getChars">
<sdesc>Pull out a section from the stream and return it.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;hasMoreInput">
<sdesc>Determine if more input exists in our stream so that we don't  read off the end of the internal stream.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;isSpace">
<sdesc>Determine if the next character to be read is a space character (empty  string does not count as a valid space characters and false will be  returned). Do not advance in the process of determining this  characteristic.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;mark">
<sdesc>Get the current position of the cursor in the stream.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;matches">
<sdesc>Determine if the string specified aligns with the stream starting from  the cursor's current location up to the length of that specified string.</sdesc>
<desc>If the two strings align, the cursor position is placed after the search  string match, otherwise the stream is unchanged.</desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>string</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>ignoreCase</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;nextChar">
<sdesc>Read the next char under the cursor in the internal stream and  advance the internal cursor by one character.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;peekChar">
<sdesc>Peek the next character to be read in the internal stream.  If  the cursor is already at the end of the stream, false is returned</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;reset">
<sdesc>Reset the cursor to the marked position in the stream.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;skipSpaces">
<sdesc>Advance in the current stream until a non-space character  is found.  Return the number of characters skipped in the process.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Scanner-&gt;skipUntil">
<sdesc>Skip until the given string is matched in the stream.  Position</sdesc>
<desc>the cursor just after the match if found and return the position  just before the match.  If the ignore escape flag is off,  characters prefixed with a \ will not be considered to be a match (such  as in a quoted string ).NOTE: the string we are looking for can be multiple characters, but  the literal boundaries must be only a single char (i.e. the quotes)</desc>
<type>int</type>
<methodparam>
<type>string</type>
<parameter>string</parameter>
</methodparam>
<methodparam>
<type>boolean</type>
<parameter>ignoreEsc</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>enclosures</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SecurityException-&gt;SecurityException">
<sdesc></sdesc>
<desc></desc>
<type>SecurityException</type>
</methodsynopsis>
<methodsynopsis function="ServerInfo-&gt;getServerInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="ServletException-&gt;ServletException">
<sdesc></sdesc>
<desc></desc>
<type>ServletException</type>
</methodsynopsis>
<methodsynopsis function="ServletUtils-&gt;normalize">
<sdesc>Return a context-relative path, beginning with a &quot;/&quot;, that represents</sdesc>
<desc>the canonical version of the specified path after &quot;..&quot; and &quot;.&quot; elements  are resolved out.  If the specified path attempts to go outside the  boundaries of the current context (i.e. too many &quot;..&quot; path elements are  present), return null instead.</desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>path</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SetNextRule-&gt;SetNextRule">
<sdesc></sdesc>
<desc></desc>
<type>SetNextRule</type>
</methodsynopsis>
<methodsynopsis function="SetNextRule-&gt;end">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SetPropertiesRule-&gt;SetPropertiesRule">
<sdesc></sdesc>
<desc></desc>
<type>SetPropertiesRule</type>
</methodsynopsis>
<methodsynopsis function="SetPropertiesRule-&gt;begin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SetPropertyRule-&gt;SetPropertyRule">
<sdesc>Construct a &quot;set property&quot; rule with the specified name and value attributes.</sdesc>
<desc></desc>
<type>SetPropertyRule</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SetPropertyRule-&gt;begin">
<sdesc>Process the beginning of this element.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>namespace</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
<methodparam>
<type>array</type>
<parameter>attributes</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="SQLLogAppender-&gt;append">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SQLLogAppender-&gt;closeConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="SQLLogAppender-&gt;getConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;StandardContext">
<sdesc></sdesc>
<desc></desc>
<type>StandardContext</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;addChild">
<sdesc>Add a child Wrapper.  A wrapper is simply a servlet container.  Wrappers  are either created in the web.xml file digesting or as an InvokerServlet  which creates a servlet wrapper dynamically upon the first call.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>Wrapper</type>
<parameter>child</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;addMimeMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;addParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;addServletMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;addWelcomeFile">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findChild">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findChildren">
<sdesc>Return the set of child servlets associated with this  context.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findMimeMapping">
<sdesc>Return the MIME type to which the specified extension is mapped, if  any, otherwise return null</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>extension</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findMimeMappings">
<sdesc>Return the extensions for which MIME mappings are defined.  If there are  none, a zero-length array is returned.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findServletMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findServletMappings">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findWelcomeFile">
<sdesc>Return true if the specified welcome file is defined  for this Context; otherwise return false.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;findWelcomeFiles">
<sdesc>Return the set of welcome files defined for this Context.  If none are  defined, a zero-length array is returned.</sdesc>
<desc></desc>
<type>array</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getBasePath">
<sdesc>Get the base path of this servlet context, which is just the absolute  directory name of our fuse file index.php.</sdesc>
<desc></desc>
<type>string</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getConfigured">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getDisplayName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getPath">
<sdesc>Return the context path for this Context, which is</sdesc>
<desc>equivalent to its name</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getServletContext">
<sdesc>Get the facade for the servlet context which only exposes the public methods</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getSessionTimeout">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getStartup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;getWorkDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;invoke">
<sdesc>IMPLEMENTATION NOTE: There is a major merge going on here.  Usually</sdesc>
<desc>the  method calls the method in the ContainerBase  which then calls the  in the pipeline which calls   on each valve, which then get's to where we are.  To me that is just way to complex.  We  are going to make this much simpler and do it right here.</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>request</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;isContextModified">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;loadOnStartup">
<sdesc>Load and initialize all servlets marked &quot;load-on-startup&quot; in the web  application deployment descriptor.</sdesc>
<desc>NOTE: we might not really need to keep such a strict handling of the order</desc>
<type>void</type>
<methodparam>
<type>array</type>
<parameter>children</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;map">
<sdesc>Return the child Container that should be used to process this Request,  based upon its characteristics.  If no such child Container can be  identified, return null instead.</sdesc>
<desc>An example request would be http://localhost/webapp/index.php/action.do?foo=bar  so our pathinfo is really our requestURI in this caseNOTE: I merged the StandardHostMapper class with the StandardContext for simplicity</desc>
<type></type>
<methodparam>
<type></type>
<parameter>&amp;request</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;notFound">
<sdesc>Report a &quot;not found&quot; error for the specified resource.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>requestURI</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>response</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;reload">
<sdesc>Reload this context (which in our case is the whole web application)</sdesc>
<desc>All we need to do is blow away the StandardContext::SERVLET_CONTEXT_CACHE</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;removeMimeMapping">
<sdesc>Remove the MIME mapping for the specified extension, if it exists;  otherwise, no action is taken.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>extension</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;removeParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;removeServletMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;removeWelcomeFile">
<sdesc>Remove the specified welcome file name from the list recognized by this  Context.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setConfigured">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setContextModified">
<sdesc>These methods are added in place of the &quot;listeners&quot; framework  to signal that the context has been updated an needs to be  resaved so that all requests see the updated context.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setDisplayName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setName">
<sdesc>The name is just the context path under which this container is running.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setSessionTimeout">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setStartup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;setWorkDir">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;sleep">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardContext-&gt;start">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;addInitParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;allocate">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;deallocate">
<sdesc>NOTE: since we are single threaded, we really don't need to pass in the servlet instance</sdesc>
<desc>here since it will be the same exact one as the 'instance' property</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;findInitParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;findInitParameters">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getAvailable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getInitParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getInitParameterNames">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getLoadOnStartup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getParent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getServletClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getServletContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getServletMapping">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;getServletName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;isUnavailable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;load">
<sdesc>Used by , this method  loads the servlet and directly assigns the instance to the  class instance variable.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;loadServlet">
<sdesc>Load and initialize an instance of this servlet, if there is not already</sdesc>
<desc>at least one initialized instance.  This can be used, for example, to  load servlets that are marked in the deployment descriptor to be loaded  at server startup time.  The servlet will now be ready to have it's  service() method called.NOTE: I combined load() and loadServlet() for simplicity</desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;removeInitParameter">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setAvailable">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setLoadOnStartup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setParent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setServletClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StandardWrapper-&gt;setServletName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;Statement">
<sdesc></sdesc>
<desc></desc>
<type>Statement</type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;executeQuery">
<sdesc></sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;executeUpdate">
<sdesc></sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;getConnection">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Statement-&gt;getUpdateCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StopWatch-&gt;StopWatch">
<sdesc></sdesc>
<desc></desc>
<type>StopWatch</type>
</methodsynopsis>
<methodsynopsis function="StopWatch-&gt;read">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StopWatch-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StopWatch-&gt;_getMilliSeconds">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;String">
<sdesc></sdesc>
<desc></desc>
<type>String</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;charAt">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;concat">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;endsWith">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;equals">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;indexOf">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;lastIndexOf">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;length">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;startsWith">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;substring">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;toLowerCase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;toString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;toUpperCase">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;trim">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="String-&gt;valueOf">
<sdesc>NOTE: we don't need to pass this by reference since it is being used read-only</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringIterator-&gt;StringIterator">
<sdesc>*</sdesc>
<desc>Construct a new</desc>
<type>StringIterator</type>
<methodparam>
<type>$string</type>
<parameter>&amp;string</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="StringIterator-&gt;getCurrent">
<sdesc>*</sdesc>
<desc>Return a reference to the current character</desc>
<type>char
*</type>
</methodsynopsis>
<methodsynopsis function="StringIterator-&gt;hasNext">
<sdesc>*</sdesc>
<desc></desc>
<type>bool
*</type>
</methodsynopsis>
<methodsynopsis function="StringIterator-&gt;next">
<sdesc>*</sdesc>
<desc></desc>
<type>void
*</type>
</methodsynopsis>
<methodsynopsis function="StringIterator-&gt;reset">
<sdesc>*</sdesc>
<desc></desc>
<type>void
*</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;StringReader">
<sdesc></sdesc>
<desc></desc>
<type>StringReader</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;mark">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;read">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;readChar">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;ready">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;reset">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReader-&gt;skip">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;StringReplaceTag">
<sdesc></sdesc>
<desc></desc>
<type>StringReplaceTag</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;init">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;setNewlineToken">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;setReplace">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringReplaceTag-&gt;setWith">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringUtils-&gt;escapeString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StringUtils-&gt;quote">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="AddPropertyRule-&gt;begin">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="StudsRuleSet-&gt;addRuleInstances">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;doAfterBody">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;getParent">
<sdesc>Get the parent, which is the closest enclosing tag handler</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;setPageContext">
<sdesc>Set the current page context.</sdesc>
<desc>This method is invoked by the compiled phase page prior to doStartTag()</desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>pc</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Tag-&gt;setParent">
<sdesc>Set the parent (closest enclosing tag handler) of this  tag handler.</sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>t</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagHandlerPool-&gt;TagHandlerPool">
<sdesc></sdesc>
<desc></desc>
<type>TagHandlerPool</type>
</methodsynopsis>
<methodsynopsis function="TagHandlerPool-&gt;borrowTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type></type>
<parameter>className</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagHandlerPool-&gt;getInstance">
<sdesc>For now we will use a singleton to get a handle on the tag handler pool.  Really  we should keep an instance of the tag handler pool in the generated page to use.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagHandlerPool-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagHandlerPool-&gt;returnTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;getTagClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;setTagClass">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagInfo-&gt;TagLibraryInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;addTagLibrary">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;getTagLibInfo">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;initTldDigester">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;isDefinedTag">
<sdesc>Determine if the tag provided exists, looking up by  prefix and by shortName against the known tag libraries.</sdesc>
<desc></desc>
<type>boolean</type>
<methodparam>
<type>string</type>
<parameter>prefix</parameter>
</methodparam>
<methodparam>
<type>string</type>
<parameter>shortName</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;processTld">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
<methodparam>
<type>string</type>
<parameter>tldPath</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagLibraries-&gt;processTlds">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;addTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;getPrefix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;getTag">
<sdesc>Find a tag in this library by name.</sdesc>
<desc></desc>
<type></type>
<methodparam>
<type>string</type>
<parameter>name</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;getTags">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;getUri">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;getVersion">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;setPrefix">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;setUri">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagLibraryInfo-&gt;setVersion">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;doAfterBody">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;doEndTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;doStartTag">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;getParent">
<sdesc>The tag instance most closely enclosing this tag instance.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;release">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;setPageContext">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagSupport-&gt;setParent">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagUtils-&gt;getActionMappingName">
<sdesc>This method extracts the action mapping from a form action URL so  it can be used to lookup the cooresponding ActionConfig.  It also  conveniently prefixes the actionMapping with a '/' if left off for  astetic purposes.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>action</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagUtils-&gt;getActionMappingURL">
<sdesc>Given an action, prepend a workable servlet mapping so that it will be caught  and processed by the ActionServlet.</sdesc>
<desc></desc>
<type>string</type>
<methodparam>
<type>string</type>
<parameter>action</parameter>
</methodparam>
<methodparam>
<type></type>
<parameter>pageContext</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="TagUtils-&gt;getModuleConfig">
<sdesc>Return the ModuleConfig object if it exists, null if otherwise.  The PageContext  is used to get to the ServletContext.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="TagUtils-&gt;lookup">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TagUtils-&gt;message">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Test-&gt;countTestCases">
<sdesc>Counts the number of test cases that will be run by this test.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="Test-&gt;run">
<sdesc>Runs a test and collects its result in a new TestResult instance.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Test-&gt;runWith">
<sdesc>Runs a test and collects its result in the specified TestResult instance.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;TestCase">
<sdesc></sdesc>
<desc></desc>
<type>TestCase</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;countTestCases">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;createResult">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;run">
<sdesc>Runs the test case and collects the results in a newly created  TestResult.</sdesc>
<desc></desc>
<type></type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;runBare">
<sdesc>Runs the bare test sequence</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;runTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;runWith">
<sdesc>Runs the test case and collects the results in the existing  TestResult parameter.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;setUp">
<sdesc>Sets up the environment.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestCase-&gt;tearDown">
<sdesc>Tears down the environment.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestFailure-&gt;TestFailure">
<sdesc></sdesc>
<desc></desc>
<type>TestFailure</type>
</methodsynopsis>
<methodsynopsis function="TestFailure-&gt;getFailedTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestFailure-&gt;getThrownException">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestFailure-&gt;isFailure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestFailure-&gt;toString">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;addError">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;addFailure">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;getErrorCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;getErrors">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;getFailureCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;getFailures">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;run">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestResult-&gt;wasSuccessful">
<sdesc>Returns whether the entire test was successful or not.</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;TestSuite">
<sdesc></sdesc>
<desc></desc>
<type>TestSuite</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;addTest">
<sdesc>Add a single test to the suite</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;addTestMethod">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;addTestSuite">
<sdesc>Add all the test from the provided class to this suite.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;countTestCases">
<sdesc>Count the number of individual test cases that will be run  in this suite.</sdesc>
<desc></desc>
<type>int</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;createTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;getName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;getTestCount">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;getTests">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;isTestMethod">
<sdesc>Determine if this method is a test method (aka, begins with &quot;test&quot;)</sdesc>
<desc></desc>
<type>boolean</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;run">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;runTest">
<sdesc>Run the specified test, placing the result in the specified TestResult  instance.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;runWith">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;setName">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestSuite-&gt;testAt">
<sdesc>Return the test at the specified index.</sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TestWarning-&gt;TestWarning">
<sdesc></sdesc>
<desc></desc>
<type>TestWarning</type>
</methodsynopsis>
<methodsynopsis function="TestWarning-&gt;runTest">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="TextRunner-&gt;main">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="UnavailableException-&gt;UnavailableException">
<sdesc></sdesc>
<desc></desc>
<type>UnavailableException</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;Url">
<sdesc>*  Construct a new Url object.</sdesc>
<desc></desc>
<type>Url</type>
<methodparam>
<type>$url</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>$parameters</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;fromCurrent">
<sdesc>*  Set the Url to the URL of the current page; this can be either the full  URL (with parameters) or just the basename.</sdesc>
<desc></desc>
<type>void
*</type>
<methodparam>
<type>$completeUrl</type>
<parameter>completeUrl</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;getBasename">
<sdesc>*</sdesc>
<desc>Return the basename of this Url</desc>
<type>string
*</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;getLink">
<sdesc>*</sdesc>
<desc>Return a link to the Url</desc>
<type>string
*</type>
<methodparam>
<type>$string</type>
<parameter>string</parameter>
</methodparam>
<methodparam>
<type>$options</type>
<parameter>options</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;getParameter">
<sdesc>*</sdesc>
<desc>Get the value of the specified Url parameter</desc>
<type>string
*</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;getParameters">
<sdesc>*</sdesc>
<desc>Return a reference to this Url's parameters</desc>
<type>array
*</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;getUrl">
<sdesc>*</sdesc>
<desc>Return a string representation of the URL</desc>
<type>string
*</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;hasParameter">
<sdesc>*</sdesc>
<desc>Check whether a specific parameter exists in this Url</desc>
<type>bool
*</type>
</methodsynopsis>
<methodsynopsis function="Url-&gt;parseParameters">
<sdesc>*</sdesc>
<desc>Parse parameters in a 1     key1=value1&amp;key2=value2&amp;... string</desc>
<type>void</type>
<methodparam>
<type>$parameters</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;setBasename">
<sdesc>*</sdesc>
<desc>Set the basename for the Url</desc>
<type>void
*</type>
<methodparam>
<type>$basename</type>
<parameter>basename</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;setParameter">
<sdesc>*</sdesc>
<desc>Update the value of a parameter</desc>
<type>void
*</type>
<methodparam>
<type>$parameter</type>
<parameter>parameter</parameter>
</methodparam>
<methodparam>
<type>$value</type>
<parameter>value</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="Url-&gt;setUrl">
<sdesc>*</sdesc>
<desc>Set the Url to a new value</desc>
<type>void
*</type>
<methodparam>
<type>$url</type>
<parameter>url</parameter>
</methodparam>
<methodparam>
<type>$parameters</type>
<parameter>parameters</parameter>
</methodparam>
</methodsynopsis>
<methodsynopsis function="VariableResolver-&gt;getLog">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="VariableResolver-&gt;resolveVariable">
<sdesc>Resolve a scoped variable at runtime.  The variable will be in EL form and  will be dereferenced until the last element is reached.</sdesc>
<desc></desc>
<type>The</type>
</methodsynopsis>
<methodsynopsis function="WebRuleSet-&gt;addRuleInstances">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Writer-&gt;close">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Writer-&gt;ready">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<methodsynopsis function="Writer-&gt;write">
<sdesc></sdesc>
<desc></desc>
<type>void</type>
</methodsynopsis>
<entry/>
</manual>  	
