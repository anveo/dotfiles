# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn�t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}


# All the dig info
function digga() {
        dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
        printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
        echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
        perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
        echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
        perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
        echo # newline
}

# Proxy Helpers (Charles, etc)

function proxy-show() {
  echo "ALL_PROXY = ($ALL_PROXY)"
  echo "HTTP_PROXY = ($HTTP_PROXY)"
  echo "http_proxy = ($http_proxy)"
  echo "HTTPS_PROXY = ($HTTPS_PROXY)"
  echo "https_proxy = ($https_proxy)"
  echo "ftp_proxy = ($ftp_proxy)"
  echo "rsync_proxy = ($rsync_proxy)"
  echo "no_proxy = ($no_proxy)"
  echo "NO_PROXY = ($NO_PROXY)"
}

# Enable Proxy
function proxy-on() {
  export ALL_PROXY=http://localhost:8888
  export HTTP_PROXY=$ALL_PROXY
  export http_proxy=$ALL_PROXY
  export HTTPS_PROXY=$ALL_PROXY
  export https_proxy=$ALL_PROXY
  export ftp_proxy=$ALL_PROXY
  export rsync_proxy=$ALL_PROXY
  export NO_PROXY=localhost,.local,169.254.,127.0.0.1,10.0.2.,/var/run/docker.sock
  export no_proxy=$NO_PROXY
  proxy-show
}

# Disable Proxy
function proxy-off() {
  unset HTTP_PROXY HTTPS_PROXY http_proxy https_proxy ftp_proxy rsync_proxy ALL_PROXY NO_PROXY no_proxy
  proxy-show
}

function pw() {
  pwgen --capitalize --numerals 16 4
}

function pw2() {
  pwgen --capitalize --numerals --symbols 16 8
}

function w() {
  curl wttr.in
}

# 1password
opon() {
  if [[ -z $OP_SESSION_my ]]; then
    eval $(op signin my)
  fi
}
opoff() {
  op signout
  unset OP_SESSION_my
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}�";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -i -q microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Fix issues with zsh completion:
function fixzsh() {
  rm ~/.zcompdump*;
  # rm ~/.antigen/.zcompdump*;
  rm ~/.zplug/zcompdump*;
  exec zsh;
}


# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    f=$(mktemp)
    (
	set +e
	broot --outcmd "$f" "$@"
	code=$?
	if [ "$code" != 0 ]; then
	    rm -f "$f"
	    exit "$code"
	fi
    )
    code=$?
    if [ "$code" != 0 ]; then
	return "$code"
    fi
    d=$(cat "$f")
    rm -f "$f"
    eval "$d"
}

clearDockerLog() {
  dockerLogFile=$(docker inspect $1 | grep -G '\"LogPath\": \"*\"' | sed -e 's/.*\"LogPath\": \"//g' | sed -e 's/\",//g')
  rmCommand="rm $dockerLogFile"
  screen -d -m -S dockerlogdelete ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty
  screen -S dockerlogdelete -p 0 -X stuff $"$rmCommand"
  screen -S dockerlogdelete -p 0 -X stuff $'\n'
  screen -S dockerlogdelete -X quit
}

# set OP_ACCOUNT in ~/.localrc or similar
opon() {
  if [[ -z $OP_SESSION ]]; then
    eval $(op signin $OP_ACCOUNT)

    OS_TYPE=$(uname -s)
    if [ "$OS_TYPE" = Darwin ]; then # MacOS
      OP_EXPIRATION_TIME=$(date -v +30M -u +"%Y-%m-%dT%H:%M:%SZ")
    elif [ "$OS_TYPE" = Linux ]; then
      OP_EXPIRATION_TIME=$(date -d '+30 min' -u +"%Y-%m-%dT%H:%M:%SZ")
    fi

    export OP_SESSION_EXPIRATION="$OP_EXPIRATION_TIME"
  fi
}

opoff() {
  op signout
  unset OP_SESSION
  unset OP_SESSION_EXPIRATION
}

latestlang() {
  for cmd in htmlq jq curl; do
    if ! command -v $cmd &> /dev/null; then
      echo "Error: $cmd is required but not installed."
      return 1
    fi
  done

  ########################################
  # Ruby
  ########################################

  RUBY_VERSION=$(curl -s https://www.ruby-lang.org/en/downloads/ | grep -o 'The current stable version is [0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/The current stable version is //' | head -1)
  if [ ! -z "$RUBY_VERSION" ]; then
    # echo "Ruby: $RUBY_VERSION"
  else
    echo "Ruby: Failed to determine latest version"
  fi

  ########################################
  # NodeJS
  ########################################

  NODE_DATA=$(curl -s https://nodejs.org/dist/index.json)

  if [ -z "$NODE_DATA" ]; then
    echo "Failed to fetch Node.js version data."
    return 1
  fi

  NODE_VERSION=$(echo "$NODE_DATA" | jq -r '.[0].version' | tr -d 'v')
  NODE_LTS_VERSION=$(echo "$NODE_DATA" | jq -r '[.[] | select(.lts != false)] | .[0].version' | tr -d 'v')
  NODE_LTS_NAME=$(echo "$NODE_DATA" | jq -r '[.[] | select(.lts != false)] | .[0].lts')

  # echo "Node.js: $LATEST_VERSION"
  # echo "LTS Node.js: $LATEST_LTS (codename: $LTS_NAME)"

  ########################################
  # Python
  ########################################

  PYTHON_VERSION=$(curl -s --compressed https://www.python.org/downloads/ |
                  htmlq '.download-list-widget' --text |
                  grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' |
                  sort -t. -k1,1n -k2,2n -k3,3n |
                  tail -n1)

  if [ -z "$PYTHON_VERSION" ]; then
    echo "Failed to determine latest Python version."
    return 1
  fi

  # echo "Python: $PYTHON_VERSION"

  ########################################
  # Golang
  ########################################

  GOLANG_DATA=$(curl -s "https://go.dev/dl/?mode=json")

  if [ -z "$GOLANG_DATA" ]; then
    echo "Failed to fetch Golang version data."
    return 1
  fi

  GO_VERSION=$(echo "$GOLANG_DATA" | jq -r '[.[] | select(.stable == true)] | .[0].version' | sed 's/^go//')

  if [ -z "$GO_VERSION" ] || [ "$GO_VERSION" = "null" ]; then
    echo "Failed to extract latest stable Golang version."
    return 1
  fi

    # echo "Golang: $GO_VERSION"

  # Format output without using column -o flag (not available on macOS)
  printf "%-12s | %-20s | %s\n" "LANGUAGE" "VERSION" "INSTALL COMMAND"
  printf "%-12s | %-20s | %s\n" "Ruby" "$RUBY_VERSION" "rbenv global \$(rbenv install -l | grep -v - | tail -1)"
  printf "%-12s | %-20s | %s\n" "Node.js" "$NODE_VERSION" "fnm install node && fnm default node"
  printf "%-12s | %-20s | %s\n" "Node.js LTS" "$NODE_LTS_VERSION ($NODE_LTS_NAME)" "fnm install --lts && fnm default lts-latest"
  printf "%-12s | %-20s | %s\n" "Python" "$PYTHON_VERSION" "pyenv global \$(pyenv install -l | grep -v - | tail -1)"
  printf "%-12s | %-20s | %s\n" "Golang" "$GO_VERSION" "gvm install go$GO_VERSION && gvm use go$GO_VERSION --default"
}

# Update version managers
updatevm() {
  cd ~/.rbenv/ && git pull && cd -
  cd ~/.rbenv/plugins/ruby-build/ && git pull && cd -
  cd ~/.pyenv && git pull && cd -
  if [ -d "$HOME/.gvm" ]; then
    cd "$HOME/.gvm" && git pull && cd -
  fi
  curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "./.fnm" --skip-shell
}
